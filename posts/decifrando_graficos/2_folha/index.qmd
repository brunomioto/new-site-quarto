---
title: "Decifrando gráficos #2"
description: "Do Jornal para o R"
author: "Bruno Mioto"
date: "2025-04-14"
image: cover.png
categories: ["tutorial","dataviz","ggplot2"]
open-graph:
  description: "Do Jornal para o R"
  image: cover.png
twitter-card:
  description: "Do Jornal para o R"
  image: cover.png
  card-style: summary_large_image
format:
  html:
    fig-width: 8
    fig-height: 5
    fig-dpi: 600
execute:
  warning: false
---

![](cover.png)

## Como isso foi feito?

Todo dia vemos gráficos nos jornais, mas nem sempre sabemos como eles foram feitos. De onde vieram os **dados**? Como foram **tratados**? E será que dá para **recriá-los** usando o R?

Nesta série, pegamos gráficos publicados nos principais **jornais** e recriamos do zero usando **R, tidyverse e ggplot2**. Vou mostrar como encontrar os dados, organizá-los e gerar visualizações que chegam o mais próximo possível do original – tudo de forma transparente e didática. Sim! Vamos fazer e aprender juntos!

E tem mais: **todo o código e dados utilizados estarão disponíveis e comentados (clique nos números abaixo de cada conjunto de código!)**. E por estarmos trabalhando com uma **linguagem de programação**, todos vão obter o mesmo resultado ao final do script.

Acompanhe a série e veja como transformar dados brutos em visualizações incríveis!

## Post anterior

Quer ver o post anterior? Acesse abaixo

```{=html}
<style>
.image-card {
    width: 100%;
    max-width: 500px;
    border-radius: 16px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    background: white;
    text-align: center;
    margin: 20px auto;
    text-decoration: none; /* Remove sublinhado do link */
    display: block;
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}

.image-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
}

.card-image {
    width: 100%;
    display: block;
}

.card-title {
    font-size: 1.5rem;
    font-weight: bold;
    padding: 10px;
    background: #f8f9fa;
    color: black; /* Garante legibilidade */
}

</style>
```

```{=html}
<style>
    .cards-wrapper {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
    }

    .card-container {
        width: 100%;
        max-width: 500px;
        background-color: #ffffff;
        border-radius: 0.75rem;
        box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        overflow: hidden;
        position: relative;
        cursor: pointer;
        text-decoration: none;
        display: block;
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

    .card-container:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
    }

    .top-bar {
        height: 5rem;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.25rem;
        font-weight: bold;
    }

    .hex-logo {
        width: 90px;
        height: 104px;
        position: absolute;
        top: 5rem;
        left: 1.5rem;
        transform: translateY(-50%);
        clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
        background-color: #ffffff;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.8rem;
        color: #555;
        font-weight: 600;
        z-index: 10;
        box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    }

    .hex-logo img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .content-section {
        padding-left: 8rem;
        padding-right: 1.5rem;
        padding-top: 0.2rem;
        padding-bottom: 1rem;
    }

    .package-description {
        color: #4b5567;
        font-size: 0.875rem;
        line-height: 1.25rem;
        margin-top: 0;
        margin-bottom: 0;
    }

    @media (min-width: 768px) {
        .card-container {
            width: calc(50% - 20px);
        }
    }
</style>
```

```{=html}
<div class="card-grid">


  <a href="https://www.brunomioto.com/posts/decifrando_graficos/1_nexo/" class="image-card" target="_blank" rel="noopener noreferrer">
    <img src="https://www.brunomioto.com/posts/decifrando_graficos/1_nexo/cover.png" class="card-image">
    <div class="card-title">Decifrando gráficos #1</div>
  </a>

</div>

<style>
.card-grid {
  display: grid;
  gap: 20px; /* Espaço entre os cards */
}

.image-card {
  display: flex;
  flex-direction: column;
  text-decoration: none;
  color: black; /* ou qualquer outra cor */
  border: 1px solid #ddd; /* Borda opcional */
  border-radius: 5px; /* Borda arredondada opcional */
  overflow: hidden; /* Garante que a imagem não vaze do card */
}

.card-image {
  width: 100%;
  height: auto;
  display: block;
}

.card-title {
  padding: 10px;
  text-align: center;
}

</style>

```

## #2 - Pirâmide etária indígena (Folha de São Paulo)

Dessa vez vamos analisar um gráfico publicado pela **Folha de São Paulo** com dados do Censo 2022: [População indígena cresce no Norte, mas envelhece ao redor das cidades](https://www1.folha.uol.com.br/cotidiano/2024/05/populacao-indigena-cresce-no-norte-mas-envelhece-ao-redor-das-cidades.shtml)

![](./figures/grafico_folha.png)

Eu particularmente acho muito legal visualizar pirâmides etárias, como essa que fiz com o pessoal da [Base dos Dados](https://medium.com/basedosdados/analisando-dados-de-vacinação-contra-covid-19-com-a-bd-49fe3db8c7f4). Vamos fazer apenas o gráfico, já que as anotações geralmente são adicionadas na pós produção (p. ex. Illustrator) e deixaria este post muito extenso.

### Obtendo os dados

Todos os dados do Censo 2022 estão disponíveis na aba de Downloads do portal: [https://censo2022.ibge.gov.br/panorama/downloads.html](https://censo2022.ibge.gov.br/panorama/downloads.html?localidade=BR). Lá vamos acessar os resultados [**Quilombolas e Indígenas, por sexo e idade, segundo recortes territoriais específicos - Resultados do universo**](https://www.ibge.gov.br/estatisticas/sociais/populacao/22827-censo-demografico-2022.html?edicao=39859&t=resultados) e então selecionamos [**População indígena, por localização do domicílio, grupos de idade e sexo**](https://sidra.ibge.gov.br/Tabela/8175).

Logo nessa página vemos que os dados estão disponíveis através do **SIDRA** (Sistema IBGE de Recuperação Automática), que é basicamente uma plataforma que concentra **todos** os dados do IBGE! E o melhor: podemos acessar diretamente do R com o pacote [{sidrar}](https://github.com/rpradosiqueira/sidrar/)!

Antes de tudo, vamos carregar os pacotes necessários

```{r}
library(sidrar) #baixar dados IBGE
library(janitor) #limpeza dos dados
library(dplyr) #manipulação dos dados
library(stringr) #trabalhar com strings/texto
library(ggplot2) #gráficos
```

Agora só precisamos do número da tabela disponível no site (que é 8175) e rodar o código abaixo:

```{r}
#install.packages("sidrar")
library(sidrar)

pop_ind <- sidrar::get_sidra(8175)
```

Pronto, fácil assim já temos os dados do Censo para este gráfico!

### Trabalhando com os dados

Pois é, nossos dados sempre têm os nomes das variáveis com letras maiúsculas, espaços e acentos. Vamos padronizar para `snake_case`com o pacote {janitor} e também selecionar apenas as variáveis necessárias para este gráfico. Vamos salvando cada passo em um novo objeto para ficar mais fácil de acompanhar.

```{r}
pop_ind2 <- pop_ind |> 
  janitor::clean_names() |> 
  dplyr::select(
    variavel, 
    ano, 
    idade,
    sexo, 
    localizacao_do_domicilio,
    valor
    )
```

Mas veja que temos um valor **`Total`** em `idade`, `sexo` e `localizacao_do_domicilio`. Não vamos precisar dos totais, então podemos removê-los.

```{r}
pop_ind3 <- pop_ind2 |> 
  dplyr::filter(
    idade != "Total",
    sexo != "Total",
    localizacao_do_domicilio != "Total"
  )
```

Nessa tabela, temos as idades individuais, ou agrupadas a cada 5 anos. Vamos selecionar apenas as linhas com as idades agrupadas.

```{r}
pop_ind4 <- pop_ind3 |> 
  filter(
      idade %in% c(
        "0 a 4 anos",
        "5 a 9 anos",
        "10 a 14 anos",
        "15 a 19 anos",
        "20 a 24 anos",
        "25 a 29 anos",
        "30 a 34 anos",
        "35 a 39 anos",
        "40 a 44 anos",
        "45 a 49 anos",
        "50 a 54 anos",
        "55 a 59 anos",
        "60 a 64 anos",
        "65 a 69 anos",
        "70 a 74 anos",
        "75 a 79 anos",
        "80 a 84 anos",
        "85 a 89 anos",
        "90 a 94 anos",
        "95 a 99 anos",
        "100 anos ou mais"
      )
  )
```

::: {.callout-tip collapse="true"}
## Preguiça de escrever tudo

Se você não quer ficar digitando tudo (ou não quer pedir para o chatGPT escrever para você), é possível selecionar as linhas usando **expressões regulares**! Sim, elas parecem bruxaria, mas tem uma [colinha](https://rstudio.github.io/cheatsheets/translations/portuguese/strings_pt_br.pdf) que ajuda muito!

O segredo é encontrar padrões! Veja que as categorias são basicamente **número+ a +número**, e o "100 anos ou mais" colocamos na mão. Vamos lá!

```{r}
pop_ind4 <- pop_ind3 |> 
  filter(
    stringr::str_detect( # <1>
      idade, # <2>
      "[:digit:] a [:digit:]|100 anos ou mais") # <3>
    )
```
1. Detecta a ocorrência de expressões regulares
2. Na variável `idade`
3. E a expressão é: **[número] a [número] OU "100 anos ou mais"**

Bem mais simples!
:::

Agora para deixar igualzinho ao gráfico, vamos remover as palavras " anos" e transformar "100 anos ou mais" em "100+"

```{r}
pop_ind5 <- pop_ind4 |> 
  mutate(
    idade2 = stringr::str_remove( # <1>
      idade, # <2>
      " anos.*" # <3>
      ),
    idade2 = ifelse(idade2 == 100, "100+", idade2) # <4>
  )
```
1. Remove a ocorrência de expressões regulares.
2. Na variável `idade`.
3. E a expressão é: **[espaço]anos(e tudo que vier depois)**.
4. Se `idade2` for igual a 100, transformar em "100+", caso contrário, mantenha como está.

Ótimo, já temos a variável pronta, vamos calcular as proporções agrupadas pela localização do domicílio.

```{r}
pop_ind6 <- pop_ind5 |>                                 
  group_by(localizacao_do_domicilio) |>                 # <1>
  add_count(name = "total", wt = valor) |>              # <2>
  ungroup() |>                                          # <3>
  mutate(prop = valor / total)                          # <4>
```
1. Agrupamos os dados pela variável localizacao_do_domicilio.
2. Criamos uma nova coluna chamada total com a soma ponderada de valor dentro de cada grupo.
3. Retiramos o agrupamento com `ungroup()` para evitar efeitos indesejados nas próximas operações.
4. Calculamos a proporção de cada linha dentro do grupo, dividindo valor pelo total correspondente.

Agora vamos fazer um truque e multiplicar os prop para homens por -1, assim eles ficam do lado esquerdo da pirâmide.

```{r}
pop_ind7 <- pop_ind6 |> 
  mutate(
    prop = ifelse(sexo == "Homens", prop*-1, prop)  # <1>
  )
```
1. Inverte o sinal da proporção para homens, para que apareçam do lado esquerdo da pirâmide.

Vamos ver se os dados estão prontos?

```{r}
pop_ind7 |> 
  ggplot(aes(x = prop, y = idade2, fill = sexo)) +       # <1>
  geom_col()                                             # <2>
```
1. Mapeia a proporção no eixo x, idade no eixo y e cor por sexo.
2. Cria as barras da pirâmide populacional com `geom_col()`.

Veja que as categorias de idade estão seguindo uma ordem alfabética, mas queremos que sigam a ordem da pirâmide etária. Vamos ordenar a variável `idade2` de acordo com a ordem que queremos. Para isso vamos transformar ela em um **fator** usando a função `fct_inorder()` do pacote {forcats} (é um anagrama para factors!)

```{r}
pop_ind8 <- pop_ind7 |> 
  mutate(idade2 = forcats::fct_inorder(idade2))
```
1. Converte a variável `idade2` em fator e preserva a ordem atual dos valores, garantindo que as faixas etárias apareçam na ordem do dataset no gráfico.

Agora tudo está ordenado!

```{r}
pop_ind8 |> 
  ggplot(aes(x = prop, y = idade2, fill = sexo))+
  geom_col()
```

Pronto! Temos os dados prontos para o gráfico! Agora vamos para a parte mais legal!

### Criando o gráfico

Primeiro vamos dividir os dados em dois grupos: os que estão **dentro** das terras indígenas e os que estão **fora**. Para isso, vamos usar a função `filter()` dentro de cada geometria do `geom_col()`.

Lembre-se que o grupo **"Em terras indígenas"** deve ser um retângulo preenchido e o grupo **"Fora de terras indígenas"** deve ser apenas contornado. Para isso, vamos usar o argumento `fill = NA` para criar uma geometria apenas com o contorno. Como o contorno está da mesma cor do preenchimento, vamos usar o `color = "black"` apenas para visualizar.

```{r}
pop_ind8 |> 
  ggplot(aes(x = prop, y = idade2, 
             fill = sexo))+
  geom_col(
    data = ~filter(., 
                   localizacao_do_domicilio == "Em terras indígenas"), # <1>
    color = NA # <2>
  )+
  geom_col(
    data = ~filter(., 
                   localizacao_do_domicilio == "Fora de terras indígenas"), # <3>
    fill = NA, 
    color = "black" # <4>
  )
```
1. Usa `filter()` para manter só as observações **dentro** das terras indígenas.
2. Retira o contorno das barras preenchidas.
3. Usa `filter()` para manter só as observações **fora** das terras indígenas.
4. Define a cor do contorno como preta, apenas para fins de visualização.

Faltam as cores! Vamos utilizar o argumento `color` também. E definir as cores utilizando `scale_color_manual()` e `scale_fill_manual()`. 

```{r}
pop_ind8 |> 
  ggplot(aes(x = prop, y = idade2,
             fill = sexo, color = sexo))+
  geom_col(
    data = ~filter(., 
                   localizacao_do_domicilio == "Em terras indígenas"),
    color = NA)+
  geom_col(
    data = ~filter(., 
                   localizacao_do_domicilio == "Fora de terras indígenas"),
    fill = NA)+
  scale_color_manual( # <1>
    values = c(
      "Mulheres" = "#420e44",
      "Homens" = "#076e56"
    )
  )+
  scale_fill_manual( # <2>
    values = c(
      "Mulheres" = "#b3abce",
      "Homens" = "#a5d4cf"
    )
  )
```
1. Define as cores do contorno (`color`) para cada sexo.
2. Define cores mais claras de preenchimento (`fill`) para cada sexo.

Agora o gráfico já está quase igual! Só precisamos mexer no **Tema** com a função `theme()`. Vamos deixar o fundo branco, tirar as grades, deixar os eixos mais bonitos e remover as legendas.


```{r}
pop_ind8 |> 
  ggplot(aes(x = prop, y = idade2, 
             fill = sexo,
             color = sexo))+
  geom_col(
    data = ~filter(.x,
                   localizacao_do_domicilio == "Em terras indígenas"),
    color = NA)+
  geom_col(
    data = ~filter(.x,
                   localizacao_do_domicilio == "Fora de terras indígenas"),
    fill = NA)+
  scale_x_continuous( # <1>
    breaks = seq(-0.08,0.08,0.02),
    labels = c("8%","6","4","2","0","2","4","6","8%")
  )+
  scale_fill_manual(
    values = c(
      "Mulheres" = "#b3abce",
      "Homens" = "#a5d4cf"
    )
  )+
  scale_color_manual(
    values = c(
      "Mulheres" = "#420e44",
      "Homens" = "#076e56"
    )
  )+
  theme_minimal()+ # <2>
  theme( # <3>
    legend.position = "none", #sem legenda
    plot.background = element_rect(fill = "white", color = NA), #adiciona fundo
    panel.grid.major.x = element_blank(), #sem grade major
    panel.grid.minor.x = element_blank(), #sem grade minor
    axis.title = element_blank(), #sem título dos eixos
    axis.text = element_text(color = "black"), #texto em preto
    axis.ticks.x = element_line(color = "#ebebeb") #ticks em cinza
  )+
  coord_cartesian( # <4>
    xlim = c(-0.08,0.08)
  )

```
1. Define as quebras do eixo x (de -0.08 até 0.08 a cada 0.02 já que são porcentagens) e ajusta os rótulos para mostrar proporções negativas e positivas como porcentagens igual ao gráfico original.
2. Usa um tema claro e limpo (`theme_minimal()`) parecido, como base para o gráfico.
3. Remove legenda, grades do eixo x, títulos dos eixos e ajusta o estilo dos textos e ticks para deixar igual ao original.
4. Ajusta manualmente os limites do eixo x para que o gráfico termine simetricamente em -8% e 8%.

<!-- Agora sim! Aprendemos como uma equipe de jornal chegou até este gráfico! -->

Conseguimos! Até que ficou bem parecido!

Espero que este post tenha sido útil para você! Se tiver alguma dúvida, sugestão (qual será o próximo post?) ou crítica, [mande um e-mail](mailto:bhmstabile@gmail.com)!

Quer conhecer mais o meu trabalho? Veja meu [**Portfólio**](https://www.brunomioto.com/portfolio.html)!
