[
  {
    "objectID": "twitter-bots.html",
    "href": "twitter-bots.html",
    "title": "Twitter bots",
    "section": "",
    "text": "I created some Twitter bots to tweet daily! But Elon Musk killed it."
  },
  {
    "objectID": "twitter-bots.html#reservatórios-bot",
    "href": "twitter-bots.html#reservatórios-bot",
    "title": "Twitter bots",
    "section": "Reservatórios bot",
    "text": "Reservatórios bot\nTweets by ReservatorioBot"
  },
  {
    "objectID": "twitter-bots.html#manchete-bot",
    "href": "twitter-bots.html#manchete-bot",
    "title": "Twitter bots",
    "section": "Manchete bot",
    "text": "Manchete bot\nTweets by MancheteBot"
  },
  {
    "objectID": "r-packages.html",
    "href": "r-packages.html",
    "title": "R packages",
    "section": "",
    "text": "One of my hobbies is creating R packages, for so many things! From getting reservoir data to plotting teams’ badges, everything is an opportunity to create a package!"
  },
  {
    "objectID": "r-packages.html#reservatoriosbr",
    "href": "r-packages.html#reservatoriosbr",
    "title": "R packages",
    "section": "reservatoriosBR",
    "text": "reservatoriosBR\n\nreservatoriosBR downloads data from Brazilian reservoirs from the SAR-ANA and ONS platforms and organizes it into a structure for use in R!\nI am currently looking for volunteers to test the functions and data. If you can, get in touch!\nIf you use it in any work, cite it or let me know!\nYou can install it running:\n\nif(!requireNamespace(\"remotes\", quietly = TRUE)){\n    install.packages(\"remotes\")\n  }\nremotes::install_github(\"brunomioto/reservatoriosBR\")"
  },
  {
    "objectID": "r-packages.html#futebolplotr",
    "href": "r-packages.html#futebolplotr",
    "title": "R packages",
    "section": "futebolplotR",
    "text": "futebolplotR\n\nThe goal of futebolplotR is to provide functions and geoms that help creating visualization of Brazilian soccer related analysis. It provides a ggplot2 geom that does the heavy lifting of plotting Brazilian soccer badges in high quality, with correct aspect ratio and possible transparency.\nThe futebolplotR contains emblems of the teams that have participated in the Brasileirão Série A soccer league from 2003 to the present day. Other teams are also welcome!\nThis package can be used with data from brasileirao R package.\nThe code for this package was heavily based on nbaplotR with minor changes to support Brazilian soccer team badges.\nYou can install it running:\n\nif(!requireNamespace(\"remotes\", quietly = TRUE)){\n    install.packages(\"remotes\")\n  }\nremotes::install_github(\"brunomioto/futebolplotR\")"
  },
  {
    "objectID": "r-packages.html#feowr",
    "href": "r-packages.html#feowr",
    "title": "R packages",
    "section": "feowR",
    "text": "feowR\n\n  \n\nfeowR provides a faster and secure way to download shapefiles of Freshwater Ecoregions of the World (FEOW) using piggyback R package.\nYou can install it running:\n\nif(!requireNamespace(\"remotes\", quietly = TRUE)){\n    install.packages(\"remotes\")\n  }\nremotes::install_github(\"brunomioto/feowR\")"
  },
  {
    "objectID": "r-packages.html#worldclimdata",
    "href": "r-packages.html#worldclimdata",
    "title": "R packages",
    "section": "WorldClimData",
    "text": "WorldClimData\n\n \nWorldClimData presents a faster way to download WorldClim data using piggyback.\nYou can install it running:\n\nif(!requireNamespace(\"remotes\", quietly = TRUE)){\n    install.packages(\"remotes\")\n  }\nremotes::install_github(\"brunomioto/WorldClimData\")"
  },
  {
    "objectID": "r-packages.html#dnaplot",
    "href": "r-packages.html#dnaplot",
    "title": "R packages",
    "section": "DNAplot",
    "text": "DNAplot\n\n  \nThe DNAplot package provides a simple and customizable function to create aesthetically pleasing plots of DNA sequences. Each base is represented by a colored rectangle, allowing for easy visualization and analysis of sequence features.\nYou can install it running:\n\nif(!requireNamespace(\"remotes\", quietly = TRUE)){\n    install.packages(\"remotes\")\n  }\nremotes::install_github(\"brunomioto/DNAplot\")\n\n\nlibrary(DNAplot)\n\nsequence &lt;- \"ACTGAAGTA\"\n\nplot_dna(sequence)\n\nℹ Plotting 9 bases"
  },
  {
    "objectID": "r-packages.html#ggimprensa",
    "href": "r-packages.html#ggimprensa",
    "title": "R packages",
    "section": "ggimprensa",
    "text": "ggimprensa\n\nggimprensa brings themes from the main Brazilian newspapers for ggplot2.\nThis package was inspired by the ggthemes package.\nThe goal of this package is to help users to create more beautiful graphics in an easy and fast way.\nYou can install it running:\n\nif(!requireNamespace(\"remotes\", quietly = TRUE)){\n    install.packages(\"remotes\")\n  }\nremotes::install_github(\"brunomioto/ggimprensa\")\n\n\n\n\n\n\n\n\n\n\nG1 theme\n\n\n\n\n\n\n\nNexo theme\n\n\n\n\n\n\n\nPoder 360 theme"
  },
  {
    "objectID": "r-packages.html#more-packages-soon",
    "href": "r-packages.html#more-packages-soon",
    "title": "R packages",
    "section": "More packages soon…",
    "text": "More packages soon…"
  },
  {
    "objectID": "posts/trees_mga/pt/index.html#a-cidade",
    "href": "posts/trees_mga/pt/index.html#a-cidade",
    "title": "Mapeando as árvores de Maringá-PR",
    "section": "A cidade",
    "text": "A cidade\nMaringá é uma cidade paranaense com 409 mil habitantes segundo o Censo 2022 conhecida nacionalmente pela flora abundante, onde 97,5% das edificações da cidade tinha uma ávore próxima.\n\n\nBrasil e Maringá\n\nA cidade foi planejada em 1947 como Cidade-Jardim, onde os parques e a vegetação permeiam a cidade idealizando um cinturão verde. O planejamento também pode ser visto com as vias atuais que seguem um padrão Norte-Sul e Leste-Oeste bem evidente.\n\nMas as as vias e parques não contam toda a história…"
  },
  {
    "objectID": "posts/trees_mga/pt/index.html#as-árvores",
    "href": "posts/trees_mga/pt/index.html#as-árvores",
    "title": "Mapeando as árvores de Maringá-PR",
    "section": "As árvores",
    "text": "As árvores\nCom acesso via LAI aos dados georreferenciados de todas as árvores de Maringá, cada árvore pode ser visualizada como um ponto no mapa!\n\nNo mapa acima não existe nada além de pontos para cada árvore. São exatamente 142.893 árvores catalogadas que seguem o desenho das vias da cidade.\n\n\n\n\n\n\n\n\nÁrvores\n\n\n\n\n\nÁrvores+Vias\n\n\n\n\n\nVias\n\n\n\n\nA partir dos microdados de cada árvore na cidade, percebe-se a dominância de Sibipirunas na cidade (23,6%), seguida de Oitis (15,3%). Das 142 mil árvores catalogadas, cerca de 17 mil não puderam ser identificadas.\n\n\n10 espécies de árvores mais comuns em Maringá\n\nDentre as árvore da cidade, os Ipês se destacam pela beleza exuberante que apresentam no período do inverno. Em destaque, são apresentados os ipês roxos (#984ea3◉), ipês brancos (#ffffff◉), ipês amarelos (#ffff33◉) e ipês rosas (#f781bf◉).\n\nMas essas não são todas as árvores da cidade, já que o levantamento florístico foi realizado apenas nas vias urbanas. Praticamente todas as grandes áreas sem pontos na visualização são áreas florestais, fundos de vale, universidades (a UEM está bem no centro do mapa) ou novos bairros não estudados.\nO acesso a esses dados via LAI só foi possível com a ajuda do Bruno Morassutti, Co-fundador e Diretor de Advocacy da Fiquem Sabendo. A tabela com os dados disponibilizados pela prefeitura (espécie e coordenadas) pode ser acessado aqui."
  },
  {
    "objectID": "posts/intro_ggplot2/pt/index.html#pacotes-utilizados",
    "href": "posts/intro_ggplot2/pt/index.html#pacotes-utilizados",
    "title": "Introdução ao ggplot2",
    "section": "Pacotes utilizados",
    "text": "Pacotes utilizados\nNessa aula vamos utilizar os seguintes pacotes:\n\ndplyr para manipulação de dados\nggplot2 para criar gráficos\nggpath para plotar imagens de uma forma bem mais fácil\npokemon para obter a tabela de pokemons em pt-br\n\nPara instalar os pacotes, utilizamos o seguinte script:\n\ninstall.packages(c(\"dplyr\", \"ggplot2\", \n                   \"ggpath\", \"pokemon\"))\n\nAgora que temos os pacotes instalados, é só carregá-los.\n\nlibrary(dplyr)\nlibrary(pokemon)\nlibrary(ggplot2)\nlibrary(ggpath)"
  },
  {
    "objectID": "posts/intro_ggplot2/pt/index.html#os-dados",
    "href": "posts/intro_ggplot2/pt/index.html#os-dados",
    "title": "Introdução ao ggplot2",
    "section": "Os dados",
    "text": "Os dados\nPara criar nossos gráficos, precisamos de um conjunto de dados. Vamos utilizar o pacote pokemon criado pelo William Amorim que tem o dataset traduzido!\n\npokemon_df &lt;- pokemon::pokemon_ptbr"
  },
  {
    "objectID": "posts/intro_ggplot2/pt/index.html#gráficos-com-r-base",
    "href": "posts/intro_ggplot2/pt/index.html#gráficos-com-r-base",
    "title": "Introdução ao ggplot2",
    "section": "Gráficos com R base",
    "text": "Gráficos com R base\nUma forma de criar gráficos é usando o próprio R base, que é bem simples mas permite visualizações rápidas.\nPodemos criar gráficos de dispersão, por exemplo.\n\nplot(altura ~ peso, data = pokemon_df)\n\n\n\n\n\n\n\nO problema começa quando queremos deixar esses gráficos mais bonitos\n\nplot(altura ~ peso, data = pokemon_df,\n     main = \"Título\",\n     xlab = \"Massa (kg)\", ylab = \"Altura (m)\",\n     pch = 19, frame = FALSE)\nabline(lm(altura ~ peso, data = pokemon_df), col = \"blue\")\n\n\n\n\n\n\n\nIsso é confuso e eu acho muito difícil de deixar qualquer gráfico assim mais bonito."
  },
  {
    "objectID": "posts/intro_ggplot2/pt/index.html#gráficos-com-ggplot2",
    "href": "posts/intro_ggplot2/pt/index.html#gráficos-com-ggplot2",
    "title": "Introdução ao ggplot2",
    "section": "Gráficos com ggplot2",
    "text": "Gráficos com ggplot2\nMas agora vamos conhecer o pacote ggplot2. Esse pacote foi a tese do Hadley Wickham, atual cientista-chefe da RStudio/Posit.\nA mágica aqui é que esse pacote incorporou a gramática de gráficos (por isso o gg), que trouxe vários fundamentos a serem seguidos. Um deles é a criação de gráficos por camadas, como se fosse uma pintura!\n\n\nFonte: QCBS R Workshop Series\n\nEsse pacote já está incluso no tidyverse e segue o mesmo princípio.\n\nlibrary(ggplot2)\n\nSe rodarmos só um ggplot(), teremos uma tela em branco.\n\nggplot()\n\n\n\n\n\n\n\nAgora temos que adicionar o nosso dataset e quais serão nossos eixos.\nSempre que estivermos falando de uma variável do nosso dataset, temos que colocar dentro do argumento aes(), que significa aesthetics.\n\nggplot(data = pokemon_df,\n       aes(x = peso,\n           y = altura))\n\n\n\n\n\n\n\nInclusive, como o ggplot2 funciona em camadas, podemos usar da seguinte forma:\n\nggplot(data = pokemon_df)+\n  aes(x = peso,\n      y = altura)\n\n\n\n\n\n\n\nComo o ggplot2 faz parte do tidyverse, podemos falar para o R no imperativo: “Pegue o dataset pokemon_df e então crie o ggplot…”. O bom dessa abordagem é que, como o ggplot já sabe o dataset de antemão, ele nos ajuda a selecionar as variáveis (aperte tab antes de escrever as variáveis).\n\npokemon_df %&gt;% \n  ggplot(aes(x = peso,\n             y = altura))\n\n\n\n\n\n\n\nAgora temos nosso gráfico com os eixos delimitados, e podemos adicionar as camadas que quisermos. O princípio do ggplot é parecido com o pipe, onde as informações são passadas diretamente para a camada abaixo, assim não precisamos adicionar os dados novamente.\nGeometrias\nAs geometrias são funções que começam por geom_*. Existem muitas e podemos ter uma ajudinha com a colinha do ggplot2.\nPrimeiro, vamos criar um gráfico de dispersão\n\npokemon_df %&gt;% \n  ggplot(aes(x = peso,\n             y = altura))+\n  geom_point()\n\n\n\n\n\n\n\nPara adicionar mais uma camada de geometria, é só adicionar mais uma camada nessa pintura. Vamos adicionar uma linha de tendência com a função geom_smooth().\n\npokemon_df %&gt;% \n  ggplot(aes(x = peso,\n             y = altura))+\n  geom_point()+\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\nPodemos adicionar uma linha de tendência linear com o argumento method = \"lm\"!\n\npokemon_df %&gt;% \n  ggplot(aes(x = peso,\n             y = altura))+\n  geom_point()+\n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nAqui podemos perceber como o ggplot2 funciona igual a uma pintura. Como o geom_smooth() foi chamado depois do geom_point(), ele é plotado por cima.\nVamos ver o mesmo exemplo mas invertendo essas geometrias.\n\npokemon_df %&gt;% \n  ggplot(aes(x = peso,\n             y = altura))+\n  geom_smooth(method = \"lm\")+\n  geom_point()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nVamos fazer um boxplot (utilizando a geometria geom_boxplot) do tipo do pokemon por altura\n\npokemon_df %&gt;% \n  ggplot(aes(x = tipo_1, y = altura))+\n  geom_boxplot()\n\n\n\n\n\n\n\nAgora vamos fazer um gráfico de colunas (utilizando a geometria geom_col()) do ataque dos pokemons.\n\npokemon_df %&gt;% \n  ggplot(aes(x = pokemon, y = ataque))+\n  geom_col()\n\n\n\n\n\n\n\nEita! Nós temos muitos dados! Vamos filtrar só os pokemons iniciais e suas evoluções para plotar.\n\niniciais &lt;- pokemon_df %&gt;% \n  filter(id %in% 1:9)\n\nVamos testar!\n\niniciais %&gt;% \n  ggplot(aes(x = pokemon, y = ataque))+\n  geom_col()\n\n\n\n\n\n\n\nPodemos inverter os eixos, é só mudar. Inclusive com textos grandes, é mais indicado eles ficarem no eixo y.\n\niniciais %&gt;% \n  ggplot(aes(x = ataque, y = pokemon))+\n  geom_col()\n\n\n\n\n\n\n\nOs pokemons não estão na ordem que gostaríamos (como no dataset), estão em ordem alfabética. Então temos que ordená-los pela id, mas para serem ordenados precisamos considerá-los como fatores.\n\niniciais2 &lt;- iniciais %&gt;% \n  mutate(pokemon = reorder(pokemon, id))\n\nVamos ver se funcionou usando a função glimpse() (significa espiadinha do dplyr). Perceba a classe de cada variável entre &lt;...&gt;\n\nglimpse(iniciais2)\n\nRows: 9\nColumns: 22\n$ id              &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9\n$ pokemon         &lt;fct&gt; bulbasaur, ivysaur, venusaur, charmander, charmeleon, …\n$ id_especie      &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9\n$ altura          &lt;dbl&gt; 0.07, 0.10, 0.20, 0.06, 0.11, 0.17, 0.05, 0.10, 0.16\n$ peso            &lt;dbl&gt; 0.69, 1.30, 10.00, 0.85, 1.90, 9.05, 0.90, 2.25, 8.55\n$ exp_base        &lt;dbl&gt; 64, 142, 236, 62, 142, 240, 63, 142, 239\n$ tipo_1          &lt;chr&gt; \"grama\", \"grama\", \"grama\", \"fogo\", \"fogo\", \"fogo\", \"ág…\n$ tipo_2          &lt;chr&gt; \"venenoso\", \"venenoso\", \"venenoso\", NA, NA, \"voador\", …\n$ hp              &lt;dbl&gt; 45, 60, 80, 39, 58, 78, 44, 59, 79\n$ ataque          &lt;dbl&gt; 49, 62, 82, 52, 64, 84, 48, 63, 83\n$ defesa          &lt;dbl&gt; 49, 63, 83, 43, 58, 78, 65, 80, 100\n$ ataque_especial &lt;dbl&gt; 65, 80, 100, 60, 80, 109, 50, 65, 85\n$ defesa_especial &lt;dbl&gt; 65, 80, 100, 50, 65, 85, 64, 80, 105\n$ velocidade      &lt;dbl&gt; 45, 60, 80, 65, 80, 100, 43, 58, 78\n$ cor_1           &lt;chr&gt; \"#78C850\", \"#78C850\", \"#78C850\", \"#F08030\", \"#F08030\",…\n$ cor_2           &lt;chr&gt; \"#A040A0\", \"#A040A0\", \"#A040A0\", NA, NA, \"#A890F0\", NA…\n$ cor_final       &lt;chr&gt; \"#81A763\", \"#81A763\", \"#81A763\", NA, NA, \"#DE835E\", NA…\n$ grupo_ovo_1     &lt;chr&gt; \"monster\", \"monster\", \"monster\", \"monster\", \"monster\",…\n$ grupo_ovo_2     &lt;chr&gt; \"plant\", \"plant\", \"plant\", \"dragon\", \"dragon\", \"dragon…\n$ url_icone       &lt;chr&gt; \"//archives.bulbagarden.net/media/upload/7/7b/001MS6.p…\n$ url_imagem      &lt;chr&gt; \"https://raw.githubusercontent.com/HybridShivam/Pokemo…\n$ id_geracao      &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1\n\n\nOlha como ficou ordenado agora!\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon))+\n  geom_col()\n\n\n\n\n\n\n\nEstão faltando cores nesses gráficos!\nAgora vamos utilizar os argumentos color e fill. Quando a forma for sólida, utilizamos apenas o color, se tiver contorno e preenchimento, utilizamos o colore fill, respectivamente.\nPodemos colorir de acordo com qualquer variável, nesse caso vamos colorir por tipo!\nVeja que podemos determinar a variável na função ggplot() e ela servirá para todas as seguintes. Se quisermos aplicar a uma camada apenas, colocamos apenas nela.\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col()\n\n\n\n\n\n\n\nAgora podemos adicionar o contorno. Como ele não é uma variável (é uma cor fixa), não precisa ir dentro do aes()\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")\n\n\n\n\n\n\n\nLabels\nTodo gráfico pode ter título, subtítulo, titulo dos eixos, etc.\nTudo isso pode ser determinado utilizando a função labs() dentro do ggplot. Perceba que a legenda é criada de acordo com a variável fill, por isso o título da legenda seguirá essa variável.\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  labs(\n    title = \"Os pokemons iniciais\",\n    subtitle = \"Separados por tipo\",\n    caption = \"Bruno Mioto\",\n    x = \"Ataque\",\n    y = \"Pokemon\",\n    fill = \"Tipo\"\n  )\n\n\n\n\n\n\n\nEscalas\nE se quisermos editar as escalas? Nesse caso vamos utilizar o conjunto de funções scale_*.\nVamos editar o eixo X. As quebras estão de 20 em 20, vamos colocar de 10 em 10. Como o eixo x é contínuo, vamos usar a função scale_x_continuous(). O argumento breaks nos ajuda com essa tarefa!\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_x_continuous(breaks = seq(0,200,10))\n\n\n\n\n\n\n\nAs cores também podem ser definidas pela função scale_*. Essas cores não são exatamente as que queremos, podemos definir manualmente usando a função scale_fill_manual().\nComo as cores estão definidas de acordo com o tipo, vamos usar elas como base. O próprio dataset traz as cores para cada tipo. Para o tipo água usaremos a cor #6890F0◉, para o tipo fogo usaremos a cor #F08030◉ e para o tipo grama usaremos a cor #78C850◉.\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )\n\n\n\n\n\n\n\nAlém de determinar as cores, também podemos determinar as labels que cada cor terá na legenda. Vamos fazer isso dentro da função scale também, mas com o argumento labels.\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    ),\n    labels = c(\n      \"fogo\" = \"Fogo\",\n      \"grama\" = \"Grama\",\n      \"água\" = \"Água\"\n    )\n  )\n\n\n\n\n\n\n\nTemas\nMas esses gráficos não estão tão bonitos ainda, podemos editar qualquer coisa dos gráficos, desde a cor do fundo até a fonte.\nO ggplot2 já tem alguns temas pré definidos. Vamos testar\nEssa é a theme_bw()\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )+\n  theme_bw()\n\n\n\n\n\n\n\nEu gosto bastante do theme_classic()\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )+\n  theme_classic()\n\n\n\n\n\n\n\nO theme_minimal() também é muito utilizado.\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )+\n  theme_minimal()\n\n\n\n\n\n\n\nO tema theme_void() mantém apenas as geometrias do gráfico gerado.\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )+\n  theme_void()\n\n\n\n\n\n\n\nMas podemos editar qualquer coisa dentro do tema escolhido também. Essas funções são apenas configuração pré-determinadas.\nA maioria das configurações podem ser vistas neste site. Para mudar as configurações do tema, adicionamos os argumentos na função theme()\nVamos eliminar o título dos eixos\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )+\n  theme(\n    axis.title = element_blank()\n  )\n\n\n\n\n\n\n\nOu mudar o fundo do gráfico. Perceba que temos plot (o gráfico total) e panel (apenas o painel entre os eixos)\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )+\n  theme(\n    plot.background = element_rect(fill = \"pink\"),\n    panel.background = element_rect(fill = \"yellow\")\n  )\n\n\n\n\n\n\n\nVamos mudar as linhas de grade!\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )+\n  theme(\n    plot.background = element_rect(fill = \"pink\"),\n    panel.background = element_rect(fill = \"yellow\",\n                                    color = \"blue\"),\n    panel.grid.major = element_line(color = \"green\"),\n    panel.grid.major.x = element_line(linetype = \"dashed\"),\n    panel.grid.minor.x = element_line(color = \"black\")\n  )\n\n\n\n\n\n\n\nMeu Deus! O gráfico não ficou bonito, mas ficou didático! (Mas nunca faça algo assim de verdade, por favor)\nFacetas\nMuitas vezes temos muitas informações para mostrar em apenas um gráfico. Para isso podemos utilizar a ideia de pequenos múltiplos com a função facet_wrap()!\n\npokemon_df %&gt;% \n  ggplot(aes(x = ataque, \n             y = defesa, \n             color = id_geracao))+\n  geom_point()+\n  facet_wrap(.~id_geracao)\n\n\n\n\n\n\n\nNesse caso o ggplot interpretou a coluna id_geracao como numérica contínua. Mas nesse caso cada geração é independente de outra. Podemos dizer para o ggplot2 interpretas essa variável como fator.\n\npokemon_df %&gt;% \n  ggplot(aes(x = ataque, \n             y = defesa, \n             color = factor(id_geracao)))+\n  geom_point()+\n  facet_wrap(.~factor(id_geracao))\n\n\n\n\n\n\n\nPodemos usar as facetas com outros dados também.\n\npokemon_df %&gt;% \n  ggplot(aes(x = ataque, \n             y = defesa, \n             color = tipo_1))+\n  geom_point()+\n  facet_wrap(.~tipo_1)"
  },
  {
    "objectID": "posts/intro_ggplot2/pt/index.html#plotar-imagens",
    "href": "posts/intro_ggplot2/pt/index.html#plotar-imagens",
    "title": "Introdução ao ggplot2",
    "section": "Plotar imagens",
    "text": "Plotar imagens\nSe quisermos colocar figuras nos nosso gráficos, a melhor indicação é usar o pacote ggpath. Essa é melhor forma de plotar imagens!\nPara isso vamos utilizar a função geom_from_path(). Só precisamos informar qual é a coluna com o caminho para a figura.\nUma sugestão é colocar o argumento da largura width como 0.1 pois as figuras podem ficar gigantes!\n\nlibrary(ggpath)\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  geom_from_path(aes(path = url_imagem),\n                 width = 0.1)+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )\n\n\n\n\n\n\n\nGráfico finalizado\nAqui adicionei alguns toques finais em nosso gráfico (veja o posicionamente dos nomes e figuras!). Infelizmente não cabe a esse post abordar todos esses detalhes, mas deixei tudo com comentários!\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  #adiciona colunas\n  geom_col(color = \"black\",\n           width = 0.5)+\n  #adiciona nomes\n  geom_text(aes(label = pokemon,\n                color = tipo_1),\n            x = 1,\n            hjust = 0, #alinhamento lateral\n            nudge_y = 0.45, #ajuste vertical\n            fontface = \"bold\" #negrito\n            )+\n  #adiciona figuras\n  geom_from_path(aes(path = url_imagem),\n                 width = 0.1, #largura relativa ao total\n                 hjust = 0 #alinhamento lateral\n                 )+\n  #adiciona linha vertical\n  geom_vline(xintercept = 0)+\n  #expande eixo x\n  scale_x_continuous(\n    expand = expansion(mult = c(0,0.1)) #expansão esquerda-direita\n  )+\n  #edita cores (vai afetar o texto que usa color)\n  scale_color_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )+\n  #edita cores (vai afetar a coluna que usa fill)\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )+\n  #edita labs\n  labs(\n    x = \"Ataque\",\n    caption = \"Bruno Mioto - @BrunoHMioto\"\n  )+\n  #usa tema inicial\n  theme_classic()+\n  #edita tema\n  theme(\n    #remover toda a legenda\n    legend.position = \"none\",\n    #remove título do eixo y\n    axis.title.y = element_blank(),\n    #remove texto do eixo y\n    axis.text.y = element_blank(),\n    #remove ticks\n    axis.ticks = element_blank(),\n    #remove eixos\n    axis.line = element_blank(),\n    #adiciona linha de grade - major\n    panel.grid.major.x = element_line(),\n    #adiciona linha de grade pontilhada - minor\n    panel.grid.minor.x = element_line(linetype = \"dashed\"),\n    #aumenta as margens do gráfico\n    plot.margin = margin(10,10,10,10,\"pt\"),\n    #muda a cor do fundo do gráfico\n    plot.background = element_rect(fill = \"#f1f1f1\", color = NA),\n    #muda a cor do fundo do painel\n    panel.background = element_rect(fill = \"#f1f1f1\", color = NA)\n  )+\n  #não corta as imagens que saem do painel\n  coord_cartesian(\n    clip = \"off\"\n  )\n\n\n\n\n\n\n\nTudo o que vimos até aqui é o básico do básico no ggplot2, mas que já nos permite fazer muita coisa legal! Tem vários exemplos de gráficos com ggplot2 aqui, e alguns scripts prontinhos aqui!\nSe achou este conteúdo útil de alguma forma, compartilhe com seus amigos!\nQuer um minicurso/workshop com este material? Entre em contato!"
  },
  {
    "objectID": "posts/en.html",
    "href": "posts/en.html",
    "title": "Bruno Mioto",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngenetics\n\n\npackages\n\n\n\n\n\n\nMar 10, 2025\n\n\nBruno Mioto\n\n\n10 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2\n\n\ndataviz\n\n\n\n\n\n\nFeb 27, 2024\n\n\nBruno Mioto\n\n\n16 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2\n\n\ndataviz\n\n\nmaps\n\n\n\n\n\n\nFeb 1, 2023\n\n\nBruno Mioto\n\n\n5 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/en.html#posts-in-english",
    "href": "posts/en.html#posts-in-english",
    "title": "Bruno Mioto",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngenetics\n\n\npackages\n\n\n\n\n\n\nMar 10, 2025\n\n\nBruno Mioto\n\n\n10 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2\n\n\ndataviz\n\n\n\n\n\n\nFeb 27, 2024\n\n\nBruno Mioto\n\n\n16 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2\n\n\ndataviz\n\n\nmaps\n\n\n\n\n\n\nFeb 1, 2023\n\n\nBruno Mioto\n\n\n5 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/decifrando_graficos/1_nexo/index.html#como-isso-foi-feito",
    "href": "posts/decifrando_graficos/1_nexo/index.html#como-isso-foi-feito",
    "title": "Decifrando gráficos #1",
    "section": "Como isso foi feito?",
    "text": "Como isso foi feito?\nTodo dia vemos gráficos nos jornais, mas nem sempre sabemos como eles foram feitos. De onde vieram os dados? Como foram tratados? E será que dá para recriá-los usando o R?\nNesta série, vou pegar gráficos publicados nos principais jornais e recriá-los do zero usando R, tidyverse e ggplot2. Vou mostrar como encontrar os dados, organizá-los e gerar visualizações que chegam o mais próximo possível do original – tudo de forma transparente e didática. Sim! Vamos fazer e aprender juntos!\nE tem mais: todo o código e dados utilizados estarão disponíveis e comentados (clique nos números abaixo de cada conjunto de código!). E por estarmos trabalhando com uma linguagem de programação, todos vão obter o mesmo resultado ao final do script.\nAcompanhe a série e veja como transformar dados brutos em visualizações incríveis!"
  },
  {
    "objectID": "posts/decifrando_graficos/1_nexo/index.html#pilotos-brasileiros-na-f1-nexo-jornal",
    "href": "posts/decifrando_graficos/1_nexo/index.html#pilotos-brasileiros-na-f1-nexo-jornal",
    "title": "Decifrando gráficos #1",
    "section": "#1 - Pilotos brasileiros na F1 (Nexo Jornal)",
    "text": "#1 - Pilotos brasileiros na F1 (Nexo Jornal)\nVamos começar com um gráfico publicado recentemente pelo Nexo Jornal: O número de brasileiros na Fórmula 1 ao longo dos anos\n\nA equipe do Nexo é muito gente boa e sempre busca explicar melhor como é o trabalho deles, que você pode conferir na série de posts Nos Eixos. Eles utilizam o R para trabalhar com os dados e gerar os gráficos, e o Illustrator para retoques finais.\nComo ficaremos apenas no R, vamos focar na construção do gráfico em si (retângulos/tiles e eixo), sem as ilustrações no entorno.\n\nObtendo os dados\nSegundo a fonte do gráfico, os dados foram obtidos pela plataforma Kaggle (utilizada para competições de Big Data), e podemos ver neste link: Kaggle\nPrimeiro vamos carregar os pacotes necessários\n\nlibrary(readr) #baixar dados csv\nlibrary(janitor) #limpeza dos dados\nlibrary(dplyr) #manipulação dos dados\nlibrary(tidyr) #tratamento dos dados\nlibrary(stringr) #trabalhar com strings/texto\nlibrary(ggplot2) #gráficos\n\nAgora vamos baixar a tabela disponibilizado no site e salvar com o nome F1Drivers_Dataset.csv dentro de uma pasta chamada data. Pronto, agora podemos importar os dados.\n\npilotos &lt;- readr::read_csv(\"data/F1Drivers_Dataset.csv\")\n\nCaramba! São 868 pilotos e 22 variáveis!\n\n\nTrabalhando com os dados\nMas veja que os nomes das variáveis tem letras maiúsculas e espaços (Championship Years). Vamos padronizar para snake_casecom o pacote {janitor}. Vamos salvar cada passo em um novo objeto para ficar mais fácil de acompanhar.\n\npilotos_clean &lt;- janitor::clean_names(pilotos)\n\nVamos filtrar apenas os brasileiros e analisar este dataset\n\npilotos_br &lt;- pilotos_clean |&gt; \n  dplyr::filter(nationality == \"Brazil\")\n\npilotos_br\n\n# A tibble: 32 × 22\n   driver             nationality seasons championships race_entries race_starts\n   &lt;chr&gt;              &lt;chr&gt;       &lt;chr&gt;           &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;\n 1 Rubens Barrichello Brazil      [1993,…             0          326         322\n 2 Enrique Bernoldi   Brazil      [2001,…             0           29          28\n 3 Gino Bianco        Brazil      [1952]              0            4           4\n 4 Raul Boesel        Brazil      [1982,…             0           30          23\n 5 Luiz Bueno         Brazil      [1973]              0            1           1\n 6 Luciano Burti      Brazil      [2000,…             0           15          14\n 7 Pedro Diniz        Brazil      [1995,…             0           99          98\n 8 Christian Fittipa… Brazil      [1992,…             0           43          40\n 9 Emerson Fittipaldi Brazil      [1970,…             2          149         144\n10 Pietro Fittipaldi  Brazil      [2020]              0            2           2\n# ℹ 22 more rows\n# ℹ 16 more variables: pole_positions &lt;dbl&gt;, race_wins &lt;dbl&gt;, podiums &lt;dbl&gt;,\n#   fastest_laps &lt;dbl&gt;, points &lt;dbl&gt;, active &lt;lgl&gt;, championship_years &lt;chr&gt;,\n#   decade &lt;dbl&gt;, pole_rate &lt;dbl&gt;, start_rate &lt;dbl&gt;, win_rate &lt;dbl&gt;,\n#   podium_rate &lt;dbl&gt;, fast_lap_rate &lt;dbl&gt;, points_per_entry &lt;dbl&gt;,\n#   years_active &lt;dbl&gt;, champion &lt;lgl&gt;\n\n\nNeste dataset não temos o Gabriel Bortoleto que vai representar o Brasil em 2025. Vamos adicioná-lo com dplyr::add_row() e apenas as variáveis que vamos precisar.\n\npilotos_br2 &lt;- pilotos_br |&gt; \n  dplyr::add_row(\n    driver = \"Gabriel Bortoleto\",\n    nationality = \"Brazil\",\n    seasons = \"[2025]\"\n  )\n\nSão 33 pilotos brasileiros, aí no meio devem estar os campeões Emerson Fittipaldi, Nelson Piquet e Ayrton Senna. Já já vamos chegar lá!\nAgora vamos criar 2 datasets, um para todas as temporadas de todos os pilotos, e outro para as temporadas em que algum foi campeão.\nPara o primeiro, vamos selecionar as colunas necessárias e salvar em pilotos_br3\n\ndriver (Nome do piloto)\nnationality (Nacionalidade)\nseasons (Temporadas)\nchampionship_years (Anos em que foi campeão)\n\n\npilotos_br3 &lt;- pilotos_br2 |&gt; \n  dplyr::select(driver, nationality, seasons,\n                championship_years)\n\nMas veja que precisamos quebrar a coluna seasons para cada valor ficar em uma linha, obtendo um formato tidy, que utilizaremos no ggplot2 mais pra frente. Para isso vamos usar a função tidyr::separate_longer_delim() que nos permite separar uma string por algum delimitador (nesse caso ,). E vamos também remover os colchetes [ ou ] que ficarem perdidos utilizando o pacote {stringr} e transformar essa variável em numérica.\n\npilotos_br4 &lt;- pilotos_br3 |&gt; \n1  tidyr::separate_longer_delim(\n    cols = c(seasons),\n    delim = \", \") |&gt;\n2  dplyr::mutate(\n    seasons = stringr::str_remove_all(seasons, \"\\\\[|\\\\]\"),\n    seasons = as.numeric(seasons)\n    )\n\n\n1\n\nSepara os valores na coluna seasons em múltiplas linhas, usando a vírgula seguida de espaço como delimitador.\n\n2\n\nRemove os colchetes [ ou ] e transforma a variável seasons em numérica.\n\n\n\n\nAgora vamos utilizar este dataset para criar o pilotos_campeoes. Vamos usar novamente o tidyr::separate_longer_delim(), mas dessa vez com a variável championship_years. Isso vai gerar linhas duplicadas, pois a função busca criar todas combinações entre as linhas. Como aqui queremos apenas os campeões nos respectivos anos, vamos filtrar as temporadas (seasons) que são iguais às temporadas vitoriosas (championship_years). Por fim, vamos criar uma coluna dizendo que eles foram campeões neste ano\n\npilotos_campeoes &lt;- pilotos_br4 |&gt;\n1  tidyr::separate_longer_delim(\n    cols = c(championship_years),\n    delim = \", \") |&gt;\n2  dplyr::mutate(\n    championship_years = stringr::str_remove_all(\n      championship_years,\n      \"\\\\[|\\\\]\")) |&gt;\n3  filter(seasons == championship_years) |&gt;\n4  mutate(\n    campeao = TRUE\n  )\n\n\n1\n\nSepara os valores na coluna championship_years em múltiplas linhas, usando a vírgula seguida de espaço como delimitador.\n\n2\n\nRemove os colchetes [ ou ] e transforma a variável seasons em numérica.\n\n3\n\nFiltra seasons iguais à championship_years.\n\n4\n\nCria uma coluna campeao com valor TRUE para estes pilotos.\n\n\n\n\nAgora só precisamos combinar o dataset pilotos_campeoes com o pilotos_br4 utilizando o left_join(). Aqui vamos falar para utilizar as colunas driver e seasons como guias do join\n\npilotos_br5 &lt;- pilotos_br4 |&gt; \n  dplyr::left_join(\n    pilotos_campeoes,\n1    by = c(\"driver\", \"seasons\")\n    )\n\n\n1\n\nDefine quais variávels serão combinadas de ambos os datasets.\n\n\n\n\nPronto! Temos toda a informação que precisamos. Vamos aos gráficos!\n\n\nCriando o gráfico\nLogo de cara, vemos que o gráfico do Nexo é um tile plot, em que utilizamos a função geom_tile().\nPara isso, precisamos contar o número de pilotos em cada ano, já que o eixo Y apresenta a soma de pilotos. Para isso podemos agrupar nosso dataset por temporada (group_by()) e contar o numero de linhas/pilotos (row_number())\n\nsoma_pilotos &lt;- pilotos_br5 |&gt; \n1  dplyr::group_by(seasons) |&gt;\n2  dplyr::mutate(soma = dplyr::row_number())\n\n\n1\n\nAgrupa os dados por temporada (seasons)\n\n2\n\nConta o número de linhas (nesse caso, pilotos) em cada grupo\n\n\n\n\nAgora vamos plotar! Lembre-se que precisamos utilizar cores de preenchimento diferentes para campeões e também para a temporada atual!\n\n1soma_pilotos |&gt;\n2  ggplot(aes(x = seasons, y = soma))+\n3  geom_tile(\n4    aes(fill = dplyr::case_when(\n      campeao == TRUE ~ \"campeão\",\n      seasons == 2025 ~ \"atual\",\n      TRUE ~ \"normal\"\n    ))\n  )+\n5  theme(\n    legend.position = \"none\"\n  )\n\n\n1\n\nPegamos soma_pilotos e passamos adiante com o pipe.\n\n2\n\nCriamos um gráfico com ggplot(), onde seasons define o eixo X e soma define o eixo Y.\n\n3\n\nAdicionamos geom_tile(), que cria um mosaico de retângulos para representar os valores.\n\n4\n\nDefinimos a cor de preenchimento com case_when(), categorizando os tiles como “campeão”, “atual” ou “normal”.\n\n5\n\nAjustamos o tema para remover a legenda (legend.position = \"none\"), deixando o gráfico mais limpo.\n\n\n\n\n\n\n\n\n\n\n\nQuase! Veja que os campeões não estão na base, como na figura original. Para isso precisamos ordenar (arrange()) o dataset para que os campeões apareçam primeiro na contagem de linhas. Vamos tentar novamente!\n\nsoma_pilotos &lt;- pilotos_br5 |&gt; \n  dplyr::group_by(seasons) |&gt; \n1  dplyr::arrange(campeao) |&gt;\n  mutate(soma = dplyr::row_number())\n\n\n1\n\nOrdena a coluna campeao. Assim, valores TRUE aparecem primeiro\n\n\n\n\nAgora vamos plotar!\n\nsoma_pilotos |&gt; \n  ggplot(aes(x = seasons, y = soma))+\n  geom_tile(\n    aes(fill = dplyr::case_when(campeao == TRUE ~ \"campeão\",\n                                seasons == 2025 ~ \"atual\",\n                                TRUE ~ \"normal\"))\n  )+\n  theme(\n    legend.position = \"none\"\n  )\n\n\n\n\n\n\n\n\nPerfeito! Agora vem a parte mais legal. Deixar o gráfico bonito!\nVamos fazer uma checklist e ajustar tudo!\n\nGráfico clean (fundo branco, apenas eixo x, etc)\nEixo x de 10 em 10 anos\nSem espaço entre o gráfico e eixo x\nTamanho e cores dos retângulos\nGabriel Bortoleto destacado\n\nComeçando pelo tema\n\nsoma_pilotos |&gt; \n  ggplot(aes(x = seasons, y = soma))+\n  geom_tile(\n    aes(fill = dplyr::case_when(campeao == TRUE ~ \"campeão\",\n                                seasons == 2025 ~ \"atual\",\n                                TRUE ~ \"normal\"))\n  )+\n1  theme_classic()+\n  theme(\n2    legend.position = \"none\",\n3    axis.line.y = element_blank(),\n4    axis.ticks.x = element_line(\n      lineend = \"round\",\n      color = \"black\"\n    ),\n5    axis.ticks.y = element_blank(),\n6    axis.title = element_blank(),\n7    axis.text.y = element_blank(),\n8    axis.text.x = element_text(\n      face = \"bold\",\n      color = \"black\"\n    )\n  )\n\n\n1\n\ntheme_classic(): Remove as grades de fundo e simplifica o visual do gráfico.\n\n2\n\nlegend.position = \"none\": Esconde a legenda do gráfico.\n\n3\n\naxis.line.y = element_blank(): Remove a linha do eixo Y.\n\n4\n\naxis.ticks.x: Personaliza os ticks (marcas) do eixo X, deixando-os arredondados e pretos.\n\n5\n\naxis.ticks.y = element_blank(): Remove os ticks do eixo Y.\n\n6\n\naxis.title = element_blank(): Remove os títulos dos eixos.\n\n7\n\naxis.text.y = element_blank(): Esconde os rótulos do eixo Y.\n\n8\n\naxis.text.x: Deixa os rótulos do eixo X em negrito e pretos.\n\n\n\n\n\n\n\n\n\n\n\n✅ Gráfico clean (fundo branco, apenas eixo x, etc)\nAgora os eixos\n\nsoma_pilotos |&gt; \n  ggplot(aes(x = seasons, y = soma))+\n  geom_tile(\n    aes(fill = dplyr::case_when(campeao == TRUE ~ \"campeão\",\n                                seasons == 2025 ~ \"atual\",\n                                TRUE ~ \"normal\"))\n  )+\n1  scale_x_continuous(\n    breaks = seq(1950, 2020, 10)\n  )+\n2  scale_y_continuous(\n    expand = expansion(mult = c(0, 0.05))\n  )+\n  theme_classic()+\n  theme(\n    legend.position = \"none\",\n    axis.line.y = element_blank(),\n    axis.ticks.x = element_line(lineend = \"round\", color = \"black\"),\n    axis.ticks.y = element_blank(),\n    axis.title = element_blank(),\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(face = \"bold\", color = \"black\")\n  )\n\n\n1\n\nDefine os pontos de quebra (ticks) do eixo X a cada 10 anos, de 1950 a 2020. Isso deixa o eixo X mais organizado.\n\n2\n\nAjusta o espaçamento do eixo Y a partir de uma multiplicação. O primeiro valor (0) remove espaço na parte inferior. O segundo valor (0.05) adiciona um pequeno espaço na parte superior (5%), evitando que os retângulos (tiles) fiquem colados à borda superior.\n\n\n\n\n\n\n\n\n\n\n\n✅ Eixo x de 10 em 10 anos\n✅ Sem espaço entre o gráfico e eixo x\nFalta ainda ajustarmos os retângulos\n\nsoma_pilotos |&gt; \n  ggplot(aes(x = seasons, y = soma))+\n  geom_tile(\n    aes(fill = dplyr::case_when(campeao == TRUE ~ \"campeão\",\n                                seasons == 2025 ~ \"atual\",\n                                TRUE ~ \"normal\"),\n1        linewidth = ifelse(driver == \"Gabriel Bortoleto\", 0.3, NA)\n    ),\n2    color = \"black\",\n3    width = 0.8,\n    height = 0.8\n  )+\n  scale_x_continuous(\n    breaks = seq(1950, 2020, 10)\n  )+\n  scale_y_continuous(\n    expand = expansion(mult = c(0, 0.05))\n  )+\n4  scale_linewidth_identity() +\n5  scale_fill_manual(\n    values = c(\n      \"campeão\" = \"#ffce2e\",\n      \"normal\" = \"#ff7b80\",\n      \"atual\" = \"#a8a8a8\"\n    )\n  )+\n  theme_classic()+\n  theme(\n    legend.position = \"none\",\n    axis.line.y = element_blank(),\n    axis.ticks.x = element_line(lineend = \"round\", color = \"black\"),\n    axis.ticks.y = element_blank(),\n    axis.title = element_blank(),\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(face = \"bold\", color = \"black\"),\n    plot.background = element_rect(fill = NA, color = NA),\n    panel.background = element_rect(fill = NA, color = NA)\n  )\n\n\n1\n\nDefine linewidth, para que o retângulo (tile) do Gabriel Bortoleto tenha uma borda mais espessa (0.3), enquanto os demais têm borda invisível (NA).\n\n2\n\nDefine color = \"black\" para que as bordas dos tiles fiquem pretas (quando hourve borda).\n\n3\n\nControla o tamanho dos tiles com width = 0.8, height = 0.8, reduzindo ligeiramente o tamanho para criar uma separação entre os blocos.\n\n4\n\nUsa scale_linewidth_identity() para interpretar os valores de linewidth diretamente, sem precisar de uma escala mapeada.\n\n5\n\nDefine scale_fill_manual(values = c(...)) para atribuir cores personalizadas aos tiles: campeões em amarelo, normais em vermelho e a temporada atual em cinza.\n\n\n\n\n\n\n\n\n\n\n\nAgora sim! Aprendemos como uma equipe de jornal chegou até este gráfico!\nEspero que este post tenha sido útil para você! Se tiver alguma dúvida, sugestão ou crítica, mande um e-mail!"
  },
  {
    "objectID": "posts/arlequin/en/index.html#the-problem",
    "href": "posts/arlequin/en/index.html#the-problem",
    "title": "Facilitating the Creation of Arlequin (.arp) Files with R",
    "section": "The Problem",
    "text": "The Problem\nThis is a very specific post, but it might be useful for those conducting population analyses with genetic data. So I decided to write a simple post to help with this process.\nDuring my thesis, I needed to perform population analyses (AMOVA, FST, etc.), but since I am not an expert in this field, I had never used the Arlequin software before. Arlequin has been around since 1995 and is still widely used in scientific studies.\nThe problem arises when we need to create an input file .arp for use in Arlequin. Some programs (like DNAsp) do save an .arp file, but it often does not work well and usually requires manual editing."
  },
  {
    "objectID": "posts/arlequin/en/index.html#tutorials",
    "href": "posts/arlequin/en/index.html#tutorials",
    "title": "Facilitating the Creation of Arlequin (.arp) Files with R",
    "section": "Tutorials",
    "text": "Tutorials\nWhile looking for help, I found this comprehensive tutorial (in Portuguese-BR) by Natália E. de Lima.\nNatália clearly understands this topic much better than I do, so she can manually edit population data in a easy way.\n\nSince I am more comfortable with R than with population genetics, I looked for other tutorials using R and found this video by Josh Banta.\n\nIn this video, he demonstrates how to convert a FASTA file into an .arp file while also adding groupings to the data. The entire process is done using an R script, and the data are available in the video above."
  },
  {
    "objectID": "posts/arlequin/en/index.html#a-simpler-approach",
    "href": "posts/arlequin/en/index.html#a-simpler-approach",
    "title": "Facilitating the Creation of Arlequin (.arp) Files with R",
    "section": "A Simpler Approach",
    "text": "A Simpler Approach\nHowever, the script for this task is quite confusing and may be challenging for those who are not very proficient in R. With that in mind, and to make things easier for my colleagues (and myself) in the future, I adapted this code into a simple R function called create_arlequin().\nThis function is available in the package I created for my lab, Nupgen! This is a highly experimental package with extremely specific functions, so don’t worry about the other ones.\nTo install the package, simply open R and run:\n\nif (!requireNamespace(\"remotes\", quietly = TRUE)){\n    install.packages(\"remotes\")\n  }\nremotes::install_github(\"brunomioto/nupgen\")\n\nDone! Now let’s create the .arp file we need. First, we need to load the required packages. We will use the ape package to import sequences and nupgen to create the file we want.\n\nlibrary(ape)\nlibrary(nupgen)\n\nNow, let’s load a FASTA alignment and a group file. We will use the example files from Josh Banta’s tutorial, but you can use your own as well!\nThe FASTA file is a common alignment file, trimmed in software like MEGA, following this structure:\n\n&gt;C1NFaBCy  \nAATCATCCCCCACATAACCTCCACACTTATCACATACCTTCTAATCTTATTAGGCGTAGC\nATTCTTTACCCTTCTTGAACGCAAAGCTTTAGGGTACTTTCAAATCCGAAAAGGCCCAAA\nCAAAGTTGGAATTATAGGAATCCCACAACCACTAGCAGACGCCCTAAAACTTTTTGTGAA\nAGAATGAGTAATGCCCACATCTTCAAACTACTTACCATTTATTTTAACCCCAACAATCAT\nATTAATTTTAGCACTTAGACTATGACAACTATTTCCATCCTTTATACTCTCATTTCAAAT\nAGCCCTAGGAATACTCTTATTCTTATGTATTTCTTCCTTAACCGTCTATACAACCTTAAT\nAGCAGGTTGGGCCTCAAACTCGAAGTATGCTCTACTAGGGGCCATTCGAGCCATGGCCCA\nAACCATCTCATATGAGGTAACAATAACACTAATTATCATCTTCTACCTATTCTTAATTAT\nACAAATAGACATAGTAACAATCCGCTCAGTTAACACCTCTATACCAACCTTTGCCCTCTC\nCGCACCATTAGCTATTATATGGACTGTTGTCATCTTAGCAGAAACAAACCGAGCCCCATT\nTGACTTT\n&gt;C2NPrBCy  \nAATCATCCCCCACATAACCTCCACACTTATCACATACCTTCTAATCTTATTAGGCGTAGC\nATTCTTTACCCTTCTTGAACGCAAAGCTTTAGGGTACTTTCAAATCCGAAAAGGCCCAAA\nCAAAGTTGGAATTATAGGAATCCCACAACCACTAGCAGACGCCCTAAAACTTTTTGTGAA\nAGAATGAGTAATGCCCACATCTTCAAACTACTTACCATTTATTTTAACCCCAACAATCAT\nATTAATTTTAGCACTTAGACTATGACAACTATTTCCATCCTTTATACTCTCATTTCAAAT\nAGCCCTAGGAATACTCTTATTCTTATGTATTTCTTCCTTAACCGTCTATACAACCTTAAT\nAGCAGGTTGGGCCTCAAACTCGAAGTATGCTCTACTAGGGGCCATTCGAGCCATGGCCCA\nAACCATCTCATATGAGGTAACAATAACACTAATTATCATCTTCTACCTATTCTTAATTAT\nACAAATAGACATAGTAACAATCCGCTCAGTTAACACCTCTATACCAACCTTTGCCCTCTC\nCGCACCATTAGCTATTATATGAACTGTTGTTATCTTAGCAGAAACAAACCGAGCCCCATT\nTGACTTT\n\nMeanwhile, the group file is a .csv file with two columns: group (containing the group names) and name (containing the sequence names), following this example:\n\ngroup,name\n1,C1NFaBCy  \n1,C2NPrBCy  \n1,C3NPrBCy  \n1,C4NPrBCy  \n1,C5NPrBCy  \n1,C6NPrBCy  \n1,C7NPrBCy  \n1,C8NPrBCy  \n1,C9NPrNec  \n2,C10NPrNec \n2,C11NPrNec \n2,C12NPrNec \n2,C13NPrNec \n3,C14NPrSab \n3,C15NPrSab \n\nIf needed, you can create this file using Excel and export it as a .csv file, but make sure the separator is a comma (,) instead of a semicolon (;).\nNote that my files are inside the data folder, so I include that in the file path:\n\nalignment &lt;- read.dna(\"data/fasta_file.fas\", format = \"fasta\")\n\ngroups &lt;- read.csv(\"data/groups_file.csv\")\n\nAgora que temos os arquivos carregados, é só rodar a função. Perceba que, além dos argumentos do alinhamento e grupos, temos um chamado output.dir, este argumento define qual diretório você deseja salvar o arquivo output.arp. O padrão é o diretório atual (“.”), mas aqui vou salvar na pasta data, junto com os outros arquivos.\n\nnupgen::create_arlequin(fasta = alignment, groups = groups, output.dir = \"./data\")\n\nℹ Creating .arp file\n\n\nℹ Saving .arp file\n\n\nDone! Now you have an output.arp file ready to use in Arlequin!\nIt’s worth checking if your data is correct. The file should look something like this:\n\n[Profile] \n\n \n\nTitle=\"data\" \n\nNBSamples=14\n \n\nDataType=DNA \n\nGenotypicData=0 \n\nLocusSeparator=WHITESPACE \n\n \n\n[Data] \n\n[[Samples]] \n\n \n\nSampleName=\"1\"\n\nSampleSize=9\n\nSampleData={ \n\n \n\nc1nfabcy   1 A A T C A T C C C C C A C A T A A C C T C C A C A C T T A T C A C A T A C C T T C T A A T C T T A T T A G G C G T A G C A T T C T T T A C C C T T C T T G A A C G C A A A G C T T T A G G G T A C T T T C A A A T C C G A A A A G G C C C A A A C A A A G T T G G A A T T A T A G G A A T C C C A C A A C C A C T A G C A G A C G C C C T A A A A C T T T T T G T G A A A G A A T G A G T A A T G C C C A C A T C T T C A A A C T A C T T A C C A T T T A T T T T A A C C C C A A C A A T C A T A T T A A T T T T A G C A C T T A G A C T A T G A C A A C T A T T T C C A T C C T T T A T A C T C T C A T T T C A A A T A G C C C T A G G A A T A C T C T T A T T C T T A T G T A T T T C T T C C T T A A C C G T C T A T A C A A C C T T A A T A G C A G G T T G G G C C T C A A A C T C G A A G T A T G C T C T A C T A G G G G C C A T T C G A G C C A T G G C C C A A A C C A T C T C A T A T G A G G T A A C A A T A A C A C T A A T T A T C A T C T T C T A C C T A T T C T T A A T T A T A C A A A T A G A C A T A G T A A C A A T C C G C T C A G T T A A C A C C T C T A T A C C A A C C T T T G C C C T C T C C G C A C C A T T A G C T A T T A T A T G G A C T G T T G T C A T C T T A G C A G A A A C A A A C C G A G C C C C A T T T G A C T T T\n\n \n\nc2nprbcy   1 A A T C A T C C C C C A C A T A A C C T C C A C A C T T A T C A C A T A C C T T C T A A T C T T A T T A G G C G T A G C A T T C T T T A C C C T T C T T G A A C G C A A A G C T T T A G G G T A C T T T C A A A T C C G A A A A G G C C C A A A C A A A G T T G G A A T T A T A G G A A T C C C A C A A C C A C T A G C A G A C G C C C T A A A A C T T T T T G T G A A A G A A T G A G T A A T G C C C A C A T C T T C A A A C T A C T T A C C A T T T A T T T T A A C C C C A A C A A T C A T A T T A A T T T T A G C A C T T A G A C T A T G A C A A C T A T T T C C A T C C T T T A T A C T C T C A T T T C A A A T A G C C C T A G G A A T A C T C T T A T T C T T A T G T A T T T C T T C C T T A A C C G T C T A T A C A A C C T T A A T A G C A G G T T G G G C C T C A A A C T C G A A G T A T G C T C T A C T A G G G G C C A T T C G A G C C A T G G C C C A A A C C A T C T C A T A T G A G G T A A C A A T A A C A C T A A T T A T C A T C T T C T A C C T A T T C T T A A T T A T A C A A A T A G A C A T A G T A A C A A T C C G C T C A G T T A A C A C C T C T A T A C C A A C C T T T G C C C T C T C C G C A C C A T T A G C T A T T A T A T G A A C T G T T G T T A T C T T A G C A G A A A C A A A C C G A G C C C C A T T T G A C T T T\n\nI hope this post was helpful to you! If you have any questions, suggestions, or feedback, send me an email!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bruno Mioto",
    "section": "",
    "text": "Hello, this is my personal website!\nI’m a Biologist with PhD in Ecology, Data Analyst and DataViz Specialist! Here you’ll find pages about the Charts and R packages I made and some info about me.\nMy Portfolio contains a summary of everything I’ve done!\nTake a look at my posts below!"
  },
  {
    "objectID": "index.html#posts-in-english",
    "href": "index.html#posts-in-english",
    "title": "Bruno Mioto",
    "section": "Posts in English",
    "text": "Posts in English\n\n\n\n\n\n\n\n\n\n\nFacilitating the Creation of Arlequin (.arp) Files with R\n\n\n\n\n\n\ngenetics\n\n\npackages\n\n\n\n\n\n\nMar 10, 2025\n\n\nBruno Mioto\n\n\n10 min\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2 101\n\n\n\n\n\n\nggplot2\n\n\ndataviz\n\n\n\n\n\n\nFeb 27, 2024\n\n\nBruno Mioto\n\n\n16 min\n\n\n\n\n\n\n\n\n\n\n\n\nDrawing waterlines with ggplot2 in R\n\n\n\n\n\n\nggplot2\n\n\ndataviz\n\n\nmaps\n\n\n\n\n\n\nFeb 1, 2023\n\n\nBruno Mioto\n\n\n5 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#posts-em-português",
    "href": "index.html#posts-em-português",
    "title": "Bruno Mioto",
    "section": "Posts em Português",
    "text": "Posts em Português\n\n\n\n\n\n\n\n\n\n\nFacilitando a criação de arquivos Arlequin (.arp) com R\n\n\n\n\n\n\ngenetics\n\n\npackages\n\n\n\n\n\n\nMar 10, 2025\n\n\nBruno Mioto\n\n\n10 min\n\n\n\n\n\n\n\n\n\n\n\n\nA regionalização dos Vereadores eleitos em Maringá\n\n\n\n\n\n\nggplot2\n\n\ndataviz\n\n\npolítica\n\n\n\n\n\n\nOct 16, 2024\n\n\nBruno Mioto\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nHomens têm mais apendicite?\n\n\n\n\n\n\nggplot2\n\n\ndataviz\n\n\nsaúde\n\n\n\n\n\n\nMar 21, 2024\n\n\nBruno Mioto\n\n\n2 min\n\n\n\n\n\n\n\n\n\n\n\n\nIntrodução ao ggplot2\n\n\n\n\n\n\nggplot2\n\n\ndataviz\n\n\n\n\n\n\nJan 30, 2024\n\n\nBruno Mioto\n\n\n16 min\n\n\n\n\n\n\n\n\n\n\n\n\nMapeando as árvores de Maringá-PR\n\n\n\n\n\n\nggplot2\n\n\ndataviz\n\n\nmaps\n\n\n\n\n\n\nDec 5, 2023\n\n\nBruno Mioto\n\n\n15 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#decifrando-gráficos",
    "href": "index.html#decifrando-gráficos",
    "title": "Bruno Mioto",
    "section": "Decifrando Gráficos",
    "text": "Decifrando Gráficos\n\n\n\n\n\n\n\n\n\n\nDecifrando gráficos #2\n\n\n\n\n\n\ntutorial\n\n\ndataviz\n\n\nggplot2\n\n\n\n\n\n\nApr 14, 2025\n\n\nBruno Mioto\n\n\n17 min\n\n\n\n\n\n\n\n\n\n\n\n\nDecifrando gráficos #1\n\n\n\n\n\n\ntutorial\n\n\ndataviz\n\n\nggplot2\n\n\n\n\n\n\nMar 17, 2025\n\n\nBruno Mioto\n\n\n14 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "charts.html",
    "href": "charts.html",
    "title": "Charts",
    "section": "",
    "text": "I make original charts on demand for presentations/scientific articles/publications\nI work as a freelancer here: Upwork (Top Rated Freelancer)\nMy contact email address is bhmstabile@gmail.com\nWant to support my work? 🥧 Buy me a Pie chart"
  },
  {
    "objectID": "charts.html#collaborations",
    "href": "charts.html#collaborations",
    "title": "Charts",
    "section": "Collaborations",
    "text": "Collaborations"
  },
  {
    "objectID": "charts.html#published-charts",
    "href": "charts.html#published-charts",
    "title": "Charts",
    "section": "Published charts",
    "text": "Published charts\nThese are some charts published in scientific papers.\n\n\n\nKieling et al. (2024) - Worldwide Prevalence and Disability From Mental Disorders Across Childhood and Adolescence Evidence From the Global Burden of Disease Study\n\n\n\n\n\nMartins et al. (2024) - Iterative taxonomy reveals a new species of Cambeva (Siluriformes: Trichomycteridae) with intraspecific variation from the rio Piquiri and Ivaí basin, upper rio Paraná basin, Brazil"
  },
  {
    "objectID": "charts.html#original-charts",
    "href": "charts.html#original-charts",
    "title": "Charts",
    "section": "Original charts",
    "text": "Original charts\nAll the following charts and maps were made entirely using ggplot2/R.You can click on each plot to see each detail.\n\n\n\n\nPlay animation made for BigDataBowl ’24 Competition\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\nI wrote a text for basedosdados with a tutorial on how I made this chart of the vaccinated population using R! Check it out here!\n\n\nI also published a chart together with Nexo Jornal about inflation and unemployment in Brazil, updating a very interesting chart! Check it out here!\n\n\nI made this animation for the BigDataBowl ’24 Competition. You can see my team’s notebook at Kaggle"
  },
  {
    "objectID": "about-en.html",
    "href": "about-en.html",
    "title": "About me",
    "section": "",
    "text": "English  Português\nHi, my name is Bruno Mioto, I’m a biologist, currently doing my PhD in Ecology of Inland Water Ecosystems (PEA-UEM) and I study fish phylogeography!\nI have experience with data analysis and chart creation, I love to create new R packages and work as a data visualization freelancer!\nSee my freelance profile here: Upwork\nAnd my portfolio here: Behance\nI always seek to bring the right information in a simpler way to society."
  },
  {
    "objectID": "about-en.html#education",
    "href": "about-en.html#education",
    "title": "About me",
    "section": "Education",
    "text": "Education\nGraduate Program in Ecology of Inland Water Ecosystems (PEA-UEM) | Maringá - PRPhD | 2021 - Present\nGraduate Program in Ecology of Inland Water Ecosystems (PEA-UEM) | Maringá - PRMaster’s Program | 2019 - 2021\nState University of Maringá (UEM) | Maringá - PRUndergraduate | 2015 - 2019"
  },
  {
    "objectID": "about-en.html#experience",
    "href": "about-en.html#experience",
    "title": "About me",
    "section": "Experience",
    "text": "Experience\nNupgen (DBC/Nupélia UEM) - Molecular Genetics LabPhD student | 2018 - Present\nGalápagos - Charts and MapsDirector of Graphics | 2022 - Present\nUpworkTop Rated Freelancer | 2022 - Present\nRenovação Preparatory SchoolVolunteer Teacher - Biology | 2019 - Present"
  },
  {
    "objectID": "about-en.html#published-papers",
    "href": "about-en.html#published-papers",
    "title": "About me",
    "section": "Published papers",
    "text": "Published papers\nRecent dispersion routes between freshwater ecoregions evidence headwater captures in southern Brazil: a case study using cryptic species of the neotropical freshwater fish genus Cambeva (Siluriformes: Trichomycteridae) - 2024\nRenan Borges dos Reis, Bruno Henrique Mioto Stabile, Augusto Frota, Juliano Ferrer, Alessandra Valéria de Oliveira, Weferson Júnio da Graça\nMorphology and molecular evidence of a new species of Characidium (Characiformes: Crenuchidae) from the edges of a protected area at Rio Itararé, upper Rio Paraná, southern Brazil - 2024\nBruno Henrique Mioto Stabile, Renan Borges dos Reis, Augusto Frota, Weferson Júnio da Graça, Alessandra Valéria de Oliveira\nOrnamental fish mortality reveals an old parasite introduction: A case study of Koi carp and fish louse - 2024\nJoão Otávio Santos Silva, Bruno Henrique Mioto Stabile, Rodrigo Junio da Graça, Alessandra Valéria Oliveira, Ricardo Massato Takemoto\nIterative taxonomy reveals a new species of Cambeva (Siluriformes: Trichomycteridae) with intraspecific variation from the rio Piquiri and Ivaí basin, upper rio Paraná basin, Brazil - 2024\nIsadora Carolina Martins, Renan Borges dos Reis, Bruno Henrique Mioto Stabile, Weferson Júnio da Graça\nThe first record of Centrocestus formosanus (Trematoda: Heterophyidae) in southern Brazil supported by molecular data - 2021\nJuliana Rosa Matias Ciccheto, Bruno Henrique Mioto Stabile, Thomaz Mansini Carrenho Fabrin, Alessandra Valéria de Oliveira, Ricardo Massato Takemoto, Rodrigo Junio da Graça\nMolecular evidence of new freshwater turtle blood flukes (Digenea: Spirorchiidae) in the intermediate snail host Biomphalaria occidentalis Paraense, 1981 in an urban aquatic ecosystem in Brazil - 2021\nJuliana Rosa Matias Ciccheto, Bruno Henrique Mioto Stabile, Fábio Fermino, Thomaz Mansini Carrenho Fabrin, Alessandra Valéria de Oliveira, Ricardo Massato Takemoto, Rodrigo Junio da Graça\nCyanobacteria in an urban lake: hidden diversity revealed by metabarcoding - 2020\nThomaz Mansini Carrenho Fabrin, Bruno Henrique Mioto Stabile, Matheus Vieira da Silva, Susicley Jati, Liliana Rodrigues, Alessandra Valéria de Oliveira\nDivulgação da ciência desde a sala de aula - 2020\nYasmin Rodrigues de Souza, Carolina Pedrozo do Nascimento, Melissa Progênio da Silva, Gabriela Cassia Zanon Reinas, Edilaine Corrêa Leite, João Otávio Santos Silva, Bárbara Scorsim Arjona, Rejane Guimarães Melo, Bruno Henrique Mioto Stabile, Hugo Lima Kirsten, Renan Borges dos Reis, Matheus Henrique Ferreira Aleixo, Larissa Carrara Gonçalves, Fernanda Moreira Florêncio, Aline Favaro Mendes, Alessandra Barbosa da Silva, Alfonso Pineda, Luzia Cleide Rodrigues"
  },
  {
    "objectID": "about-pt.html",
    "href": "about-pt.html",
    "title": "Sobre mim",
    "section": "",
    "text": "English  Português\nOi! Me chamo Bruno Mioto, sou biólogo, atualmente faço doutorado em Ecologia de Ambientes Aquáticos Continentais (PEA-UEM) e estudo filogeografia de peixes!\nTenho experiência com análise de dados e criação de gráficos, amo criar novos pacotes em R e trabalho como freelancer de visualização de dados!\nVeja meu perfil de freelas aqui: Upwork\nE meu portifólio aqui: Behance\nSempre busco levar a informação correta de forma mais simples à sociedade."
  },
  {
    "objectID": "about-pt.html#educação",
    "href": "about-pt.html#educação",
    "title": "Sobre mim",
    "section": "Educação",
    "text": "Educação\nPrograma de Ecologia em Ambientes Aquáticos Continentais (PEA-UEM) | Maringá - PR Doutorado | 2021 - Presente\nPrograma de Ecologia em Ambientes Aquáticos Continentais (PEA-UEM) | Maringá - PR Mestrado | 2019 - 2021\nUniversidade Estadual de Maringá (UEM) | Maringá - PR Licenciatura | 2015 - 2019"
  },
  {
    "objectID": "about-pt.html#experiência",
    "href": "about-pt.html#experiência",
    "title": "Sobre mim",
    "section": "Experiência",
    "text": "Experiência\nNupgen (DBC/Nupélia UEM) - Laboratório de Genética MolecularAluno de doutorado | 2018 - Present\nGalápagos - Gráficos e Mapas Diretor de Gráficos | 2022 - Presente\nUpwork Freelancer | 2022 - Presente\nCursinho Voluntário Renovação Professor Voluntário - Biologia | 2019 - Presente"
  },
  {
    "objectID": "about-pt.html#artigos-publicados",
    "href": "about-pt.html#artigos-publicados",
    "title": "Sobre mim",
    "section": "Artigos publicados",
    "text": "Artigos publicados\nRecent dispersion routes between freshwater ecoregions evidence headwater captures in southern Brazil: a case study using cryptic species of the neotropical freshwater fish genus Cambeva (Siluriformes: Trichomycteridae) - 2024\nRenan Borges dos Reis, Bruno Henrique Mioto Stabile, Augusto Frota, Juliano Ferrer, Alessandra Valéria de Oliveira, Weferson Júnio da Graça\nMorphology and molecular evidence of a new species of Characidium (Characiformes: Crenuchidae) from the edges of a protected area at Rio Itararé, upper Rio Paraná, southern Brazil - 2024\nBruno Henrique Mioto Stabile, Renan Borges dos Reis, Augusto Frota, Weferson Júnio da Graça, Alessandra Valéria de Oliveira\nOrnamental fish mortality reveals an old parasite introduction: A case study of Koi carp and fish louse - 2024\nJoão Otávio Santos Silva, Bruno Henrique Mioto Stabile, Rodrigo Junio da Graça, Alessandra Valéria Oliveira, Ricardo Massato Takemoto\nIterative taxonomy reveals a new species of Cambeva (Siluriformes: Trichomycteridae) with intraspecific variation from the rio Piquiri and Ivaí basin, upper rio Paraná basin, Brazil - 2024\nIsadora Carolina Martins, Renan Borges dos Reis, Bruno Henrique Mioto Stabile, Weferson Júnio da Graça\nThe first record of Centrocestus formosanus (Trematoda: Heterophyidae) in southern Brazil supported by molecular data - 2021\nJuliana Rosa Matias Ciccheto, Bruno Henrique Mioto Stabile, Thomaz Mansini Carrenho Fabrin, Alessandra Valéria de Oliveira, Ricardo Massato Takemoto, Rodrigo Junio da Graça\nMolecular evidence of new freshwater turtle blood flukes (Digenea: Spirorchiidae) in the intermediate snail host Biomphalaria occidentalis Paraense, 1981 in an urban aquatic ecosystem in Brazil - 2021\nJuliana Rosa Matias Ciccheto, Bruno Henrique Mioto Stabile, Fábio Fermino, Thomaz Mansini Carrenho Fabrin, Alessandra Valéria de Oliveira, Ricardo Massato Takemoto, Rodrigo Junio da Graça\nCyanobacteria in an urban lake: hidden diversity revealed by metabarcoding - 2020\nThomaz Mansini Carrenho Fabrin, Bruno Henrique Mioto Stabile, Matheus Vieira da Silva, Susicley Jati, Liliana Rodrigues, Alessandra Valéria de Oliveira\nDivulgação da ciência desde a sala de aula - 2020\nYasmin Rodrigues de Souza, Carolina Pedrozo do Nascimento, Melissa Progênio da Silva, Gabriela Cassia Zanon Reinas, Edilaine Corrêa Leite, João Otávio Santos Silva, Bárbara Scorsim Arjona, Rejane Guimarães Melo, Bruno Henrique Mioto Stabile, Hugo Lima Kirsten, Renan Borges dos Reis, Matheus Henrique Ferreira Aleixo, Larissa Carrara Gonçalves, Fernanda Moreira Florêncio, Aline Favaro Mendes, Alessandra Barbosa da Silva, Alfonso Pineda, Luzia Cleide Rodrigues"
  },
  {
    "objectID": "hexout.html",
    "href": "hexout.html",
    "title": "Bruno Mioto",
    "section": "",
    "text": "Warning: package 'htmltools' was built under R version 4.3.3\n\n\n\n\n\n\n  \n    \n  \n  \n    created with hexsession"
  },
  {
    "objectID": "intro-ggplot2.html",
    "href": "intro-ggplot2.html",
    "title": "Introdução ao ggplot2",
    "section": "",
    "text": "Nessa aula vamos utilizar os seguintes pacotes:\n\ndplyr para manipulação de dados\nggplot2 para criar gráficos\nggpath para plotar imagens de uma forma bem mais fácil\npokemon para obter a tabela de pokemons em pt-br\n\nPara instalar os pacotes, utilizamos o seguinte script:\n\ninstall.packages(c(\"dplyr\", \"ggplot2\", \n                   \"ggpath\", \"pokemon\"))\n\nAgora que temos os pacotes instalados, é só carregá-los.\n\nlibrary(dplyr)\nlibrary(pokemon)\nlibrary(ggplot2)\nlibrary(ggpath)"
  },
  {
    "objectID": "intro-ggplot2.html#pacotes-utilizados",
    "href": "intro-ggplot2.html#pacotes-utilizados",
    "title": "Introdução ao ggplot2",
    "section": "",
    "text": "Nessa aula vamos utilizar os seguintes pacotes:\n\ndplyr para manipulação de dados\nggplot2 para criar gráficos\nggpath para plotar imagens de uma forma bem mais fácil\npokemon para obter a tabela de pokemons em pt-br\n\nPara instalar os pacotes, utilizamos o seguinte script:\n\ninstall.packages(c(\"dplyr\", \"ggplot2\", \n                   \"ggpath\", \"pokemon\"))\n\nAgora que temos os pacotes instalados, é só carregá-los.\n\nlibrary(dplyr)\nlibrary(pokemon)\nlibrary(ggplot2)\nlibrary(ggpath)"
  },
  {
    "objectID": "intro-ggplot2.html#os-dados",
    "href": "intro-ggplot2.html#os-dados",
    "title": "Introdução ao ggplot2",
    "section": "Os dados",
    "text": "Os dados\nPara criar nossos gráficos, precisamos de um conjunto de dados.\n\npokemon_df &lt;- pokemon::pokemon_ptbr"
  },
  {
    "objectID": "intro-ggplot2.html#gráficos",
    "href": "intro-ggplot2.html#gráficos",
    "title": "Introdução ao ggplot2",
    "section": "Gráficos",
    "text": "Gráficos"
  },
  {
    "objectID": "intro-ggplot2.html#gráficos-com-r-base",
    "href": "intro-ggplot2.html#gráficos-com-r-base",
    "title": "Introdução ao ggplot2",
    "section": "Gráficos com R base",
    "text": "Gráficos com R base\nPodemos criar gráficos com o R base, que é bem simples mas permite visualizações rápidas.\nPodemos criar gráficos de dispersão\n\nplot(altura ~ peso, data = pokemon_df)\n\n\n\n\n\n\n\nO problema começa quando queremos deixar esses gráficos mais bonitos\n\nplot(altura ~ peso, data = pokemon_df,\n     main = \"Título\",\n     xlab = \"Massa (kg)\", ylab = \"Altura (m)\",\n     pch = 19, frame = FALSE)\nabline(lm(altura ~ peso, data = pokemon_df), col = \"blue\")\n\n\n\n\n\n\n\nIsso é confuso e eu acho muito difícil de deixar qualquer gráfico assim mais bonito."
  },
  {
    "objectID": "intro-ggplot2.html#gráficos-com-ggplot2",
    "href": "intro-ggplot2.html#gráficos-com-ggplot2",
    "title": "Introdução ao ggplot2",
    "section": "Gráficos com ggplot2",
    "text": "Gráficos com ggplot2\nMas agora vamos conhecer o pacote ggplot2. Esse pacote foi a tese do Hadley Wickham, atual cientista-chefe da RStudio/Posit.\nA mágica aqui é que esse pacote incorporou a gramática de gráficos (por isso o gg), que trouxe vários fundamentos a serem seguidos. Um deles é a criação de gráficos por camadas, como se fosse uma pintura!\n{width = 50%}\nEsse pacote já está incluso no tidyverse e segue o mesmo princípio.\n\nlibrary(ggplot2)\n\nSe rodarmos só um ggplot(), teremos uma tela em branco.\n\nggplot()\n\n\n\n\n\n\n\nAgora temos que adicionar o nosso dataset e quais serão nossos eixos.\nSempre que estivermos falando de uma variável do nosso dataset, temos que colocar dentro do argumento aes(), que significa aesthetics.\n\nggplot(data = pokemon_df,\n       aes(x = peso,\n           y = altura))\n\n\n\n\n\n\n\nInclusive, como o ggplot2 funciona em camadas, podemos usar da seguinte forma:\n\nggplot(data = pokemon_df)+\n  aes(x = peso,\n      y = altura)\n\n\n\n\n\n\n\nComo o ggplot2 faz parte do tidyverse, podemos falar para o R no imperativo: “Pegue o dataset pokemon_df e então crie o ggplot…”. O bom dessa abordagem é que, como o ggplot já sabe o dataset de antemão, ele nos ajuda a selecionar as variáveis (aperte tab antes de escrever as variáveis).\n\npokemon_df %&gt;% \n  ggplot(aes(x = peso,\n             y = altura))\n\n\n\n\n\n\n\nAgora temos nosso gráfico com os eixos delimitados, e podemos adicionar as camadas que quisermos. O princípio do ggplot é parecido com o pipe, onde as informações são passadas diretamente para a camada abaixo, assim não precisamos adicionar os dados novamente.\nGeometrias\nAs geometrias são funções que começam por geom_*. Existem muitas e podemos ter uma ajudinha com a colinha do ggplot2.\nPrimeiro, vamos criar um gráfico de dispersão\n\npokemon_df %&gt;% \n  ggplot(aes(x = peso,\n             y = altura))+\n  geom_point()\n\n\n\n\n\n\n\nPara adicionar mais uma camada de geometria, é só adicionar mais uma camada nessa pintura. Vamos adicionar uma linha de tendência com a função geom_smooth().\n\npokemon_df %&gt;% \n  ggplot(aes(x = peso,\n             y = altura))+\n  geom_point()+\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n#podemos adicionar uma linha de tendência linear com o method = \"lm\"\n\nAqui podemos perceber como o ggplot2 funciona igual a uma pintura. Como o geom_smooth() foi chamado depois do geom_point(), ele é plotado por cima.\nVamos ver o mesmo exemplo mas invertendo essas geometrias.\n\npokemon_df %&gt;% \n  ggplot(aes(x = peso,\n             y = altura))+\n  geom_smooth()+\n  geom_point()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n#podemos adicionar uma linha de tendência linear com o method = \"lm\"\n\nVamos fazer um boxplot (utilizando a geometria geom_boxplot) do tipo do pokemon por altura\n\npokemon_df %&gt;% \n  ggplot(aes(x = tipo_1, y = peso))+\n  geom_boxplot()\n\n\n\n\n\n\n\nAgora vamos fazer um gráfico de colunas (utilizando a geometria geom_col() do peso dos pokemons.\n\npokemon_df %&gt;% \n  ggplot(aes(x = pokemon, y = peso))+\n  geom_col()\n\n\n\n\n\n\n\nMas nós temos muitos dados, vamos selecionar só alguns para plotar.\n\niniciais &lt;- pokemon_df %&gt;% \n  filter(id %in% 1:9)\n\nVamos testar!\n\niniciais %&gt;% \n  ggplot(aes(x = pokemon, y = ataque))+\n  geom_col()\n\n\n\n\n\n\n\nPodemos inverter os eixos, é só mudar. Inclusive com textos grandes, é mais indicado eles ficarem no eixo y.\n\niniciais %&gt;% \n  ggplot(aes(x = ataque, y = pokemon))+\n  geom_col()\n\n\n\n\n\n\n\nOs pokemons não estão na ordem que gostaríamos (como no dataset), estão em ordem alfabética. Então temos que ordená-los pela id, mas para serem ordenados precisamos considerá-los como fatores.\n\niniciais2 &lt;- iniciais %&gt;% \n  mutate(pokemon = reorder(pokemon, id))\n\nVamos ver se funcionou usando a função glimpse() (significa espiadinha do dplyr). Perceba a classe de cada variável entre &lt;...&gt;\n\nglimpse(iniciais2)\n\nRows: 9\nColumns: 22\n$ id              &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9\n$ pokemon         &lt;fct&gt; bulbasaur, ivysaur, venusaur, charmander, charmeleon, …\n$ id_especie      &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9\n$ altura          &lt;dbl&gt; 0.07, 0.10, 0.20, 0.06, 0.11, 0.17, 0.05, 0.10, 0.16\n$ peso            &lt;dbl&gt; 0.69, 1.30, 10.00, 0.85, 1.90, 9.05, 0.90, 2.25, 8.55\n$ exp_base        &lt;dbl&gt; 64, 142, 236, 62, 142, 240, 63, 142, 239\n$ tipo_1          &lt;chr&gt; \"grama\", \"grama\", \"grama\", \"fogo\", \"fogo\", \"fogo\", \"ág…\n$ tipo_2          &lt;chr&gt; \"venenoso\", \"venenoso\", \"venenoso\", NA, NA, \"voador\", …\n$ hp              &lt;dbl&gt; 45, 60, 80, 39, 58, 78, 44, 59, 79\n$ ataque          &lt;dbl&gt; 49, 62, 82, 52, 64, 84, 48, 63, 83\n$ defesa          &lt;dbl&gt; 49, 63, 83, 43, 58, 78, 65, 80, 100\n$ ataque_especial &lt;dbl&gt; 65, 80, 100, 60, 80, 109, 50, 65, 85\n$ defesa_especial &lt;dbl&gt; 65, 80, 100, 50, 65, 85, 64, 80, 105\n$ velocidade      &lt;dbl&gt; 45, 60, 80, 65, 80, 100, 43, 58, 78\n$ cor_1           &lt;chr&gt; \"#78C850\", \"#78C850\", \"#78C850\", \"#F08030\", \"#F08030\",…\n$ cor_2           &lt;chr&gt; \"#A040A0\", \"#A040A0\", \"#A040A0\", NA, NA, \"#A890F0\", NA…\n$ cor_final       &lt;chr&gt; \"#81A763\", \"#81A763\", \"#81A763\", NA, NA, \"#DE835E\", NA…\n$ grupo_ovo_1     &lt;chr&gt; \"monster\", \"monster\", \"monster\", \"monster\", \"monster\",…\n$ grupo_ovo_2     &lt;chr&gt; \"plant\", \"plant\", \"plant\", \"dragon\", \"dragon\", \"dragon…\n$ url_icone       &lt;chr&gt; \"//archives.bulbagarden.net/media/upload/7/7b/001MS6.p…\n$ url_imagem      &lt;chr&gt; \"https://raw.githubusercontent.com/HybridShivam/Pokemo…\n$ id_geracao      &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1\n\n\nOlha como ficou ordenado agora!\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon))+\n  geom_col()\n\n\n\n\n\n\n\nEstão faltando cores nesses gráficos!\nAgora vamos utilizar os argumentos color e fill. Quando a forma for sólida, utilizamos apenas o color, se tiver contorno e preenchimento, utilizamos o colore fill, respectivamente.\nPodemos colorir de acordo com qualquer variável, nesse caso vamos colorir por tipo!\nVeja que podemos determinar a variável na função ggplot() e ela servirá para todas as seguintes. Se quisermos aplicar a uma camada apenas, colocamos apenas nela.\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col()\n\n\n\n\n\n\n\nAgora podemos adicionar o contorno. Como ele não é uma variável (é uma cor fixa), não precisa ir dentro do aes()\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")\n\n\n\n\n\n\n\nLabels\nTodo gráfico pode ter título, subtítulo, titulo dos eixos, etc.\nTudo isso pode ser determinado utilizando a função labs() dentro do ggplot. Perceba que a legenda é criada de acordo com a variável fill, por isso o título da legenda seguirá essa variável.\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  labs(\n    title = \"Os pokemons iniciais\",\n    subtitle = \"Separados por tipo\",\n    caption = \"Bruno Mioto\",\n    x = \"Ataque\",\n    y = \"Pokemon\",\n    fill = \"Tipo\"\n  )\n\n\n\n\n\n\n\nEscalas\nE se quisermos editar as escalas? Nesse caso vamos utilizar o conjunto de funções scale_*.\nVamos editar o eixo X. As quebras estão de 20 em 20, vamos colocar de 10 em 10. Como o eixo x é contínuo, vamos usar a função scale_x_continuous(). O argumento breaks nos ajuda com essa tarefa!\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_x_continuous(breaks = seq(0,200,10))\n\n\n\n\n\n\n\nAs cores também podem ser definidas pela função scale_*. Essas cores não são exatamente as que queremos, podemos definir manualmente usando a função scale_fill_manual().\nComo as cores estão definidas de acordo com o tipo, vamos usar elas como base. O próprio dataset traz as cores para cada tipo. Para o tipo fogo usaremos a cor #F08030◉, para o tipo grama usaremos a cor #78C850◉ e para o tipo água usaremos a cor #6890F0◉.\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\",\n      \"água\" = \"#6890F0\"\n    )\n  )\n\n\n\n\n\n\n\nAlém de determinar as cores, também podemos determinar as labels que cada cor terá na legenda. Vamos fazer isso dentro da função scale também, mas com o argumento labels.\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\",\n      \"água\" = \"#6890F0\"\n    ),\n    labels = c(\n      \"fogo\" = \"Fogo\",\n      \"grama\" = \"Grama\",\n      \"água\" = \"Água\"\n    )\n  )\n\n\n\n\n\n\n\nTemas\nMas esses gráficos não estão tão bonitos ainda, podemos editar qualquer coisa dos gráficos, desde a cor do fundo até a fonte.\nO ggplot2 já tem alguns temas pré definidos. Vamos testar\nEssa é a theme_bw()\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\",\n      \"água\" = \"#6890F0\"\n    )\n  )+\n  theme_bw()\n\n\n\n\n\n\n\nEu gosto bastante da theme_classic()\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\",\n      \"água\" = \"#6890F0\"\n    )\n  )+\n  theme_classic()\n\n\n\n\n\n\n\nO theme_minimal() também é muito utilizado.\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n     \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\",\n      \"água\" = \"#6890F0\"\n    )\n  )+\n  theme_minimal()\n\n\n\n\n\n\n\nO tema theme_void() mantém apenas as geometrias do gráfico gerado.\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n     \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\",\n      \"água\" = \"#6890F0\"\n    )\n  )+\n  theme_void()\n\n\n\n\n\n\n\nMas podemos editar qualquer coisa dentro do tema escolhido também. Essas funções são apenas configuração pré-determinadas.\nA maioria das configurações podem ser vistas neste site. Para mudar as configurações do tema, adicionamos os argumentos na função theme()\nVamos eliminar o nome dos eixos\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\",\n      \"água\" = \"#6890F0\"\n    )\n  )+\n  theme(\n    axis.title = element_blank()\n  )\n\n\n\n\n\n\n\nOu mudar o fundo do gráfico. Perceba que temos plot (o gráfico total) e panel (apenas o painel entre os eixos)\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n     \"fogo\" = \"#F08030\",\n     \"grama\" = \"#78C850\",\n     \"água\" = \"#6890F0\"\n    )\n  )+\n  theme(\n    plot.background = element_rect(fill = \"pink\"),\n    panel.background = element_rect(fill = \"yellow\")\n  )\n\n\n\n\n\n\n\nVamos mudar as linhas de grade!\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\",\n      \"água\" = \"#6890F0\"\n    )\n  )+\n  theme(\n    plot.background = element_rect(fill = \"pink\"),\n    panel.background = element_rect(fill = \"yellow\",\n                                    color = \"blue\"),\n    panel.grid.major = element_line(color = \"green\"),\n    panel.grid.major.x = element_line(linetype = \"dashed\"),\n    panel.grid.minor.x = element_line(color = \"black\")\n  )\n\n\n\n\n\n\n\nMeu Deus! O gráfico não ficou bonito, mas ficou didático! (Mas nunca faça algo assim de verdade, por favor)"
  },
  {
    "objectID": "intro-ggplot2.html#facetas",
    "href": "intro-ggplot2.html#facetas",
    "title": "Introdução ao ggplot2",
    "section": "Facetas",
    "text": "Facetas\nMuitas vezes temos muitas informações para mostrar em apenas um gráfico. Para isso podemos utilizar a ideia de pequenos múltiplos com a função facet_wrap()!\n\npokemon_df %&gt;% \n  ggplot(aes(x = ataque, \n             y = defesa, \n             color = id_geracao))+\n  geom_point()+\n  facet_wrap(.~id_geracao)\n\n\n\n\n\n\n\nNesse caso o ggplot interpretou a coluna id_geracao como numérica contínua. Mas nesse caso cada geração é independente de outra. Podemos dizer para o ggplot2 interpretas essa variável como fator.\n\npokemon_df %&gt;% \n  ggplot(aes(x = ataque, \n             y = defesa, \n             color = factor(id_geracao)))+\n  geom_point()+\n  facet_wrap(.~factor(id_geracao))\n\n\n\n\n\n\n\nPodemos usar as facetas com outros dados também.\n\npokemon_df %&gt;% \n  ggplot(aes(x = ataque, \n             y = defesa, \n             color = tipo_1))+\n  geom_point()+\n  facet_wrap(.~tipo_1)"
  },
  {
    "objectID": "intro-ggplot2.html#plotar-imagens",
    "href": "intro-ggplot2.html#plotar-imagens",
    "title": "Introdução ao ggplot2",
    "section": "Plotar imagens",
    "text": "Plotar imagens\nSe quisermos colocar figuras nos nosso gráficos, a melhor indicação é usar o pacote ggpath. Essa é melhor forma de plotar imagens!\nPara isso vamos utilizar a função geom_from_path(). Só precisamos informar qual é a coluna com o caminho para a figura.\nUma sugestão é colocar o argumento da largura width como 0.1 pois as figuras podem ficar gigantes!\n\nlibrary(ggpath)\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  geom_from_path(aes(path = url_imagem),\n                 width = 0.1)+\n  scale_fill_manual(\n    values = c(\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\",\n      \"água\" = \"#6890F0\"\n    )\n  )\n\n\n\n\n\n\n\nGráfico finalizado\nCom comentários!\n\niniciais2 %&gt;% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  #adiciona colunas\n  geom_col(color = \"black\",\n           width = 0.5)+\n  #adiciona nomes\n  geom_text(aes(label = pokemon,\n                color = tipo_1),\n            x = 1,\n            hjust = 0,\n            nudge_y = 0.45,\n            fontface = \"bold\")+\n  #adiciona figuras\n  geom_from_path(aes(path = url_imagem),\n                 width = 0.1,\n                 hjust = 0)+\n  #adiciona linha vertical\n  geom_vline(xintercept = 0)+\n  #expande eixo x\n  scale_x_continuous(\n    expand = expansion(mult = c(0,0.1))\n  )+\n  #edita cores (vai afetar o texto que usa color)\n  scale_color_manual(\n    values = c(\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\",\n      \"água\" = \"#6890F0\"\n    )\n  )+\n  #edita cores (vai afetar a coluna que usa fill)\n  scale_fill_manual(\n    values = c(\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\",\n      \"água\" = \"#6890F0\"\n    )\n  )+\n  #edita labs\n  labs(\n    x = \"Ataque\",\n    caption = \"Bruno Mioto - @BrunoHMioto\"\n  )+\n  #usa tema inicial\n  theme_classic()+\n  #edita tema\n  theme(\n    #remover toda a legenda\n    legend.position = \"none\",\n    #remove título do eixo y\n    axis.title.y = element_blank(),\n    #remove texto do eixo y\n    axis.text.y = element_blank(),\n    #remove ticks\n    axis.ticks = element_blank(),\n    #remove eixos\n    axis.line = element_blank(),\n    #adiciona linha de grade - major\n    panel.grid.major.x = element_line(),\n    #adiciona linha de grade pontilhada - minor\n    panel.grid.minor.x = element_line(linetype = \"dashed\"),\n    #aumenta as margens do gráfico\n    plot.margin = margin(10,10,10,10,\"pt\"),\n    #muda a cor do fundo do gráfico\n    plot.background = element_rect(fill = \"#f1f1f1\", color = NA),\n    #muda a cor do fundo do painel\n    panel.background = element_rect(fill = \"#f1f1f1\", color = NA),\n  )+\n  #não corta as imagens que saem do painel\n  coord_cartesian(\n    clip = \"off\"\n  )\n\n\n\n\n\n\n#salva o gráfico\n#ggsave(\"figures/grafico_final.png\", width = 8, height = 6)"
  },
  {
    "objectID": "posts/appendix/pt/index.html",
    "href": "posts/appendix/pt/index.html",
    "title": "Homens têm mais apendicite?",
    "section": "",
    "text": "Mês passado tive uma apendicite. Uma inflamação que apareceu de uma hora para outra (literalmente) e adiou todos meus planos e compromissos. O que me fez ter bastante tempo livre por uma semana. Com todo esse tempo longe do computador (seja por enjôo ou dor), não pude deixar de pensar nos dados por trás dessa condição…\nAntes de tudo, quanto a apendicite me fez parar quieto?\nMesmo que eu não seja o tipo de pessoa que anda muito no dia a dia, depois da cirurgia no dia 16… eu só fiquei deitado!\nSó fui me recuperar no dia 22, dia do retorno ao médico."
  },
  {
    "objectID": "posts/appendix/pt/index.html#homens-são-mais-propensos-a-ter-apendicite",
    "href": "posts/appendix/pt/index.html#homens-são-mais-propensos-a-ter-apendicite",
    "title": "Homens têm mais apendicite?",
    "section": "Homens são mais propensos a ter apendicite?",
    "text": "Homens são mais propensos a ter apendicite?\nMas eu ainda tinha uma dúvida comigo. Todas as outras pessoas que conheço que tiveram apendicite (4) são homens e jovens. A prevalência é maior em pessoas com esse perfil?\nPara responder essa dúvida eu preciso de todos os registros de cirurgias dos hospitais! Bom, mas nós temos o SUS!\nUtilizando o pacote {microdatasus} , consegui obter todos os dados de apendicite registrados no Paraná em 2023 e responder minha dúvida!\n\nRealmente, jovens do sexo masculino têm mais apendicite!\nMas será que jovens não tem mais apendicite apenas porque existem mais jovens do que idosos na população?\nPara isso utilizei os dados do Censo 2022 para calcular a proporção de casos de Apendicite de acordo com a população do Paraná.\n\nAgora podemos observar que a diferença não é tão grande entre as idades como visto anteriormente, mas o padrão de jovens do sexo masculino ainda se mantém!"
  },
  {
    "objectID": "posts/appendix/pt/index.html#por-que-homens-jovens-são-mais-propensos-à-apendicite",
    "href": "posts/appendix/pt/index.html#por-que-homens-jovens-são-mais-propensos-à-apendicite",
    "title": "Homens têm mais apendicite?",
    "section": "Por que homens jovens são mais propensos à apendicite?",
    "text": "Por que homens jovens são mais propensos à apendicite?\nE quais as explicações científicas de pessoas do sexo masculino terem mais apendicite?\nIsso vamos ter que deixar para um outro post…"
  },
  {
    "objectID": "posts/arlequin/pt/index.html#o-problema",
    "href": "posts/arlequin/pt/index.html#o-problema",
    "title": "Facilitando a criação de arquivos Arlequin (.arp) com R",
    "section": "O problema",
    "text": "O problema\nEste é um post bem específico, mas pode ser útil para quem realiza análises populacionais com dados genéticos. Então resolvi escrever um post simples para ajudar neste processo.\nDurante minha tese, precisei realizar análises populacionais (AMOVA, FST, etc), mas eu não sou muito dessa área, então nunca havia utilizado o software Arlequin, um software bem antigo (desde 1995) mas ainda muito utilizado para trabalhos científicos.\nO problema aparece quando precisamos criar um arquivo de entrada .arp para utilizar no Arlequin. Alguns programas (como o DNAsp) até salvam um arquivo .arp, mas ele não funciona muito bem e na maioria das vezes necessita de edição manual."
  },
  {
    "objectID": "posts/arlequin/pt/index.html#tutoriais",
    "href": "posts/arlequin/pt/index.html#tutoriais",
    "title": "Facilitando a criação de arquivos Arlequin (.arp) com R",
    "section": "Tutoriais",
    "text": "Tutoriais\nAo buscar por ajuda, cheguei até este tutorial completo da Natália E. de Lima.\nA Natália claramente entende mais deste assunto do que eu, então edita manualmente os arquivos de dados populacionais para utilizar no Arlequin.\n\nComo eu tenho mais facilidade com R do que genética de populações, busquei outros tutoriais, dessa vez usando o R, e cheguei neste vídeo do Josh Banta\n\nAqui ele ensina a transformar um arquivo FASTA em um arquivo .arp, mas também nos ajuda a adicionar grupamentos aos nossos dados. Tudo isso utilizando um script em R. Estes dados estão todos disponíveis no vídeo acima."
  },
  {
    "objectID": "posts/arlequin/pt/index.html#uma-abordagem-mais-simples",
    "href": "posts/arlequin/pt/index.html#uma-abordagem-mais-simples",
    "title": "Facilitando a criação de arquivos Arlequin (.arp) com R",
    "section": "Uma abordagem mais simples",
    "text": "Uma abordagem mais simples\nNo entanto o script para essa tarefa é bem confuso e pode ser desafiador para quem não é muito proficiente em R. CPensando nisso, e para facilitar o trabalho de colegas no futuro (e o meu também), adaptei este código para uma função simples em R, chamada create_arlequin().\nEsta função está disponível no pacote que fiz para meu laboratório, o Nupgen! Este é um pacote bem experimental e com funções extremamente específicas, então não se preocupe com essas outras.\nPara instalar o pacote é bem fácil, abra o R e rode\n\nif (!requireNamespace(\"remotes\", quietly = TRUE)){\n    install.packages(\"remotes\")\n  }\nremotes::install_github(\"brunomioto/nupgen\")\n\nPronto! Agora vamos criar o arquivo .arp que precisamos. Antes de tudo, vamos carregar os pacotes que precisamos. Utilizaremos o pacote ape para importar as sequências e o nupgen para criar o arquivo.\n\nlibrary(ape)\nlibrary(nupgen)\n\nAgora vamos carregar um alinhamento em FASTA e um arquivo de grupos. Utilizaremos aqui os arquivos de exemplo utilizados pelo Josh Banta no tutorial dele, mas você pode utilizar os seus também!\nO arquivo FASTA é um alinhamento comum, com as pontas cortadas em algum software tipo MEGA, mas que seguem essa estrutura:\n\n&gt;C1NFaBCy  \nAATCATCCCCCACATAACCTCCACACTTATCACATACCTTCTAATCTTATTAGGCGTAGC\nATTCTTTACCCTTCTTGAACGCAAAGCTTTAGGGTACTTTCAAATCCGAAAAGGCCCAAA\nCAAAGTTGGAATTATAGGAATCCCACAACCACTAGCAGACGCCCTAAAACTTTTTGTGAA\nAGAATGAGTAATGCCCACATCTTCAAACTACTTACCATTTATTTTAACCCCAACAATCAT\nATTAATTTTAGCACTTAGACTATGACAACTATTTCCATCCTTTATACTCTCATTTCAAAT\nAGCCCTAGGAATACTCTTATTCTTATGTATTTCTTCCTTAACCGTCTATACAACCTTAAT\nAGCAGGTTGGGCCTCAAACTCGAAGTATGCTCTACTAGGGGCCATTCGAGCCATGGCCCA\nAACCATCTCATATGAGGTAACAATAACACTAATTATCATCTTCTACCTATTCTTAATTAT\nACAAATAGACATAGTAACAATCCGCTCAGTTAACACCTCTATACCAACCTTTGCCCTCTC\nCGCACCATTAGCTATTATATGGACTGTTGTCATCTTAGCAGAAACAAACCGAGCCCCATT\nTGACTTT\n&gt;C2NPrBCy  \nAATCATCCCCCACATAACCTCCACACTTATCACATACCTTCTAATCTTATTAGGCGTAGC\nATTCTTTACCCTTCTTGAACGCAAAGCTTTAGGGTACTTTCAAATCCGAAAAGGCCCAAA\nCAAAGTTGGAATTATAGGAATCCCACAACCACTAGCAGACGCCCTAAAACTTTTTGTGAA\nAGAATGAGTAATGCCCACATCTTCAAACTACTTACCATTTATTTTAACCCCAACAATCAT\nATTAATTTTAGCACTTAGACTATGACAACTATTTCCATCCTTTATACTCTCATTTCAAAT\nAGCCCTAGGAATACTCTTATTCTTATGTATTTCTTCCTTAACCGTCTATACAACCTTAAT\nAGCAGGTTGGGCCTCAAACTCGAAGTATGCTCTACTAGGGGCCATTCGAGCCATGGCCCA\nAACCATCTCATATGAGGTAACAATAACACTAATTATCATCTTCTACCTATTCTTAATTAT\nACAAATAGACATAGTAACAATCCGCTCAGTTAACACCTCTATACCAACCTTTGCCCTCTC\nCGCACCATTAGCTATTATATGAACTGTTGTTATCTTAGCAGAAACAAACCGAGCCCCATT\nTGACTTT\n\nEnquanto isso, o arquivo de grupos é um arquivo .csv com duas colunas, group (com o nome dos grupos) e name (com nome das sequências), seguindo este exemplo:\n\ngroup,name\n1,C1NFaBCy  \n1,C2NPrBCy  \n1,C3NPrBCy  \n1,C4NPrBCy  \n1,C5NPrBCy  \n1,C6NPrBCy  \n1,C7NPrBCy  \n1,C8NPrBCy  \n1,C9NPrNec  \n2,C10NPrNec \n2,C11NPrNec \n2,C12NPrNec \n2,C13NPrNec \n3,C14NPrSab \n3,C15NPrSab \n\nCaso queira, você pode criar este arquivo usando o Excel e exportar em .csv, mas confira se o separador é vírgula (,) ao invés de ponto e vírgula (;)\nPerceba que meus arquivos estão dentro da pasta data, então coloco isso também no caminho do arquivo\n\nalinhamento &lt;- read.dna(\"data/arquivo_fasta.fas\", format = \"fasta\")\n\ngrupos &lt;- read.csv(\"data/arquivo_grupos.csv\")\n\nAgora que temos os arquivos carregados, é só rodar a função. Perceba que, além dos argumentos do alinhamento e grupos, temos um chamado output.dir, este argumento define qual diretório você deseja salvar o arquivo output.arp. O padrão é o diretório atual (“.”), mas aqui vou salvar na pasta data, junto com os outros arquivos.\n\nnupgen::create_arlequin(fasta = alinhamento, groups = grupos, output.dir = \"./data\")\n\nℹ Creating .arp file\n\n\nℹ Saving .arp file\n\n\nPronto! Agora você já tem um arquivo output.arp com os dados prontos para utilizar no Arlequin!\nVale a pena conferir se seus dados estão corretos, o arquivo tem mais ou menos essa cara aqui:\n\n[Profile] \n\n \n\nTitle=\"data\" \n\nNBSamples=14\n \n\nDataType=DNA \n\nGenotypicData=0 \n\nLocusSeparator=WHITESPACE \n\n \n\n[Data] \n\n[[Samples]] \n\n \n\nSampleName=\"1\"\n\nSampleSize=9\n\nSampleData={ \n\n \n\nc1nfabcy   1 A A T C A T C C C C C A C A T A A C C T C C A C A C T T A T C A C A T A C C T T C T A A T C T T A T T A G G C G T A G C A T T C T T T A C C C T T C T T G A A C G C A A A G C T T T A G G G T A C T T T C A A A T C C G A A A A G G C C C A A A C A A A G T T G G A A T T A T A G G A A T C C C A C A A C C A C T A G C A G A C G C C C T A A A A C T T T T T G T G A A A G A A T G A G T A A T G C C C A C A T C T T C A A A C T A C T T A C C A T T T A T T T T A A C C C C A A C A A T C A T A T T A A T T T T A G C A C T T A G A C T A T G A C A A C T A T T T C C A T C C T T T A T A C T C T C A T T T C A A A T A G C C C T A G G A A T A C T C T T A T T C T T A T G T A T T T C T T C C T T A A C C G T C T A T A C A A C C T T A A T A G C A G G T T G G G C C T C A A A C T C G A A G T A T G C T C T A C T A G G G G C C A T T C G A G C C A T G G C C C A A A C C A T C T C A T A T G A G G T A A C A A T A A C A C T A A T T A T C A T C T T C T A C C T A T T C T T A A T T A T A C A A A T A G A C A T A G T A A C A A T C C G C T C A G T T A A C A C C T C T A T A C C A A C C T T T G C C C T C T C C G C A C C A T T A G C T A T T A T A T G G A C T G T T G T C A T C T T A G C A G A A A C A A A C C G A G C C C C A T T T G A C T T T\n\n \n\nc2nprbcy   1 A A T C A T C C C C C A C A T A A C C T C C A C A C T T A T C A C A T A C C T T C T A A T C T T A T T A G G C G T A G C A T T C T T T A C C C T T C T T G A A C G C A A A G C T T T A G G G T A C T T T C A A A T C C G A A A A G G C C C A A A C A A A G T T G G A A T T A T A G G A A T C C C A C A A C C A C T A G C A G A C G C C C T A A A A C T T T T T G T G A A A G A A T G A G T A A T G C C C A C A T C T T C A A A C T A C T T A C C A T T T A T T T T A A C C C C A A C A A T C A T A T T A A T T T T A G C A C T T A G A C T A T G A C A A C T A T T T C C A T C C T T T A T A C T C T C A T T T C A A A T A G C C C T A G G A A T A C T C T T A T T C T T A T G T A T T T C T T C C T T A A C C G T C T A T A C A A C C T T A A T A G C A G G T T G G G C C T C A A A C T C G A A G T A T G C T C T A C T A G G G G C C A T T C G A G C C A T G G C C C A A A C C A T C T C A T A T G A G G T A A C A A T A A C A C T A A T T A T C A T C T T C T A C C T A T T C T T A A T T A T A C A A A T A G A C A T A G T A A C A A T C C G C T C A G T T A A C A C C T C T A T A C C A A C C T T T G C C C T C T C C G C A C C A T T A G C T A T T A T A T G A A C T G T T G T T A T C T T A G C A G A A A C A A A C C G A G C C C C A T T T G A C T T T\n\nEspero que este post tenha sido útil para você! Se tiver alguma dúvida, sugestão ou crítica, mande um e-mail!"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#akemi-nishimori",
    "href": "posts/eleicao_mga_2024/pt/index.html#akemi-nishimori",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Akemi Nishimori",
    "text": "Akemi Nishimori\n\n\n\nAkemi Nishimori"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#angelo-salgueiro",
    "href": "posts/eleicao_mga_2024/pt/index.html#angelo-salgueiro",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Angelo Salgueiro",
    "text": "Angelo Salgueiro\n\n\n\nAngelo Salgueiro"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#biazon",
    "href": "posts/eleicao_mga_2024/pt/index.html#biazon",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Biazon",
    "text": "Biazon\n\n\n\nBiazon"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#bravin",
    "href": "posts/eleicao_mga_2024/pt/index.html#bravin",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Bravin",
    "text": "Bravin\n\n\n\nBravin"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#cris-lauer",
    "href": "posts/eleicao_mga_2024/pt/index.html#cris-lauer",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Cris Lauer",
    "text": "Cris Lauer\n\n\n\nCris Lauer"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#daniel-malvezzi",
    "href": "posts/eleicao_mga_2024/pt/index.html#daniel-malvezzi",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Daniel Malvezzi",
    "text": "Daniel Malvezzi\n\n\n\nDaniel Malvezzi"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#delegado-luiz-alves",
    "href": "posts/eleicao_mga_2024/pt/index.html#delegado-luiz-alves",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Delegado Luiz Alves",
    "text": "Delegado Luiz Alves\n\n\n\nDelegado Luiz Alves"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#diogo-altamir-da-lotérica",
    "href": "posts/eleicao_mga_2024/pt/index.html#diogo-altamir-da-lotérica",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Diogo Altamir da Lotérica",
    "text": "Diogo Altamir da Lotérica\n\n\n\nDiogo Altamir da Lotérica"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#flavio-mantovani",
    "href": "posts/eleicao_mga_2024/pt/index.html#flavio-mantovani",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Flavio Mantovani",
    "text": "Flavio Mantovani\n\n\n\nFlavio Mantovani"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#giselli-bianchini",
    "href": "posts/eleicao_mga_2024/pt/index.html#giselli-bianchini",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Giselli Bianchini",
    "text": "Giselli Bianchini\n\n\n\nGiselli Bianchini"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#italo-maroneze",
    "href": "posts/eleicao_mga_2024/pt/index.html#italo-maroneze",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Italo Maroneze",
    "text": "Italo Maroneze\n\n\n\nItalo Maroneze"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#jeremias",
    "href": "posts/eleicao_mga_2024/pt/index.html#jeremias",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Jeremias",
    "text": "Jeremias\n\n\n\nJeremias"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#lemuel-do-salvando-vidas",
    "href": "posts/eleicao_mga_2024/pt/index.html#lemuel-do-salvando-vidas",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Lemuel do Salvando Vidas",
    "text": "Lemuel do Salvando Vidas\n\n\n\nLemuel do Salvando Vidas"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#luiz-neto",
    "href": "posts/eleicao_mga_2024/pt/index.html#luiz-neto",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Luiz Neto",
    "text": "Luiz Neto\n\n\n\nLuiz Neto"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#majô",
    "href": "posts/eleicao_mga_2024/pt/index.html#majô",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Majô",
    "text": "Majô\n\n\n\nMajô"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#maninho",
    "href": "posts/eleicao_mga_2024/pt/index.html#maninho",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Maninho",
    "text": "Maninho\n\n\n\nManinho"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#mario-hossokawa",
    "href": "posts/eleicao_mga_2024/pt/index.html#mario-hossokawa",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Mario Hossokawa",
    "text": "Mario Hossokawa\n\n\n\nMario Hossokawa"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#mario-verri",
    "href": "posts/eleicao_mga_2024/pt/index.html#mario-verri",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Mario Verri",
    "text": "Mario Verri\n\n\n\nMario Verri"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#odair-fogueteiro",
    "href": "posts/eleicao_mga_2024/pt/index.html#odair-fogueteiro",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Odair Fogueteiro",
    "text": "Odair Fogueteiro\n\n\n\nOdair Fogueteiro"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#profª-ana-lucia",
    "href": "posts/eleicao_mga_2024/pt/index.html#profª-ana-lucia",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Profª Ana Lucia",
    "text": "Profª Ana Lucia\n\n\n\nProfª Ana Lucia"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#sidnei-telles",
    "href": "posts/eleicao_mga_2024/pt/index.html#sidnei-telles",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Sidnei Telles",
    "text": "Sidnei Telles\n\n\n\nSidnei Telles"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#uilian-da-farmácia",
    "href": "posts/eleicao_mga_2024/pt/index.html#uilian-da-farmácia",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Uilian da Farmácia",
    "text": "Uilian da Farmácia\n\n\n\nUilian da Farmácia"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#william-gentil",
    "href": "posts/eleicao_mga_2024/pt/index.html#william-gentil",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "William Gentil",
    "text": "William Gentil\n\n\n\nWilliam Gentil"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#metodologia-1",
    "href": "posts/eleicao_mga_2024/pt/index.html#metodologia-1",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Metodologia",
    "text": "Metodologia\nOs dados referentes à votação em cada seção eleitoral foram obtidos através do TSE. A localização de cada colégio eleitoral foi obtida via Lei de Acesso à Informação (TRE-PR). As vias da cidade de Maringá foram obtidas através da plataforma OpenStreetMap. Os dados foram tratados, cruzados e analisados utilizando ferramentas de processamentos de dados em linguagem R. Todas as visualizações foram criadas utilizando o pacote ggplot2.\nQuer entender mais sobre os dados, análises e visualizações de dados? Entre em contato"
  },
  {
    "objectID": "posts/eleicao_mga_2024/pt/index.html#footnotes",
    "href": "posts/eleicao_mga_2024/pt/index.html#footnotes",
    "title": "A regionalização dos Vereadores eleitos em Maringá",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIBGE 2022↩︎\nEntidades manifestam apoio à adequação ao número de vereadores↩︎\nTSE↩︎"
  },
  {
    "objectID": "posts/intro_ggplot2/en/index.html#used-packages",
    "href": "posts/intro_ggplot2/en/index.html#used-packages",
    "title": "ggplot2 101",
    "section": "Used packages",
    "text": "Used packages\nIn this lesson we will use the following packages📦:\n\n{dplyr}  for data manipulation\n{ggplot2}  to create charts\n{ggpath}  to plot images in a much easier way\n{pokemon}  to get the pokemon table\n\nTo install the packages, we use the following script:\n\ninstall.packages(c(\"dplyr\", \"ggplot2\", \n                   \"ggpath\", \"pokemon\"))\n\nNow that we have the packages installed, just load them.\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggpath)\nlibrary(pokemon)"
  },
  {
    "objectID": "posts/intro_ggplot2/en/index.html#the-data",
    "href": "posts/intro_ggplot2/en/index.html#the-data",
    "title": "ggplot2 101",
    "section": "The data",
    "text": "The data\nTo create our charts, we need a dataset. We’ll use the {pokemon} 📦 package created by William Amorim!\n\npokemon_df &lt;- pokemon::pokemon"
  },
  {
    "objectID": "posts/intro_ggplot2/en/index.html#charts-with-r-base",
    "href": "posts/intro_ggplot2/en/index.html#charts-with-r-base",
    "title": "ggplot2 101",
    "section": "Charts with R base",
    "text": "Charts with R base\nOne way to create graphs is to use R base itself, which is very simple but allows quick visualizations.\nWe can create scatter plots, for example.\n\nplot(height ~ weight, data = pokemon_df)\n\n\n\n\n\n\n\nThe problem begins when we want to make these charts more appealing\n\nplot(height ~ weight, data = pokemon_df,\n     main = \"Title\",\n     xlab = \"Mass (kg)\", ylab = \"Height (m)\",\n     pch = 19, frame = FALSE)\nabline(lm(height ~ weight, data = pokemon_df), col = \"blue\")\n\n\n\n\n\n\n\nIt’s confusing and I find it very difficult to make any chart like this more appealing."
  },
  {
    "objectID": "posts/intro_ggplot2/en/index.html#charts-with-ggplot2",
    "href": "posts/intro_ggplot2/en/index.html#charts-with-ggplot2",
    "title": "ggplot2 101",
    "section": "Charts with ggplot2",
    "text": "Charts with ggplot2\nBut now let’s get to know the {ggplot2} 📦 package. This package was the thesis of Hadley Wickham, now Chief Scientist at RStudio/Posit.\nThe magic here is that this package incorporated the grammar of graphics (hence the gg), which brought several fundamentals to be followed. One of them is the creation of graphics in layers, as if it were a painting!\n\n\nSource: QCBS R Workshop Series\n\nThis package is already included in the {tidyverse} 📦 and follows the same principle.\n\nlibrary(ggplot2)\n\nIf we just run ggplot(), we’ll get a blank canvas.\n\nggplot()\n\n\n\n\n\n\n\nNow we have to add our dataset and what our axes will be.\nWhenever we are talking about a variable from our dataset, we have to put it inside the aes() argument, which stands for aesthetics.\n\nggplot(data = pokemon_df,\n       aes(x = weight,\n           y = height))\n\n\n\n\n\n\n\nIn fact, as ggplot2 works in layers, we can use it as follows:\n\nggplot(data = pokemon_df)+\n  aes(x = weight,\n      y = height)\n\n\n\n\n\n\n\nAs ggplot2 is part of the {tidyverse} 📦, we can tell R in the imperative: “Get the dataset pokemon_df and then create the ggplot…”. The good thing about this approach is that, as ggplot already knows the dataset beforehand, it helps us select the variables (press tab before writing the variables).\n\npokemon_df %&gt;% \n  ggplot(aes(x = weight,\n             y = height))\n\n\n\n\n\n\n\nNow we have our chart with the axes delimited, and we can add as many layers as we like. The principle of ggplot is similar to pipe, where the information is passed directly to the layer below, so we don’t need to add the data again.\nGeometries\nGeometries are functions that start with geom_*. There are lots of them and we can get a little help with ggplot2 cheatsheet.\nFirst, let’s create a scatterplot\n\npokemon_df %&gt;% \n  ggplot(aes(x = weight,\n             y = height))+\n  geom_point()\n\n\n\n\n\n\n\nTo add another layer of geometry, just add another layer to this canvas. Let’s add a trend line with the geom_smooth() function.\n\npokemon_df %&gt;% \n  ggplot(aes(x = weight,\n             y = height))+\n  geom_point()+\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\nWe can add a linear trend line with the argument method = \"lm\"!\n\npokemon_df %&gt;% \n  ggplot(aes(x = weight,\n             y = height))+\n  geom_point()+\n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nHere we can see how ggplot2 works like a painting. As geom_smooth() was called after geom_point(), it is plotted on top.\nLet’s look at the same example but inverting these geometries.\n\npokemon_df %&gt;% \n  ggplot(aes(x = weight,\n             y = height))+\n  geom_smooth(method = \"lm\")+\n  geom_point()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nLet’s make a boxplot (using the geom_boxplot geometry) of the type of pokemon by height\n\npokemon_df %&gt;% \n  ggplot(aes(x = type_1, y = height))+\n  geom_boxplot()\n\n\n\n\n\n\n\nNow let’s make a column chart (using the geom_col() geometry) of the pokemons’ attacks.\n\npokemon_df %&gt;% \n  ggplot(aes(x = pokemon, y = attack))+\n  geom_col()\n\n\n\n\n\n\n\nWhoa! We have a lot of data! Let’s filter only the starter pokemons and their evolutions to plot.\n\nstarters &lt;- pokemon_df %&gt;% \n  filter(id %in% 1:9)\n\nLet’s test it!\n\nstarters %&gt;% \n  ggplot(aes(x = pokemon, y = attack))+\n  geom_col()\n\n\n\n\n\n\n\nWe can invert the axes, just switch. Especially with large texts, it’s best to keep them on the y-axis.\n\nstarters %&gt;% \n  ggplot(aes(x = attack, y = pokemon))+\n  geom_col()\n\n\n\n\n\n\n\nThe pokemons are not in the order we would like (as in the dataset), they are in alphabetical order. So we have to sort them by id, but to be sorted we need to consider them as factors.\n\nstarters2 &lt;- starters %&gt;% \n  mutate(pokemon = reorder(pokemon, id))\n\nLet’s see if it worked using the dplyr::glimpse()  function. Note the class of each variable between &lt;...&gt;\n\nglimpse(starters2)\n\nRows: 9\nColumns: 22\n$ id              &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9\n$ pokemon         &lt;fct&gt; bulbasaur, ivysaur, venusaur, charmander, charmeleon, …\n$ species_id      &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9\n$ height          &lt;dbl&gt; 0.7, 1.0, 2.0, 0.6, 1.1, 1.7, 0.5, 1.0, 1.6\n$ weight          &lt;dbl&gt; 6.9, 13.0, 100.0, 8.5, 19.0, 90.5, 9.0, 22.5, 85.5\n$ base_experience &lt;dbl&gt; 64, 142, 236, 62, 142, 240, 63, 142, 239\n$ type_1          &lt;chr&gt; \"grass\", \"grass\", \"grass\", \"fire\", \"fire\", \"fire\", \"wa…\n$ type_2          &lt;chr&gt; \"poison\", \"poison\", \"poison\", NA, NA, \"flying\", NA, NA…\n$ hp              &lt;dbl&gt; 45, 60, 80, 39, 58, 78, 44, 59, 79\n$ attack          &lt;dbl&gt; 49, 62, 82, 52, 64, 84, 48, 63, 83\n$ defense         &lt;dbl&gt; 49, 63, 83, 43, 58, 78, 65, 80, 100\n$ special_attack  &lt;dbl&gt; 65, 80, 100, 60, 80, 109, 50, 65, 85\n$ special_defense &lt;dbl&gt; 65, 80, 100, 50, 65, 85, 64, 80, 105\n$ speed           &lt;dbl&gt; 45, 60, 80, 65, 80, 100, 43, 58, 78\n$ color_1         &lt;chr&gt; \"#78C850\", \"#78C850\", \"#78C850\", \"#F08030\", \"#F08030\",…\n$ color_2         &lt;chr&gt; \"#A040A0\", \"#A040A0\", \"#A040A0\", NA, NA, \"#A890F0\", NA…\n$ color_f         &lt;chr&gt; \"#81A763\", \"#81A763\", \"#81A763\", NA, NA, \"#DE835E\", NA…\n$ egg_group_1     &lt;chr&gt; \"monster\", \"monster\", \"monster\", \"monster\", \"monster\",…\n$ egg_group_2     &lt;chr&gt; \"plant\", \"plant\", \"plant\", \"dragon\", \"dragon\", \"dragon…\n$ url_icon        &lt;chr&gt; \"//archives.bulbagarden.net/media/upload/7/7b/001MS6.p…\n$ generation_id   &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1\n$ url_image       &lt;chr&gt; \"https://raw.githubusercontent.com/HybridShivam/Pokemo…\n\n\nLook how it’s sorted now!\n\nstarters2 %&gt;% \n  ggplot(aes(x = attack, y = pokemon))+\n  geom_col()\n\n\n\n\n\n\n\nThese charts are missing colors!\nNow let’s use the color and fill arguments. When the shape is solid, we only use color, if it has an outline and a filling, we use color and fill, respectively.\nWe can color according to any variable, in this case we’ll color by type!\nNote that we can determine the variable in the ggplot() function and it will be used for all the following ones. If we only want to apply it to a single layer, we only add it to that layer.\n\nstarters2 %&gt;% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col()\n\n\n\n\n\n\n\nNow we can add the outline. As it’s not a variable (it’s a fixed color), it doesn’t have to go inside aes()\n\nstarters2 %&gt;% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")\n\n\n\n\n\n\n\nLabels\nEvery chart can have a title, subtitle, caption, axis title, etc.\nAll this can be determined using the labs() function within ggplot. Note that the legend is created according to the fill variable, so the title of the legend will follow this variable.\n\nstarters2 %&gt;% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  labs(\n    title = \"The starter pokemons\",\n    subtitle = \"Separated by type\",\n    caption = \"Bruno Mioto\",\n    x = \"Attack\",\n    y = \"Pokemon\",\n    fill = \"Type\"\n  )\n\n\n\n\n\n\n\nScales\nWhat if we want to edit the scales? In that case we’ll use the scale_* set of functions.\nLet’s edit the X axis. The breaks are every 20 attack points, let’s put them every 10 points. As the x-axis is continuous, we’ll use the scale_x_continuous() function. The breaks argument helps us with this task!\n\nstarters2 %&gt;% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_x_continuous(breaks = seq(0,200,10))\n\n\n\n\n\n\n\nColors can also be defined using the scale_* function. These colors are not exactly what we want, we can define them manually using the scale_fill_manual() function.\nAs the colors are defined according to type, we’ll use them as a basis. The dataset itself provides the colors for each type. For the water type we’ll use the color #6890F0◉, for the fire type we’ll use the color #F08030◉ and for the grass type we’ll use the color #78C850◉.\n\nstarters2 %&gt;% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )\n\n\n\n\n\n\n\nIn addition to defining the colors, we can also determine the labels that each color will have in the legend. We’ll do this within the scale function too, but with the labels argument.\n\nstarters2 %&gt;% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    ),\n    labels = c(\n      \"fire\" = \"Fire\",\n      \"grass\" = \"Grass\",\n      \"water\" = \"Water\"\n    )\n  )\n\n\n\n\n\n\n\nThemes\nBut these charts aren’t so pretty yet, we can edit anything in the charts, from the background color to the font!\nggplot2 already has some pre-defined themes. Let’s try them out\nThis is theme_bw()\n\nstarters2 %&gt;% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )+\n  theme_bw()\n\n\n\n\n\n\n\nI really like theme_classic()\n\nstarters2 %&gt;% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )+\n  theme_classic()\n\n\n\n\n\n\n\ntheme_minimal() is also widely used.\n\nstarters2 %&gt;% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )+\n  theme_minimal()\n\n\n\n\n\n\n\nThe theme_void() maintains only the geometries of the generated chart.\n\nstarters2 %&gt;% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )+\n  theme_void()\n\n\n\n\n\n\n\nBut we can edit anything within the chosen theme too. These functions are just predetermined configurations.\nMost of the parameters can be seen on this website. To change the theme parameters, we add the arguments to the theme() function.\nLet’s delete the title of the axes!\n\nstarters2 %&gt;% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )+\n  theme(\n    axis.title = element_blank()\n  )\n\n\n\n\n\n\n\nOr change the background of the chart. Notice that we have plot (the whole chart) and panel (just the panel between the axes)\n\nstarters2 %&gt;% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )+\n  theme(\n    plot.background = element_rect(fill = \"pink\"),\n    panel.background = element_rect(fill = \"yellow\")\n  )\n\n\n\n\n\n\n\nLet’s change the grid lines!\n\nstarters2 %&gt;% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )+\n  theme(\n    plot.background = element_rect(fill = \"pink\"),\n    panel.background = element_rect(fill = \"yellow\",\n                                    color = \"blue\"),\n    panel.grid.major = element_line(color = \"green\"),\n    panel.grid.major.x = element_line(linetype = \"dashed\"),\n    panel.grid.minor.x = element_line(color = \"black\")\n  )\n\n\n\n\n\n\n\nOh my goodness! The chart isn’t pretty, but it’s didactic! (But don’t ever do something like that for real, please)\nFacets\nWe often have a lot of information to show in just one chart. For this we can use the idea of small multiples with the facet_wrap() function!\n\npokemon_df %&gt;% \n  ggplot(aes(x = attack, \n             y = defense, \n             color = generation_id))+\n  geom_point()+\n  facet_wrap(.~generation_id)\n\n\n\n\n\n\n\nIn this case, ggplot interpreted the generation_id column as a continuous number. But in this case each generation is independent of another. We can tell ggplot2 to interpret this variable as a factor.\n\npokemon_df %&gt;% \n  ggplot(aes(x = attack, \n             y = defense, \n             color = factor(generation_id)))+\n  geom_point()+\n  facet_wrap(.~factor(generation_id))\n\n\n\n\n\n\n\nWe can use the facets with other data too.\n\npokemon_df %&gt;% \n  ggplot(aes(x = attack, \n             y = defense, \n             color = type_1))+\n  geom_point()+\n  facet_wrap(.~type_1)"
  },
  {
    "objectID": "posts/intro_ggplot2/en/index.html#plotting-images",
    "href": "posts/intro_ggplot2/en/index.html#plotting-images",
    "title": "ggplot2 101",
    "section": "Plotting images",
    "text": "Plotting images\nIf we want to put images in our charts, the best indication is to use the package {ggpath} 📦. This is the best way to plot images!\nTo do this, use the geom_from_path() function. All we need to do is enter the column with the path to the picture.\nOne suggestion is to set the width argument to 0.1 as the pictures can get big!\n\nlibrary(ggpath)\n\nstarters2 %&gt;% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  geom_from_path(aes(path = url_image),\n                 width = 0.1)+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )\n\n\n\n\n\n\n\nChart finished\nHere I’ve added a few finishing touches to our chart (check the positioning of the names and figures!). Unfortunately it’s not for this post to go into all these details, but I’ve left everything in the comments!\n\nstarters2 %&gt;% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  #add columns\n  geom_col(color = \"black\",\n           width = 0.5)+\n  #add names\n  geom_text(aes(label = pokemon,\n                color = type_1),\n            x = 1,\n            hjust = 0, #side alignment\n            nudge_y = 0.45, #vertical adjustment\n            fontface = \"bold\"\n            )+\n  #add figures\n  geom_from_path(aes(path = url_image),\n                 width = 0.1, #width relative to total\n                 hjust = 0 #side alignment\n                 )+\n  #add vertical line\n  geom_vline(xintercept = 0)+\n  #expand x-axis\n  scale_x_continuous(\n    expand = expansion(mult = c(0,0.1)) #expand left-right\n  )+\n  #edit colors (will affect text that uses color)\n  scale_color_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )+\n  #edit colors (will affect the column that uses fill)\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )+\n  #edit labs\n  labs(\n    x = \"Attack\",\n    caption = \"Bruno Mioto - @BrunoHMioto\"\n  )+\n  #use initial theme\n  theme_classic()+\n  #edit theme\n  theme(\n    #remove all subtitles\n    legend.position = \"none\",\n    #remove y-axis title\n    axis.title.y = element_blank(),\n    #remove text from y-axis\n    axis.text.y = element_blank(),\n    #remove ticks\n    axis.ticks = element_blank(),\n    #remove axes\n    axis.line = element_blank(),\n    #add grid line - major\n    panel.grid.major.x = element_line(),\n    #add dotted grid line - minor\n    panel.grid.minor.x = element_line(linetype = \"dashed\"),\n    #increase plot margins\n    plot.margin = margin(10,10,10,10,\"pt\"),\n    #change the color of the plot background\n    plot.background = element_rect(fill = \"#f1f1f1\", color = NA),\n    #change the background color of the panel\n    panel.background = element_rect(fill = \"#f1f1f1\", color = NA)\n  )+\n  #doesn't crop the images that come out of the panel\n  coord_cartesian(\n    clip = \"off\"\n  )\n\n\n\n\n\n\n\nEverything we’ve seen so far is the basics of the basics in ggplot2, but it already allows us to do a lot of cool stuff! There are several examples of charts with ggplot2 here, and some ready-made scripts here!\nIf you found this content useful in any way, share it with your friends!\nWould you like a workshop with this material? Get in touch!"
  },
  {
    "objectID": "posts/pt.html",
    "href": "posts/pt.html",
    "title": "Bruno Mioto",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngenetics\n\n\npackages\n\n\n\n\n\n\nMar 10, 2025\n\n\nBruno Mioto\n\n\n10 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2\n\n\ndataviz\n\n\npolítica\n\n\n\n\n\n\nOct 16, 2024\n\n\nBruno Mioto\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2\n\n\ndataviz\n\n\nsaúde\n\n\n\n\n\n\nMar 21, 2024\n\n\nBruno Mioto\n\n\n2 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2\n\n\ndataviz\n\n\n\n\n\n\nJan 30, 2024\n\n\nBruno Mioto\n\n\n16 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2\n\n\ndataviz\n\n\nmaps\n\n\n\n\n\n\nDec 5, 2023\n\n\nBruno Mioto\n\n\n15 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/pt.html#posts-em-português",
    "href": "posts/pt.html#posts-em-português",
    "title": "Bruno Mioto",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngenetics\n\n\npackages\n\n\n\n\n\n\nMar 10, 2025\n\n\nBruno Mioto\n\n\n10 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2\n\n\ndataviz\n\n\npolítica\n\n\n\n\n\n\nOct 16, 2024\n\n\nBruno Mioto\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2\n\n\ndataviz\n\n\nsaúde\n\n\n\n\n\n\nMar 21, 2024\n\n\nBruno Mioto\n\n\n2 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2\n\n\ndataviz\n\n\n\n\n\n\nJan 30, 2024\n\n\nBruno Mioto\n\n\n16 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2\n\n\ndataviz\n\n\nmaps\n\n\n\n\n\n\nDec 5, 2023\n\n\nBruno Mioto\n\n\n15 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/waterlines/en/index.html#motivation",
    "href": "posts/waterlines/en/index.html#motivation",
    "title": "Drawing waterlines with ggplot2 in R",
    "section": "Motivation",
    "text": "Motivation\n\nLast week I saw that Thomas Lin Pedersen (currently responsible for ggplot2) has started developing a new package called boundaries. It did not take me much effort to understand the main function of the package, because this amazing hex logo explains it very well, to create waterlines from boudaries!\nBut this is a package from the new euclid ecosystem, which aims to “provide a new unified foundation for computational geometry in R”. Awesome, but at that moment I wanted to know if I could create the waterlines for any shapefile I find on my computer, and the boundaries package doesn’t support sf objects, which I use to create maps…\nAnd so, like a good Ph.D. student, I began a saga of Google and StackOverFlow searches to find the answers I was looking for. Coincidentally, on the same day (!), I came across Olivia Vane’s tweet about her talk at Observable Insight 2022, where she teaches drawing waterlines with code, but using D3.js.\nHer article about waterlines is great and explains all the context behind this visualization. I highly recommend reading it!\nBut the topic was hot, and I already had an idea how to use waterlines: Re-create an old map of the Brazilian coast!\nThen I discovered that there is a way to create waterlines using the sf and ggplot2 packages! So I created this text as a guide for the next people who need it! Today I will try to present a basic version for everyone to understand the idea and create their own amazing maps!\nLook how my map turned out!"
  },
  {
    "objectID": "posts/waterlines/en/index.html#creating-our-map",
    "href": "posts/waterlines/en/index.html#creating-our-map",
    "title": "Drawing waterlines with ggplot2 in R",
    "section": "Creating our map",
    "text": "Creating our map\nWe need a map with some water masses. Since my girlfriend is of Japanese descent, I will use today’s post to thank this culture for providing me with sushi, lamen, yakisoba, anime, and a lot of knowledge and respect!\nLet’s load the necessary packages, I’ll talk about them during the text.\nIf you have questions about a function, just click on its name to go to the package page!\n\n# Packages\nlibrary(dplyr) #pipe and basics\nlibrary(ggplot2) #plotting\nlibrary(sf) #working with maps\nlibrary(rnaturalearth) #get countries shapefiles\n\nNow we need the map of Japan. Good thing we have the rnaturalearth package!\n\njapan_map &lt;- rnaturalearth::ne_countries(country = \"Japan\", #country name\n                                         scale = \"medium\", #map resolution\n                                         returnclass = \"sf\" #object class\n                                         )\n\nWe can check out the map we just downloaded\n\njapan_map %&gt;% \n  ggplot()+\n  geom_sf()\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nSince the next process requires some geometry calculations, we will tell the sf package not to use the s2 package, as this can lead to errors.\n\nsf::sf_use_s2(FALSE)\n\n#&gt; Spherical geometry (s2) switched off\n\n\n\n\nAll done, now we just need to create the waterlines! We will use the st_buffer function from the sf package, as the name says, it calculates a buffer around the geometry, which is exactly what we need! Each line of code is a waterline, add as many as you like!\nAfter executing each line you will get a warning. Don’t worry, it will work!\n\njapan_buffer1 &lt;- sf::st_buffer(japan_map, dist = 0.1)\njapan_buffer2 &lt;- sf::st_buffer(japan_map, dist = 0.2)\njapan_buffer3 &lt;- sf::st_buffer(japan_map, dist = 0.3)\njapan_buffer4 &lt;- sf::st_buffer(japan_map, dist = 0.4)\n\n#&gt; Warning: st_buffer does not correctly buffer longitude/latitude datadist is assumed to be in decimal degrees (arc_degrees).\n\nNow we can plot it!\n\njapan_map %&gt;% \n  ggplot()+\n  geom_sf()+\n  geom_sf(data = japan_buffer1, fill = NA)+\n  geom_sf(data = japan_buffer2, fill = NA)+\n  geom_sf(data = japan_buffer3, fill = NA)+\n  geom_sf(data = japan_buffer4, fill = NA)\n\n\n\n\n\n\n\nLet’s add some details and make this map even cooler!\n\njapan_map %&gt;% \n  ggplot()+\n  geom_sf(fill = \"#f9e9ca\", \n          color = \"#48351c\",\n          linewidth = 0.4)+\n  geom_sf(data = japan_buffer1, \n          fill = NA, \n          color = \"#48351c90\")+\n  geom_sf(data = japan_buffer2, \n          fill = NA, \n          color = \"#48351c70\")+\n  geom_sf(data = japan_buffer3, \n          fill = NA, \n          color = \"#48351c50\")+\n  geom_sf(data = japan_buffer4, \n          fill = NA, \n          color = \"#48351c30\")+\n  theme_bw()+\n  theme(\n    panel.background = element_rect(fill = \"#badff0\"),\n    panel.grid = element_line(color = \"#afd2e2\")\n  )+\n  coord_sf(clip = \"off\")\n\n\n\n\n\n\n\nAwesome! I hope you enjoyed this tutorial. I would like to thanks Olivia Vane, Maya Gans and Georgios Karamanis for the inspiration and tips for this post!\nShare it with your friends and send me your maps with waterlines!\nDon’t forget to take a look at my Charts page!\n\n\n\n\n\n\n\nExpand for Session Info\n\n\n\n\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.1 (2023-06-16 ucrt)\n os       Windows 11 x64 (build 22621)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  Portuguese_Brazil.utf8\n ctype    Portuguese_Brazil.utf8\n tz       America/Sao_Paulo\n date     2024-02-23\n pandoc   3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package       * version    date (UTC) lib source\n dplyr         * 1.1.3      2023-09-03 [1] CRAN (R 4.3.2)\n ggplot2       * 3.5.0.9000 2024-02-23 [1] Github (tidyverse/ggplot2@e8a388e)\n rnaturalearth * 1.0.1      2023-12-15 [1] CRAN (R 4.3.2)\n sessioninfo   * 1.2.2      2021-12-06 [1] CRAN (R 4.3.2)\n sf            * 1.0-14     2023-07-11 [1] CRAN (R 4.3.2)\n\n [1] C:/Users/Bruno Mioto/AppData/Local/R/win-library/4.3\n [2] C:/Program Files/R/R-4.3.1/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "scripts.html",
    "href": "scripts.html",
    "title": "Scripts",
    "section": "",
    "text": "This is some of the codes I wrote to create my charts. Each chart has its own code right below it.\nYou can navigate through the site using the sidebar on desktop.\nIf some code is useful to you, please consider donating."
  },
  {
    "objectID": "scripts.html#random-charts",
    "href": "scripts.html#random-charts",
    "title": "Scripts",
    "section": "Random charts",
    "text": "Random charts\n\nBoa constrictor 🐍\n\n\n\nCode - Click to view\n# packages ----------------------------------------------------------------\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(geomtextpath)\n\n# data --------------------------------------------------------------------\n\ndata &lt;- data.frame(a = c(2.8,2.8,3.8,2.9,2.8,3,4.5,5.6,5.7,4.4,5.8))\n\nquote &lt;- \"'My drawing was not a picture of a hat. It was a picture of a &lt;i&gt;Boa constrictor&lt;/i&gt; digesting an elephant.'\"\n\nscatter = data.frame(\n  x = runif(10000,-5,18),\n  y = runif(10000,-1,1)\n)\n\n# plot --------------------------------------------------------------------\n\ndata %&gt;% \n  ggplot(aes(x = a))+\n  geom_density(adjust = 1,\n               fill = \"#784707\",\n               color = \"#462e0a\",\n               size = 3)+\n  geom_textdensity(size = 5, fontface = 2, spacing = 30,\n                   vjust = -0.35, hjust = 0.2,\n                   label = quote,\n                   color = \"#462e0a\",\n                   rich = TRUE)+\n  geom_segment(x = -2.5, xend = 12, y = 0, yend = 0,\n               size = 3, color = \"#462e0a\",lineend = \"round\")+\n  geom_point(x = 11.95, y = 0.002, size = 0.5)+\n  annotate(\"text\", x = 12, y = 0, label = \"- The Little Prince by\\nAntoine de Saint-Exupéry\\nBruno Mioto - @BrunoHMioto\",\n           hjust = 1, vjust = 1.2, fontface = \"bold\",\n           color = \"#462e0a\")+\n  scale_y_continuous(expand = c(0,0))+\n  scale_x_continuous(limits = c(-2.5,12))+\n  theme_void()+\n  theme(\n    panel.background = element_rect(fill = \"#f7f8f8\", color = NA)\n  )+\n  coord_cartesian(ylim = c(-.4,0.8), xlim = c(-4,13))\n\n\nggsave(\"elephant.png\", width = 10, height = 6)\n\n\n\n\nAlcohol consumption 🍺\n\n\n\nCode - Click to view\n# packages ----------------------------------------------------------------\n\nlibrary(dplyr)\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(elementalist)\nlibrary(janitor)\nlibrary(ggrepel)\nlibrary(rcartocolor)\nlibrary(ggforce)\n\n# data --------------------------------------------------------------------\n\ndata &lt;- read_csv(\"data/alcohol-consumption-by-15-19-year-old-males-vs-females.csv\") %&gt;% \n  clean_names()\n\ncountries &lt;- read_csv(\"data/continents2.csv\") %&gt;%\n  clean_names() %&gt;% \n  select(alpha_3, region)\n\ndata2 &lt;- data %&gt;% \n  rename(male = 4,\n         female = 5) %&gt;% \n  filter(year == 2010,\n         !is.na(male),\n         !is.na(female)) %&gt;% \n  left_join(countries, by = c(\"code\" = \"alpha_3\"))\n\ndata_points &lt;- tibble(\n  x = c(15,38,38),\n  y = c(5,5,28)\n)\n\n# plot --------------------------------------------------------------------\n\ndata2 %&gt;% \n  ggplot(aes(x = female, y = male, \n             color = region))+\n  geom_abline(color = \"grey\")+\n  geom_text_repel(aes(label = ifelse(entity == \"Brazil\",\n                                     entity,\n                                     \"\")),\n                  fontface = \"bold\",\n                  max.overlaps = 40,\n                  min.segment.length = 0,box.padding = 0.6,\n                  show.legend = FALSE)+\n  geom_text_repel(aes(label = ifelse(male &gt; 25| female&gt;10,\n                                     entity,\n                                     \"\")),\n                  fontface = \"bold\",box.padding = 0.3,\n                  max.overlaps = 20,\n                  show.legend = FALSE)+\n  geom_point(alpha = 0.7, \n             aes(\n    size = population_historical_estimates))+\n  annotate(\"text\",\n           x = 30, y = 30, label = paste0(\"\\u2191 Men drink more\\n\\u2193 Women drink more\"),\n           angle = 33,fontface = \"bold\", color = \"grey\")+\n  ggforce::geom_mark_hull(data = data_points, aes(x = x, y = y), color = \"grey20\", fill = \"grey20\",\n                          linetype = \"dashed\",alpha = 0.1)+\n  annotate(\"text\",\n          x = 31.5, y = 11.5, label = \"A better\\nworld?\",\n          lineheight = 0.8,\n          fontface = \"bold\",\n          family = \"Open Sans\",\n          color = \"grey40\")+\n  guides(size = \"none\")+\n  #rcartocolor::scale_color_carto_d(palette = \"Bold\")+\n  scale_color_manual(\n    values = c(\"#7f3c8d\",\n               \"#11a579\",\n               \"#3969ac\",\n               \"#e68310\",\n               \"#e73f74\")\n  )+\n  scale_x_continuous(labels = scales::label_number(scale = 1,suffix = \"L\"),\n                     expand = expansion(mult = c(0,0.05)))+\n  scale_y_continuous(labels = scales::label_number(scale = 1,suffix = \"L\"),\n                     expand = expansion(mult = c(0,0.05)))+\n  labs(\n    title = \"Average alcohol consumption with 15-19 year old, 2010\",\n    subtitle = \"Measured in litres of pure alcohol per year\",\n    x = \"Avg alcohol consumption per capita (Females)\",\n    y = \"Avg alcohol consumption per capita (Males)\",\n    color = \"Continent\",\n    caption = \"Bruno Mioto @BrunoHMioto - Data: WHO, Global Health Observatory (GHO)\"\n  )+\n  theme_classic()+\n  theme(\n    plot.title.position = \"plot\",\n    plot.title = element_text(face = \"bold\"),\n    legend.margin = margin(0,0,0,0,\"pt\"),\n    legend.text = element_text(margin = margin(0,5,0,0, unit = 'pt')),\n    legend.title = element_text(face = \"bold\"),\n    axis.title = element_text(face = \"bold\"),\n    axis.text = element_text(face = \"bold\", angle = c(1,3,-3,-5,6)),\n    legend.position = \"top\",\n    panel.grid.major = element_line_wiggle(2.5),\n    panel.grid.minor = element_line_wiggle(2.5, color = \"#f1f1f1\"),\n    axis.line = element_line_wiggle(3),\n    text = element_text(family = \"Open Sans\")\n  )+\n  coord_cartesian(xlim = c(0,40),\n                  ylim = c(0,40))\n\n\nggsave(\"test12_5.png\", width = 6, height = 5)\n\n\n\n\nPfizer vaccine 💉\n\n\n\nCode - Click to view\n# packages ----------------------------------------------------------------\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(extrafont)\nlibrary(readr)\n\n# data --------------------------------------------------------------------\n\ndata &lt;- read_csv(\"https://raw.githubusercontent.com/brunomioto/dataviz/main/pfizer_vaccine/pfizer_vaccine_trial.csv\")\n\n# plot --------------------------------------------------------------------\n\ndata %&gt;% \n  ggplot(aes(x = days_after_dose_1))+\n  #dif\n  geom_segment(aes(x = 110, xend = 110, y = 0.29413854, yend = 2.24653641),\n               color = \"#bdbdbd\",\n               size = 2)+\n  geom_label(aes(x = 110, y = 1.4, label = \"7.6x\"),\n             color = \"#bdbdbd\",\n             fill = \"#fcfcfc\",\n             size = 8,\n             label.padding = unit(10, \"pt\"),\n             label.size = NA,\n             hjust = 0.43)+\n  #placebo\n  geom_step(aes(y = placebo),\n            color = \"#f76833\",\n            size = 1)+\n  geom_point(data = data %&gt;%  \n               distinct(placebo, .keep_all = TRUE),\n             aes(y = placebo),\n             color = \"#f76833\",\n             shape = 21,\n             fill = NA)+\n  geom_text_repel(aes(label = ifelse(days_after_dose_1 == 73, \"Placebo group\",\"\"),\n                      y = placebo),\n                  nudge_x = -5,\n                  box.padding = 0.5,\n                  nudge_y = 0.3,\n                  segment.curvature = 0.1,\n                  segment.ncp = 3,\n                  segment.angle = 20,\n                  fontface = \"bold\",\n                  color = \"#f76833\",\n                  size = 4)+\n  #vaccine\n  geom_step(aes(y = vaccine),\n            color = \"#196299\",\n            size = 1)+\n  geom_point(data = data %&gt;%  \n               distinct(vaccine, .keep_all = TRUE),\n             aes(y = vaccine),\n             color = \"#196299\",\n             shape = 21,\n             fill = NA)+\n  geom_text_repel(aes(label = ifelse(days_after_dose_1 == 96, paste(\"Vaccinated group\\nBNT162b2 (30\\u03bcg)\"),\"\"),\n                      y = vaccine),\n                  nudge_x = -5,\n                  box.padding = 0.5,\n                  nudge_y = 0.3,\n                  segment.curvature = 0.1,\n                  segment.ncp = 3,\n                  segment.angle = 20,\n                  fontface = \"bold\",\n                  color = \"#196299\",\n                  size = 4)+\n  scale_y_continuous(breaks = seq(0,2.4,0.4), expand = expansion(mult = c(0,0.05)))+\n  scale_x_continuous(breaks = seq(0,119,7), expand = expansion(mult = c(0.01,0.02)))+\n  coord_cartesian(ylim = c(0,2.4))+\n  labs(\n    title = \"COVID-19 incidence rates in Pfizer/BioNTech's vaccine trial\",\n    x = \"Days after first dose\",\n    y = \"Cumulative incidence (%)\",\n    caption = \"Chart: Bruno Mioto @BrunoHMioto - Source: New England Journal of Medicine\"\n  )+\n  theme_minimal()+\n  theme(\n    plot.background = element_rect(fill = \"#fcfcfc\", color = NA),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.line.x = element_line(),\n    axis.ticks.x = element_line(),\n    axis.title = element_text(face = \"bold\"),\n    axis.text = element_text(face = \"bold\", size = 10),\n    text = element_text(family = \"Open Sans\"),\n    plot.title.position = \"plot\",\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.margin = margin(10,10,10,10, unit = \"pt\")\n  )\n\nggsave(\"pfizer_trial.png\", width = 10, height = 7)\n\n\n\n\nSpider 🕷️\n\n\n\nCode - Click to view\n# packages ----------------------------------------------------------------\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggtext)\nlibrary(ggthemes)\nlibrary(nflplotR) #we can use ggpath now\n\n# data --------------------------------------------------------------------\n\ndata &lt;- read_csv(\"species_export_20220408.csv\")\n\n# plot --------------------------------------------------------------------\n\n#point\nplot &lt;- data %&gt;% \n  group_by(year) %&gt;% \n  count() %&gt;% \n  ungroup() %&gt;% \n  mutate(cum_sum = cumsum(n)) %&gt;% \n  ggplot(aes(x = year, y = cum_sum))+\n  geom_line(color = \"grey50\")+\n  geom_point(\n    aes(color = ifelse(year == 2022, \"#735133\", \"grey50\"))\n  )+\n  annotate(\n    geom = \"curve\", x = 1950, y = 45000, xend = 2022, yend = 50000, \n    curvature = -.2,\n    color = \"#735133\"\n  ) +\n  geom_richtext(x = 1950, \n                y = 40000, \n                size = 4.5,\n                color = \"#735133\",\n                label.color = NA,\n                fill = \"#f0f0f0\",\n                label = \"&lt;i&gt;Guriurius minuano&lt;/i&gt;&lt;br&gt;Marta, Bustamante, Ruiz &&lt;br&gt;Rodrigues, 2022\"\n  )+\n  annotate(\n    nflplotR::GeomFromPath,\n    x = 1787, y = 40000,\n    path = \"./spider_picture.png\",\n    width = 0.2\n  ) +\n  scale_color_identity()+\n  scale_y_continuous(expand = expansion(mult = c(0.02,0.02)),\n                     labels = scales::unit_format(big.mark = \",\", unit = \"\"))+\n  scale_x_continuous(breaks = c(seq(1750, 2022, 25),2022))+\n  labs(\n    title = \"The world of spiders: The 50,000th species described!\",\n    x = \"Year\",\n    y = \"Number of species\",\n    caption = \"Data: World Spider Catalog\\nFigure:  Marta, Bustamante, Ruiz & Rodrigues (2022)\"\n  )+\n  theme_fivethirtyeight() +\n  theme(\n    panel.grid.minor.y = element_blank(),\n    axis.title = element_text(face = \"bold\"),\n    plot.title.position = \"plot\",\n    axis.title.x = element_text(margin = margin(5,0,-5,0)),\n    plot.caption = element_text(margin = margin(0,0,0,0))\n  )+\n  coord_cartesian(ylim = c(0,NA))\n\n\n\n\nStar Wars 🌌\n\n\n\nCode - Click to view\n# packages ----------------------------------------------------------------\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(ggfx)\n\n# data --------------------------------------------------------------------\n\ndata &lt;- dplyr::starwars\n\nlist_char &lt;- c(\"Luke Skywalker\",\n               \"Darth Vader\",\n               \"Obi-Wan Kenobi\",\n               \"Yoda\",\n               \"Mace Windu\",\n               \"Leia Organa\")\n\ndata2 &lt;- data %&gt;%\n  mutate(height = height/100)\n\n# plot --------------------------------------------------------------------\n\nplot &lt;- data2 %&gt;% \n  ggplot(aes(x = height, y = height))+\n    #Yoda\n    with_outer_glow(\n      geom_segment(data=filter(data2,name == \"Yoda\"),\n                   aes(x = 0, xend = height, yend = name, y = name),\n                   color = \"#ffffff\",\n                   size = 3,\n                   lineend = \"round\"),\n      colour = \"#02fe2c\",\n      sigma = 20,\n      expand = 10\n    )+ \n    #Leia\n    with_outer_glow(\n      geom_segment(data=filter(data2,name == \"Leia Organa\"),\n                   aes(x = 0, xend = height, yend = name, y = name),\n                   color = \"#ffffff\",\n                   size = 3,\n                   lineend = \"round\"),\n      colour = \"#006be4\",\n      sigma = 20,\n      expand = 10\n    )+ \n    #luke\n    with_outer_glow(\n      geom_segment(data=filter(data2,name == \"Luke Skywalker\"),\n                   aes(x = 0, xend = height, yend = name, y = name),\n                   color = \"#ffffff\",\n                   size = 3,\n                   lineend = \"round\"),\n      colour = \"#02fe2c\",\n      sigma = 20,\n      expand = 10\n    )+\n    #Obi-Wan Kenobi\n    with_outer_glow(\n      geom_segment(data=filter(data2,name == \"Obi-Wan Kenobi\"),\n                   aes(x = 0, xend = height, yend = name, y = name),\n                   color = \"#ffffff\",\n                   size = 3,\n                   lineend = \"round\"),\n      colour = \"#006be4\",\n      sigma = 20,\n      expand = 10\n    )+ \n    #Mace Windu\n    with_outer_glow(\n      geom_segment(data=filter(data2,name == \"Mace Windu\"),\n                   aes(x = 0, xend = height, yend = name, y = name),\n                   color = \"#ffffff\",\n                   size = 3,\n                   lineend = \"round\"),\n      colour = \"#d413ef\",\n      sigma = 20\n    )+\n    #darth vader\n    with_outer_glow(\n      geom_segment(data=filter(data2,name == \"Darth Vader\"),\n                   aes(x = 0, xend = height, yend = name, y = name),\n                   color = \"#ffffff\",\n                   size = 3,\n                   lineend = \"round\"),\n      colour = \"#e00301\",\n      sigma = 30,\n      expand = 10\n    )+\n    labs(\n      title = \"Height of some Star Wars characters\",\n      x = \"Height, m\",\n      caption = \"Bruno Mioto - @BrunoHMioto\"\n    )+\n    scale_x_continuous(expand = expansion(mult = c(0,0.05)))+\n    scale_y_discrete(limits = c(\"Yoda\",\n                                \"Leia Organa\",\n                                \"Luke Skywalker\",\n                                \"Obi-Wan Kenobi\",\n                                \"Mace Windu\",\n                                \"Darth Vader\"))+\n    theme_minimal()+\n    theme(\n      plot.background = element_rect(fill = \"black\"),\n      panel.background = element_rect(fill = \"black\"),\n      panel.grid.major.y = element_line(linetype = \"dashed\", color = \"grey\"),\n      panel.grid.minor.y = element_blank(),\n      panel.grid.major.x = element_blank(),\n      plot.title.position = \"plot\",\n      plot.title = element_text(size = rel(1.5)),\n      text = element_text(color = \"white\", face = \"bold\"),\n      axis.text = element_text(color = \"white\"),\n      axis.title.x = element_blank(),\n      axis.text.x = element_text(angle = 90,vjust = 0.5, hjust = 1)\n    )+\n  coord_flip()\n\n\nggsave(plot = plot, \"starwars_height_flip.png\", height = 10, width = 5)\n\n\n\n\nCopacabana 🏖️\n\n\n\nCode - Click to view\n# packages ----------------------------------------------------------------\n\nlibrary(tidyverse)\nlibrary(ggforce)\nlibrary(patchwork)\n\n# data --------------------------------------------------------------------\n\ncol_1 &lt;- c(\"a\", \"b\", \"c\", \"d\")\ncol_2 &lt;- c(\"e\", \"f\", \"g\", \"h\")\ncol_3 &lt;- c(\"i\", \"j\", \"k\", \"l\")\nvalue &lt;- c(0, 5, 5, 5)\n\ndf &lt;- data.frame(col_1, col_2, col_3, value)\n\ndf &lt;- gather_set_data(df, 1:3)\n\ndf$y &lt;- factor(df$y, levels = c(\"a\", \"b\", \"c\", \"d\",\n                                \"f\", \"g\", \"h\", \"e\",\n                                \"i\", \"j\", \"k\", \"l\"\n                                ))\n\n# plot -------------------------------------------------\n\na &lt;- df %&gt;%\n  ggplot(aes(x, id = id, split = y, value = value)) +\n  geom_parallel_sets(\n    fill = \"black\",\n    axis.width = 0,\n    sep = 0.5,\n    strength = 0.7\n  ) +\n  geom_parallel_sets_axes(axis.width = 0) +\n  scale_y_continuous(expand = c(0, 0)) +\n  scale_x_discrete(expand = c(0, 0)) +\n  theme_void()\n\n# copacabana ------------------------------------------\n\n(a|a|a|a|a)/(a|a|a|a|a)\n\nggsave(\"copacabana3.png\", width = 6, height = 6)\n\n\n\n\nEye 👁️\n\n\n\nCode - Click to view\n# packages ----------------------------------------------------------------\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggforce)\nlibrary(ggnewscale)\n\n# data --------------------------------------------------------------------\n\ndata &lt;- data.frame(x = runif(1000),\n                   y = runif(1000))\n\ncircle &lt;- data.frame(\n  x0 = 0.1,\n  y0 = 0.9,\n  r = 0.06\n)\n\n# plot --------------------------------------------------------------------\n\neye &lt;- ggplot(data)+\n  #fundo\n  geom_tile(aes(x = 0.5, y=1, fill = y)) +\n  scale_fill_gradient2(low = '#ffffff', mid = \"#f3f1f4\", high = '#e8e4e9',\n                       midpoint = 0.6) +\n  ggnewscale::new_scale_fill()+\n  #iris fundo\n  geom_tile(aes(x = 0.5, y=0.5, fill = y)) +\n  scale_fill_gradient2(low = '#2b5a74', mid = '#08303c', high = '#08303c',\n                       midpoint = 0.8) +\n  #iris linha\n  geom_line(aes(x,y,color = y))+\n  scale_color_gradient(low = \"#412808\", high = \"#ad8d6d30\")+\n  #contorno\n  geom_hline(yintercept = 1.5, size = 1.2)+\n  ggnewscale::new_scale_fill()+\n  #pupila\n  geom_rect(xmin = 0, xmax = 1, ymin = 0, ymax = 0.4,\n            fill = \"#000000\")+\n  #reflexo\n  geom_circle(data = circle, aes(x0 = x0, y0 = y0, r = r, fill = r),\n              fill = \"#ffffff\")+\n  scale_y_continuous(limits = c(0,1.5))+\n  coord_polar()+\n  theme_void()+\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(fill = \"white\", color = NA)\n  )\n\n# save --------------------------------------------------------------------\n\nggsave(plot = eye, \"eye.png\", width = 6, height = 6)\n\n\n\n\nUS Nuclear Tests 💣️\n\n\n\nCode - Click to view\n# packages ----------------------------------------------------------------\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggfx)\nlibrary(ggpath)\n\n# data --------------------------------------------------------------------\n\nnuclear_tests &lt;- read.csv(\"https://raw.githubusercontent.com/owid/notebooks/main/BastianHerre/nuclear_weapons/Arms%20Control%20Association%20(2020)%20nuclear%20weapons%20tests/nuclear_weapons_tests_states.csv\")\n\nusa_tests &lt;- nuclear_tests %&gt;% \n  filter(country_name == \"United States\") %&gt;% \n  group_by(year) %&gt;% \n  count(wt = nuclear_weapons_tests)\n\n# plot --------------------------------------------------------------------\n\nusa_tests %&gt;% \n  ggplot(aes(x = year, y = n))+\n  #1st bomb\n  annotate(\n    \"curve\",\n    x = 1944.5, xend = 1944,\n    y = 2, yend = 28,\n    color = \"white\",\n    curvature = -0.3\n  )+\n  annotate(\n    \"text\",\n    x = 1948,\n    y = 32,\n    label = \"'Trinity' was the first\\nUS bomb to be tested\",\n    family = \"Open Sans\",\n    lineheight = 0.85,\n    color = \"white\"\n  )+\n  #moratorium \n  annotate(\n    \"rect\",\n    xmin = 1958.5, xmax = 1960.5,\n    ymin = -Inf, ymax = 102,\n    fill = \"#cbcbc2\",\n    alpha = 0.3\n  )+\n  annotate(\n    \"label\",\n    x = 1951,\n    y = 87.5,\n    label = \"URSS, UK, and the US\\nagreed to a moratorium\\non nuclear weapon tests in 1958\",\n    size = 3,\n    family = \"Open Sans\",\n    lineheight = 0.87,\n    color = \"white\",\n    fill = \"#171515\",\n    label.size = NA,\n  )+\n  annotate(\n    \"curve\",\n    x = 1955, xend = 1958.3,\n    y = 92, yend = 95,\n    color = \"white\",\n    curvature = -0.2,\n    linewidth = 0.3\n  )+\n  #record\n  annotate(\n    \"label\",\n    x = 1975,\n    y = 93,\n    label = \"After the moratorium was broken in August 1961,\\nthe US tested 96 nuclear bombs in 1962\",\n    size = 3.5,\n    family = \"Open Sans\",\n    lineheight = 0.87,\n    color = \"white\",\n    fill = \"#171515\",\n    label.size = NA,\n  )+\n  #last test\n  annotate(\n    \"label\",\n    x = 1988,\n    y = 31.25,\n    label = \"Following intense public pressure,\\nthe US adheres to a testing\\nmoratorium in 1992\",\n    size = 3,\n    family = \"Open Sans\",\n    lineheight = 0.87,\n    color = \"white\",\n    fill = \"#171515\",\n    label.size = NA,\n  )+\n  annotate(\n    \"curve\",\n    x = 1992, xend = 1993,\n    y = 7, yend = 28,\n    color = \"white\",\n    curvature = 0.2,\n    linewidth = 0.3\n  )+\n  #tests label\n  annotate(\n    \"label\",\n    x = 1942,\n    y = 100,\n    label = \"tests\",\n    hjust = 0,\n    vjust = 0.45,\n    label.size = NA,\n    fill = \"#171515\",\n    color = \"white\",\n    family = \"Open Sans\",\n    fontface = \"bold\"\n  )+\n  geom_from_path(\n    path = \"https://upload.wikimedia.org/wikipedia/commons/a/ae/Nuclear_symbol.svg\",\n    x = 1994,\n    y = 107,\n    width = 0.07,\n    stat = \"unique\"\n  )+\n  with_outer_glow(\n    geom_col(fill = \"#fefb8c\"),\n    colour = \"#cb3200\",\n    sigma = 60\n  )+\n  scale_y_continuous(\n    expand = expansion(mult = c(0,0.05)),\n  )+\n  labs(\n    title = \"Number of nuclear weapons tests by the United States\",\n    caption = \"Bruno Mioto @BrunoHMioto - data: Arms Control Association (2020)\"\n  )+\n  theme_grey(base_family = \"Open Sans\")+\n  theme(\n    plot.margin = margin(10,10,10,10,\"pt\"),\n    plot.title.position = \"plot\",\n    plot.title = element_text(face = \"bold\", \n                              size = 16,\n                              color = \"white\"),\n    plot.caption = element_text(color = \"white\"),\n    plot.background = element_rect(fill = \"#171515\", color = NA),\n    panel.background = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_line(color = \"#cbcbc2\"),\n    panel.grid.minor.y = element_line(color = \"#cbcbc2\",\n                                      linetype = \"dashed\"),\n    axis.ticks = element_blank(),\n    axis.text = element_text(color = \"white\",\n                             face = \"bold\"),\n    axis.text.y = element_text(size = 10),\n    axis.title = element_blank()\n  )+\n  coord_cartesian(xlim = c(1945, 1993),\n                  ylim = c(0,100),\n                  clip = \"off\")\n\n# save --------------------------------------------------------------------\n\nggsave(\"figures/us_nuclear_tests.png\", width = 8, height = 6, dpi = 600)"
  },
  {
    "objectID": "scripts.html#nfl-charts",
    "href": "scripts.html#nfl-charts",
    "title": "Scripts",
    "section": "NFL Charts 🏈",
    "text": "NFL Charts 🏈\n\nBlack Quarterbacks ✊\n\n\n\nCode - Click to view\n# packages ----------------------------------------------------------------\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(ggtext)\n\n# data --------------------------------------------------------------------\n\ndata &lt;- tibble(\n  name = c(\n    \"Doug Williams\", \"Steve McNair\", \"Donovan McNabb\",\n    \"Colin Kaepernick\", \"Russell Wilson\", \"Russell Wilson\",\n    \"Cam Newton\", \"Patrick Mahomes\", \"Patrick Mahomes\",\n    \"Patrick Mahomes\", \"Patrick Mahomes\",\"Jalen Hurts\",\n    \"Patrick Mahomes\", \"Jalen Hurts\"\n  ),\n  superbowl = c(\n    22, 34, 39,\n    47, 48, 49,\n    50, 54, 55,\n    57, 58, 57,\n    59, 59\n  ),\n  team = c(\n    \"Washington Redskins\", \"Tennessee Titans\", \"Philadelphia Eagles\",\n    \"San Francisco 49ers\", \"Seattle Seahawks\", \"Seattle Seahawks\",\n    \"Carolina Panthers\", \"Kansas City Chiefs\", \"Kansas City Chiefs\",\n    \"Kansas City Chiefs\", \"Kansas City Chiefs\",\"Philadelphia Eagles\",\n    \"Kansas City Chiefs\", \"Philadelphia Eagles\"\n  ),\n  conference = c(\n    \"NFC\",\"AFC\",\"NFC\",\n    \"NFC\",\"NFC\",\"NFC\",\n    \"NFC\",\"AFC\",\"AFC\",\n    \"AFC\",\"AFC\",\"NFC\",\n    \"AFC\",\"NFC\"\n  ),\n  black = c(\n    TRUE, TRUE, TRUE,\n    TRUE, TRUE, TRUE,\n    TRUE, TRUE, TRUE,\n    TRUE, TRUE, TRUE,\n    TRUE, TRUE\n    ),\n  win = c(\n    TRUE, FALSE, FALSE,\n    FALSE, TRUE, FALSE,\n    FALSE, TRUE, FALSE,\n    TRUE, TRUE, FALSE,\n    FALSE, FALSE\n    )\n)\n\n\ndata2 &lt;- tibble(\n  superbowl = rep(1:58, 2),\n  name = NA,\n  team = NA,\n  conference = NA,\n  black = FALSE,\n  win = NA\n) |&gt;\n  bind_rows(data) |&gt;\n  arrange(superbowl, name) |&gt;\n  group_by(superbowl) |&gt;\n  slice_head(n = 2) |&gt;\n  mutate(\n    conference = case_when(\n      !is.na(conference) ~ conference,\n      any(conference == \"NFC\", na.rm = TRUE) ~ \"AFC\",\n      any(conference == \"AFC\", na.rm = TRUE) ~ \"NFC\",\n      TRUE ~ ifelse(row_number() == 1, \"AFC\", \"NFC\")\n    )\n  )\n\n\n\n# plot --------------------------------------------------------------------\n\ndata2 |&gt;\n  ggplot(aes(x = superbowl, y = conference))+\n  #1st black qb\n  annotate(\n    \"segment\",\n    x = 22,\n    xend = 22,\n    y = 2,\n    yend = 2.15,\n    color = \"black\"\n  )+\n  geom_richtext(\n    x = 22,\n    y = 2.4,\n    label = \"&lt;b&gt;Doug Williams&lt;/b&gt; was the 1&lt;sup&gt;st&lt;/sup&gt;&lt;br&gt;Black QB to start a SB\",\n    lineheight = 0.8,\n    fill = NA, label.color = NA,\n    inherit.aes = FALSE,\n    stat = \"unique\"\n  )+\n  #2nd qb to win\n  annotate(\n    \"curve\",\n    x = 48,\n    y = 2,\n    xend = 46,\n    yend = 2.4,\n    curvature = 0.45\n  )+\n  geom_richtext(\n    x = 41,\n    y = 2.4,\n    label = \"&lt;b&gt;R. Wilson&lt;/b&gt; was the 2&lt;sup&gt;nd&lt;/sup&gt;&lt;br&gt;Black QB to win a SB\",\n    lineheight = 0.8,\n    fill = NA, label.color = NA,\n    inherit.aes = FALSE,\n    stat = \"unique\"\n  )+\n  #3rd black qb to win\n  annotate(\n    \"curve\",\n    x = 54,\n    y = 1,\n    xend = 52,\n    yend = 0.6,\n    curvature = -0.45\n  )+\n  geom_richtext(\n    x = 45.5,\n    y = 0.6,\n    label = \"&lt;b&gt;P. Mahomes&lt;/b&gt; was only the 3&lt;sup&gt;rd&lt;/sup&gt;&lt;br&gt;Black QB to win a Super Bowl\",\n    lineheight = 0.8,\n    fill = NA, label.color = NA,\n    inherit.aes = FALSE,\n    stat = \"unique\"\n  )+\n  #1st and 2nd both black qbs\n  annotate(\n    \"rect\",\n    xmin = 56.5,\n    xmax = 57.5,\n    ymin = 0.85,\n    ymax = 2.15,\n    alpha = 0.3\n  )+\n  annotate(\n    \"text\",\n    x = 58,\n    y = 2.4,\n    label = \"Only Super Bowls with\\nboth Black starting QBs\",\n    lineheight = 0.8\n  )+\n  #2nd both black qbs\n  annotate(\n    \"rect\",\n    xmin = 58.5,\n    xmax = 59.5,\n    ymin = 0.85,\n    ymax = 2.15,\n    alpha = 0.3\n  )+\n  #SB 59\n  annotate(\n    \"segment\",\n    x = 59,\n    y = c(1,2),\n    xend = 59.8,\n    yend = c(1,2)\n  )+\n  annotate(\n    \"text\",\n    x = 60,\n    y = c(1,2),\n    hjust = 0,\n    label = c(\"P. Mahomes\",\"J. Hurts\"),\n    lineheight = 0.8,\n    fontface = \"bold\"\n  )+\n  #plot\n  geom_point(\n    aes(fill = black,\n        color = win),\n    shape = 21,\n    size = 4,\n    stroke = 0.7\n  )+\n  annotate(\n    \"text\",\n    x = 0,\n    y = c(1,2,1.5),\n    label = c(\"AFC\",\"NFC\",\"Super Bowl\"),\n    fontface = \"bold\",\n    hjust = 1\n  )+\n  annotate(\n    \"text\",\n    x = c(1,seq(5,55,5),59),\n    y = 1.5,\n    label = c(1,seq(5,55,5),59),\n    fontface = \"bold\"\n  )+\n  annotate(\n    \"text\",\n    x = c(1,seq(5,55,5),59),\n    y = 1.25,\n    label = \"|\",\n  )+\n  annotate(\n    \"text\",\n    x = c(1,seq(5,55,5),59),\n    y = 1.75,\n    label = \"|\",\n  )+\n  scale_fill_manual(\n    values = c(\n      \"TRUE\" = \"#0A90C5\",\n      \"FALSE\" = \"#FC670D\"\n    )\n  )+\n  scale_color_manual(\n    values = c(\n      \"TRUE\" = \"black\",\n      \"FALSE\" = \"transparent\"\n    ),na.value = \"transparent\"\n  )+\n  scale_y_discrete()+\n  labs(\n    title = \"Breaking Barriers: A New Era for Black Quarterbacks in the Super Bowl\",\n    subtitle = \"Representation matters, just let them play\",\n    caption = \"Data: Wikipedia - Made by Bruno Mioto - www.brunomioto.com\"\n  )+\n  theme_void()+\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(fill = \"#f1f1f1\",color = NA),\n    plot.caption = element_text(hjust = 0),\n    plot.margin = margin(5,5,10,10,\"pt\"),\n    plot.title = element_text(face = \"bold\")\n  )+\n  coord_cartesian(\n    xlim = c(-2.5,63)\n  )\n\nggsave(\"figures/plot_black_qbs.png\", width = 12, height = 2.7, dpi = 1200)\n\n\n\n\nTime to throw ⏱️\n\n\n\nCode - Click to view\n# packages ----------------------------------------------------------------\n\nlibrary(nflreadr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(nflplotR)\nlibrary(ggh4x)\nlibrary(ggbeeswarm)\n\n# data --------------------------------------------------------------------\n\ntt &lt;- nflreadr::load_nextgen_stats(stat_type = \"passing\",seasons = 2022) %&gt;%\n  mutate(team_abbr = ifelse(team_abbr == \"LAR\", \"LA\", team_abbr))\n\n\ntt_qbs &lt;- tt %&gt;%\n  filter(week == 0) %&gt;%\n  group_by(team_abbr) %&gt;%\n  arrange(desc(attempts)) %&gt;%\n  slice_head() %&gt;%\n  select(player_display_name, team_abbr, player_gsis_id) %&gt;%\n  ungroup()\n\ntt_top &lt;- tt %&gt;%\n  filter(player_gsis_id %in% tt_qbs$player_gsis_id,\n         (player_display_name != \"Baker Mayfield\" | team_abbr != \"CAR\")\n         )\n\ntt_avg &lt;- tt %&gt;%\n  summarise(avg = mean(avg_time_to_throw))\n\ntt_all &lt;- nflreadr::load_nextgen_stats(stat_type = \"passing\", seasons = 2016:2022) %&gt;%\n  mutate(team_abbr = ifelse(team_abbr == \"LAR\", \"LA\", team_abbr))\n\ntt_all2 &lt;- tt_all %&gt;%\n  filter(player_gsis_id %in% tt_top$player_gsis_id,\n         week != 0) %&gt;%\n  group_by(player_gsis_id) %&gt;%\n  arrange(desc(season)) %&gt;%\n  mutate(team_abbr = ifelse(season == 2022, team_abbr, NA)) %&gt;%\n  tidyr::fill(team_abbr) %&gt;%\n  filter(season != 2022) %&gt;%\n  ungroup() %&gt;%\n  add_row(team_abbr = \"PIT\")\n\n\ntt_top$team_abbr2 &lt;- nfl_team_factor(tt_top$team_abbr)\ntt_all2$team_abbr2 &lt;- nfl_team_factor(tt_all2$team_abbr)\n\n\nlabel_names &lt;- c(\n  \"MIA\" = \"Tua Tagovailoa\",\n  \"LV\" = \"Derek Carr\",\n  \"NYJ\" = \"Zach Wilson\",\n  \"NYG\" = \"Daniel Jones\",\n  \"BUF\" = \"Josh Allen\",\n  \"DAL\" = \"Dak Prescott\",\n  \"SF\" = \"Jimmy Garoppolo\",\n  \"PIT\" = \"Kenny Pickett\",\n  \"TEN\" = \"Ryan Tannehill\",\n  \"PHI\" = \"Jalen Hurts\",\n  \"ARI\" = \"Kyler Murray\",\n  \"CAR\" = 'Sam Darnold',\n  \"HOU\" = \"Davis Mills\",\n  \"NE\" = \"Mac Jones\",\n  \"LAC\" = \"Justin Herbert\",\n  \"BAL\" = \"Lamar Jackson\",\n  \"IND\" = \"Matt Ryan\",\n  \"MIN\" = \"Kirk Cousins\",\n  \"JAX\" = \"Trevor Lawrence\",\n  \"SEA\" = \"Geno Smith\",\n  \"WAS\" = \"Carson Wentz\",\n  \"LA\" = \"Baker Mayfield\",\n  \"KC\" = \"Patrick Mahomes\",\n  \"GB\" = \"Aaron Rodgers\",\n  \"TB\" = \"Tom Brady\",\n  \"CLE\" = \"Jacoby Brissett\",\n  \"NO\" = \"Andy Dalton\",\n  \"ATL\" = \"Marcus Mariota\",\n  \"CHI\" = \"Justin Fields\",\n  \"DEN\" = \"Russell Wilson\",\n  \"DET\" = \"Jared Goff\",\n  \"CIN\" = \"Joe Burrow\"\n\n)\n\n# plot --------------------------------------------------------------------\n\ng &lt;- tt_top %&gt;%\n  ggplot(aes(x = avg_time_to_throw, y = player_display_name))+\n  nflplotR::geom_nfl_logos(aes(team_abbr = team_abbr2), width = 0.4,\n                           stat = \"unique\",\n                           alpha = 0.2,\n                           x = 3.7, y = 1)+\n  geom_beeswarm(data = tt_all2 %&gt;% filter(week != 0),\n                size = 2.8,\n                alpha = 0.2,\n                shape = 16,\n                cex= 4,\n                priority='random',\n                color = \"grey50\")+\n  geom_vline(data = tt_avg,\n             aes(xintercept = avg),\n             color = \"#0570b0\",\n             linetype = \"dashed\")+\n  geom_vline(data = . %&gt;% filter(week == 0),\n             aes(xintercept = avg_time_to_throw))+\n  geom_beeswarm(data = . %&gt;% filter(week != 0),\n                size = 2.5,\n                cex=4,\n                priority='random',\n                shape = 21,\n                aes(color = team_abbr2,\n                    fill = team_abbr2))+\n  geom_text(data = . %&gt;% filter(week == 0),\n            x = 1.9, y = 1.4,\n            hjust = 0,\n            family = \"Open Sans\",\n            aes(label = paste0(scales::number(avg_time_to_throw,accuracy = 0.01),\" s\")))+\n  scale_color_nfl(type = \"secondary\")+\n  scale_fill_nfl(type = \"primary\")+\n  facet_wrap2(team_abbr2~.,\n              labeller = as_labeller(label_names),\n              scales = \"free_y\",\n              axes = \"x\",\n              remove_labels = \"x\",\n              ncol = 4)+\n  labs(\n    title = \"Average time to throw for each QB - 2022 Regular season\",\n    subtitle = glue::glue(\"Current season highlighted - QB with most attempts per team. NFL 2022 season average ({round(tt_avg$avg,2)} sec) in blue.\"),\n    caption = \"Bruno Mioto @BrunoHMioto - Data: Next Gen Stats with nflreadr\"\n  )+\n  theme_classic()+\n  theme(\n    text = element_text(family = \"Open Sans\"),\n    plot.title.position = \"plot\",\n    plot.title = element_text(face = \"bold\", size = 18),\n    plot.subtitle = element_text(face = \"bold\"),\n    axis.text.x = element_text(face = \"bold\"),\n    axis.text.y = element_blank(),\n    axis.title = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.ticks.x = element_line(color = \"black\", size = 0.8),\n    axis.line.y = element_blank(),\n    axis.line.x = element_line(size = 0.8),\n    panel.grid.major.x = element_line(),\n    plot.background = element_rect(fill = \"#f0f0f0\"),\n    strip.background = element_blank(),\n    strip.text = element_text(face = \"bold\", size = 10)\n  )\n\n\nggsave(plot = g, \"ttt_2022_season_logo.png\", width = 9, height = 9)\n\n\n\n\nPlayers by draft round 🎟️\n\n\n\nCode - Click to view\n# packages ----------------------------------------------------------------\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(nflplotR)\nlibrary(nflfastR)\nlibrary(ggchicklet)\nlibrary(ggh4x)\n\n# data --------------------------------------------------------------------\n\nurl &lt;- \"https://raw.githubusercontent.com/ajreinhard/NFL-public/main/misc-data/2013_to_2022_init53.csv\"\n\nrosters &lt;- read_csv(url)\n\nroster_2022 &lt;- rosters %&gt;% \n  filter(season == 2022) %&gt;% \n  mutate(draft_rnd = ifelse(draft_type == \"Undrafted\",\"UFA\",draft_rnd))\n\nround_players &lt;- roster_2022 %&gt;% \n  count(team, draft_rnd) %&gt;% \n  left_join(nflfastR::teams_colors_logos,\n          by = c(\"team\" = \"team_abbr\"))\n\n\nround_players$team &lt;- nfl_team_factor(round_players$team)\n\nround_players$team_division &lt;- factor(round_players$team_division,\n                                      levels = c(\"AFC West\",\"AFC North\",\"AFC South\",\"AFC East\",\n                                                 \"NFC West\",\"NFC North\",\"NFC South\",\"NFC East\"))\n\nround_players$draft_rnd &lt;- factor(round_players$draft_rnd,\n       levels = c(\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"UFA\"))\n\n# plot --------------------------------------------------------------------\n\nround_players %&gt;% \n  ggplot(aes(x = team, y = n, fill = draft_rnd))+\n  geom_chicklet()+\n  geom_text(position = position_stack(vjust = 0.5,reverse = TRUE),\n            aes(label = ifelse(n &gt; 2, n, \"\")),\n            color = \"white\")+\n  facet_wrap2(~team_division, ncol = 4, scales = \"free_y\", axes = \"all\")+\n  scale_y_continuous(breaks = seq(0,50,10),\n                     expand = c(0,0))+\n  scale_fill_manual(\n    values = c('#dc3913',\n               '#3366cc',\n               '#0f9618',\n               '#992299',\n               '#0099c6',\n               '#dd4477',\n               '#e67300',\n               '#737373')\n  )+\n  labs(\n    title = \"Number of players of each team by draft round in the 2022 season\",\n    fill = \"Draft round\",\n    caption = \"Bruno Mioto @BrunoHMioto - Data: TheFootballDB by @reinhurdler\"\n  )+\n  guides(fill = guide_legend(nrow = 1,\n                             label.position = \"bottom\"))+\n  theme_minimal()+\n  theme(\n    plot.title = element_text(size = rel(1.5), face = \"bold\"),\n    plot.title.position = \"plot\",\n    plot.background = element_rect(fill = \"white\", color = NA),\n    plot.margin = margin(15,15,15,15,unit = \"pt\"),\n    legend.title = element_text(face = \"bold\"),\n    axis.text.y = element_nfl_logo(size = 0.7),\n    axis.title = element_blank(),\n    legend.position = \"top\",\n    legend.spacing.x = unit(0.1, 'cm'),\n    legend.spacing.y = unit(0, 'cm'),\n    legend.key.height =  unit(1, \"cm\"),\n    legend.box.margin = margin(-5,0,-10,0,unit = \"pt\"),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.x = element_line(color = \"#999999\"),\n    strip.text = element_text(size = rel(1.2),\n                              face = \"bold\"),\n    text = element_text(family = \"Open Sans\")\n  )+\n  coord_flip()\n\nggsave(\"rnd_players_2022.png\", width = 10, height = 6)\n\n\n\n\nEarly-Late downs QBs slope 🚀\n\n\n\nCode - Click to view\n# packages ----------------------------------------------------------------\n\nlibrary(nflreadr)\nlibrary(nflplotR)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(tidyr)\nlibrary(ggtext)\n\n# data --------------------------------------------------------------------\n\npbp &lt;- load_pbp(seasons = 2022)\nrosters &lt;- load_rosters(2022)\n\nsnap_counts &lt;- nflreadr::load_snap_counts()\n\nsnap_counts_topQB &lt;- snap_counts %&gt;%\n  filter(position == \"QB\") %&gt;%\n  group_by(team, player, pfr_player_id) %&gt;%\n  summarise(total_off_snaps = sum(offense_snaps)) %&gt;%\n  filter(!pfr_player_id %in% c(\"RushCo00\")) %&gt;%\n  group_by(team) %&gt;%\n  arrange(desc(total_off_snaps)) %&gt;%\n  slice_head()\n\nqb_active &lt;- rosters %&gt;%\n  filter((pfr_id %in% c(snap_counts_topQB$pfr_player_id))|\n           gsis_id == \"00-0038102\" #Kenny Pickett\n  )\n\nQB_EPA &lt;- pbp %&gt;%\n  filter(!is.na(qb_epa),\n         passer_id %in% qb_active$gsis_id,\n         qb_dropback == 1,\n         down &lt;= 4\n  ) %&gt;%\n  mutate(down_type = ifelse(down %in% c(1,2), \"early\", \"late\")) %&gt;%\n  group_by(name, passer_id, posteam, season, down_type) %&gt;%\n  summarize(tot_epa = sum(qb_epa),\n            mean_epa = mean(qb_epa),\n            n = n()) %&gt;%\n  ungroup() %&gt;%\n  left_join(rosters, by = c(\"passer_id\" = \"gsis_id\"))\n\nQB_EPA_better &lt;- QB_EPA %&gt;%\n  select(-c(tot_epa,n)) %&gt;%\n  pivot_wider(\n    names_from = down_type,\n    values_from = mean_epa\n  ) %&gt;%\n  pull(name)\n\n# plot --------------------------------------------------------------------\n\nQB_EPA %&gt;%\n  ggplot(aes(x = down_type, y = mean_epa, color = posteam, group = posteam))+\n  annotate(\n    \"segment\",\n    x = -Inf, xend = 2,\n    y = seq(-0.4,0.8,0.2), yend = seq(-0.4,0.8,0.2),\n    color = \"#d1d1d1\",\n    linetype = \"dashed\",\n    linewidth = 0.4)+\n  geom_vline(xintercept = c(1,2))+\n  geom_line(data = . %&gt;% filter(!name %in% QB_EPA_better),\n            color = \"grey\")+\n  geom_point(data = . %&gt;% filter(!name %in% QB_EPA_better),\n             color = \"grey\",\n             shape = 21,\n             fill = \"white\")+\n  geom_text_repel(data = . %&gt;% filter(down_type == \"late\",\n                                      name %in% QB_EPA_better),\n                  aes(x = 2,\n                      label = last_name),\n                  nudge_x = 0.05,\n                  hjust = 0,\n                  direction = \"y\",\n                  min.segment.length = unit(8,\"pt\"),\n                  fontface = \"bold\",\n                  family = \"Open Sans\"\n  )+\n  geom_line(data = . %&gt;% filter(name %in% QB_EPA_better),\n            linewidth = 1)+\n  geom_point(data = . %&gt;% filter(name %in% QB_EPA_better),\n             shape = 21,\n             size = 2,\n             fill = \"white\")+\n  annotate(\n    \"text\",\n    x = 1.5, y =0.46, angle = 35,\n    label = \"Better on late downs\"\n  )+\n  annotate(\n    \"text\",\n    x = 1.5, y = -0.31, angle = -32,\n    label = \"Worse on late downs\",\n    color = \"grey\"\n  )+\n  scale_x_discrete(\n    expand = expansion(mult = c(0.2,0.4)),\n    labels = c(\n      \"Early Downs\\n(1st/2nd)\",\n      \"Late Downs\\n(3rd/4th)\"\n    )\n  )+\n  scale_y_continuous(\n    breaks = seq(-1,1,0.2)\n  )+\n  scale_color_nfl()+\n  labs(\n    title = \"&lt;span style='color:#E31837'&gt;Mahomes&lt;/span&gt; and &lt;span style='color:#008E97'&gt;Tua&lt;/span&gt; are another level for late downs\",\n    y = \"EPA/dropback\",\n    caption = \"Bruno Mioto @BrunoHMioto - data: @nflverse\"\n  )+\n  theme_minimal()+\n  theme(\n    text = element_text(family = \"Open Sans\"),\n    plot.title = element_markdown(size = 13, face = \"bold\"),\n    plot.title.position = \"plot\",\n    plot.background = element_rect(fill = \"#f1f1f1\", color = NA),\n    axis.title.x = element_blank(),\n    axis.text.x = element_text(face = \"bold\"),\n    panel.grid = element_blank()\n  )\n\nggsave(\"slope_early_late_downs.png\", width = 5, height = 6)\n\n\n\n\nMahomes Scale 📐\n\n\n\nCode - Click to view\n# packages ----------------------------------------------------------------\n\nlibrary(dplyr)\nlibrary(nflreadr)\nlibrary(nflplotR)\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(tidyr)\nlibrary(elementalist)\nlibrary(stringr)\nlibrary(scales)\n\n# data --------------------------------------------------------------------\n\npbp &lt;- nflreadr::load_pbp(seasons = c(2018:2022))\n\nQB_data &lt;- pbp %&gt;%\n  dplyr::filter(\n    !is.na(qb_epa),\n    qb_dropback == 1,\n    down &lt;= 4\n    ) %&gt;%\n  dplyr::mutate(down_var = ifelse(down &lt;= 2, \n                                  \"early\", \n                                  \"late\")\n                ) %&gt;% \n  dplyr::group_by(name, \n                  passer_id, \n                  posteam, \n                  down_var\n                  ) %&gt;% \n  dplyr::summarize(\n    mean_epa = mean(qb_epa),\n    n = n()\n    ) %&gt;% \n  dplyr::filter(n &gt;= 100) %&gt;% \n  tidyr::pivot_wider(\n    names_from = down_var,\n    values_from = c(mean_epa,n)\n    ) %&gt;% \n  dplyr::filter(\n    !is.na(mean_epa_early),\n    !is.na(mean_epa_late)\n    ) %&gt;% \n  dplyr::mutate(\n    n_combined = n_early+n_late,\n    name = stringr::str_extract(name, \"(?&lt;=\\\\.).*\")\n    )\n\n# plot --------------------------------------------------------------------\n\n# to ggrepel with bubble size work\nmy_pal &lt;- function(range = c(1,6)) {\n  force(range)\n  function(x) scales::rescale(x, to = range, from = c(0, 1))\n}\n\nQB_data %&gt;% \n  ggplot(aes(x = mean_epa_early, y = mean_epa_late))+\n  geom_hline(yintercept = 0, linetype = \"dashed\",\n             color = \"grey30\")+\n  geom_vline(xintercept = 0, linetype = \"dashed\",\n             color = \"grey30\")+\n  geom_path(aes(x = c(0:0.1), y = c(0:0.2)),\n            color = \"blue\")+\n  geom_point(aes(fill = posteam, color = posteam, \n                 size = n_combined),\n             shape = 21)+\n  continuous_scale(\n    aesthetics = c(\"size\", \"point.size\"), scale_name = \"size\",\n    palette = my_pal(c(2,6)),\n    guide = guide_legend(override.aes = list(label = \"\")) # hide \"a\" in legend\n  ) +\n  geom_text_repel(aes(label = name,\n                      point.size = n_combined,\n                      fontface = ifelse(name == \"Mahomes\", \"bold\", \"plain\")),max.time = 5,\n                  max.overlaps = 7)+\n  scale_x_continuous(breaks = seq(-0.5,0.5,0.1),\n                     limits = c(-0.02,NA))+\n  scale_y_continuous(breaks = seq(-0.5,0.5,0.1),\n                     limits = c(-0.21,NA))+\n  scale_fill_nfl(\"primary\")+\n  scale_color_nfl(\"secondary\")+\n  labs(\n    title = \"Introducing the Mahomes Scale\",\n    subtitle = \"For players breaking records and charts (2018-2022 min. 100 dropbacks)\",\n    caption = \"Bruno Mioto @BrunoHMioto - data: nflfastR\",\n    x = \"EPA/Play on early downs (1st&2nd)\",\n    y = \"EPA/Play on late downs (3rd&4th)\"\n  )+\n  theme_classic()+\n  theme(\n    text = element_text(family = \"Open Sans\"),\n    axis.line = element_line(linewidth = 1),\n    axis.line.x = element_line_multicolour(c(\"black\", \"black\", \"black\",\"black\",\"black\",\"black\", \"#E31837\"),\n                                           size = 1),\n    axis.line.y = element_line_multicolour(c(\"black\", \"black\", \"#E31837\", \"#E31837\"),\n                                           size = 1),\n    axis.text = element_text(face = \"bold\", color = \"black\"),\n    axis.text.y = element_text(color = c(rep(\"black\",4),\"#d02138\",\"#e31d3b\",\"#E31837\")),\n    axis.ticks.y = element_line(color = c(rep(\"black\",4),\"#d02138\",\"#e31d3b\",\"#E31837\")),\n    axis.ticks.x = element_line(color = \"black\"),\n    axis.title = element_text(face = \"bold\"),\n    panel.grid.major.x = element_line(color = \"#dddddd\"),\n    panel.grid.major.y = element_line(color = c(\"#E3A3AD\",\"#E38A98\",\"#E36679\",\"#dddddd\",\"#dddddd\",\"#dddddd\", \"#dddddd\")),\n    plot.title = element_text(face = \"bold\", size = 18),\n    plot.title.position = \"plot\",\n    plot.background = element_rect(fill = \"#f1f1f1\", color = NA),\n    panel.background = element_rect(fill = NA, color = NA),\n    legend.position = \"none\"\n  )+\n  coord_cartesian(xlim = c(-0.02,NA),\n                  ylim = c(-0.2,NA))\n\n\nggsave(\"figures/mahomes_scale.png\", width = 8, height = 6.5)\n\n\n\n\nEPA&CPOE Scatterplot 💫\n\n\n\nCode - Click to view\n# packages ----------------------------------------------------------------\n\nlibrary(dplyr)\nlibrary(nflreadr)\nlibrary(nflplotR)\nlibrary(ggplot2)\nlibrary(ggdensity)\nlibrary(ggforce)\nlibrary(ggrepel)\nlibrary(ggtext)\nlibrary(ggthemes)\n\n# data --------------------------------------------------------------------\n\npbp_2006_2009 &lt;- progressr::with_progress(load_pbp(seasons = 2006:2009))\n\npbp_2010_2022 &lt;- progressr::with_progress(load_pbp(seasons = 2010:2022))\n\npbp_all &lt;- pbp_2006_2009 %&gt;% \n  bind_rows(pbp_2010_2022)\n\nplayers &lt;- load_players()\n\npasserID &lt;- \"00-0033873\" #P. Mahomes\n\nQB_CPOE &lt;- pbp_all %&gt;% \n  filter(!is.na(cpoe),\n         !is.na(passer_id),\n         down &lt;= 4,\n         game_half != \"Overtime\") %&gt;% \n  group_by(game_id, game_half, passer_id) %&gt;% \n  mutate(rows = n()) %&gt;% \n  filter(rows &gt;= 5) %&gt;% \n  ungroup() %&gt;% \n  group_by(game_id, game_half, passer_id) %&gt;% \n  summarize(cmp = mean(complete_pass),\n            mean_cpe = mean(cp, na.rm = TRUE),\n            mean_cpoe = mean(cpoe, na.rm = TRUE))\n\n\nQB_EPA &lt;- pbp_all %&gt;%\n  filter(!is.na(qb_epa),\n         !is.na(passer_id),\n         rush == 1 | pass == 1,\n         down &lt;= 4,\n         game_half != \"Overtime\"\n  ) %&gt;%\n  group_by(game_id,game_half, passer_id) %&gt;% \n  mutate(rows = n()) %&gt;% \n  filter(rows &gt;= 5) %&gt;% \n  ungroup() %&gt;% \n  group_by(game_id, passer_id,game_half, posteam, defteam, season, week, game_date) %&gt;% \n  summarize(tot_epa = sum(qb_epa),\n            mean_epa = mean(qb_epa)) \n\n\nlast_game &lt;- QB_EPA %&gt;% \n  filter(passer_id %in% passerID) %&gt;% \n  tail(2)\n\n\n\nall_epa_cpoe &lt;- QB_EPA %&gt;% \n  left_join(QB_CPOE) %&gt;% \n  filter(!is.na(cmp))\n\nggplot(all_epa_cpoe, aes(x=mean_cpoe, y=mean_epa))+\n  geom_hdr(method = \"mvnorm\")+\n  geom_vline(xintercept = 0, color = \"#F0F0F0\")+\n  geom_hline(yintercept = 0, color = \"#F0F0F0\")+\n  geom_vline(xintercept = 0, linetype = \"dashed\", color = \"#333333\")+\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"#333333\")+\n  #career\n  geom_point(data = all_epa_cpoe %&gt;% \n               filter(passer_id %in% passerID),\n             fill = \"#F0F0F0\",\n             color = \"black\",\n             shape = 21,\n             size=4,\n             alpha = 0.8)+\n  #text\n  geom_text_repel(data = all_epa_cpoe %&gt;% \n                    filter(passer_id %in% passerID),\n                  size = 5, \n                  box.padding = 1.2,\n                  min.segment.length = 0,\n                  segment.curvature = -0.1,\n                  segment.ncp = 3,\n                  #segment.angle = 20,\n                  segment.size = 0.8,\n                  force = 3,\n                  force_pull = 0.2,\n                  max.overlaps = Inf,\n                  #max.time = 5,max.iter = 1000000,\n                  lineheight = 0.8,\n                  bg.color = \"#fafafa\",\n                  aes(label = ifelse(game_id %in% last_game$game_id &\n                                       game_half == \"Half1\",\n                                     #glue::glue(\"1st Half\\nvs. {last_game$defteam}\"),\n                                     \"\",\n                                     ifelse(game_id %in% last_game$game_id &\n                                              game_half == \"Half2\",\n                                            glue::glue(\"2nd Half\\nSB LVII\"),\"\")))\n  )+\n  #text\n  geom_text_repel(data = all_epa_cpoe %&gt;% \n                    filter(passer_id %in% passerID),\n                  #x = -7, y = 0.75,\n                  xlim = -13,\n                  ylim = 0.6,\n                  size = 5, \n                  box.padding = 1.2,\n                  min.segment.length = 0,\n                  segment.curvature = 0.1,\n                  segment.ncp = 2,\n                  segment.angle = 30,\n                  segment.size = 0.8,\n                  force = 3,\n                  force_pull = 0.2,\n                  max.overlaps = Inf,\n                  #max.time = 5,max.iter = 1000000,\n                  lineheight = 0.8,\n                  bg.color = \"#fafafa\",\n                  aes(label = ifelse(game_id %in% last_game$game_id &\n                                       game_half == \"Half1\",\n                                     glue::glue(\"1st Half\\nSB LVII\"),\n                                     \"\"))\n  )+\n  #this season\n  geom_point(data = all_epa_cpoe %&gt;% \n               filter(passer_id %in% passerID &\n                        season == 2022),\n             aes(fill = posteam),\n             color = \"white\",\n             shape = 21,\n             size=4)+\n  #last game\n  geom_point(data = all_epa_cpoe %&gt;% \n               filter(passer_id %in% passerID &\n                        game_id %in% last_game$game_id),\n             aes(fill = posteam),\n             color = \"black\",\n             show.legend = FALSE,\n             shape = 21,\n             size=4,\n             stroke = 1.2)+\n  #annotate 1.5-1.5 -35-35\n  annotate(geom = \"text\",\n         x = 21, y = -1.17,\n         label = \"Passing accuracy\")+\n  annotate(geom = \"segment\",\n           size = 1,\n           x = 13, y = -1.25, xend = 30, yend = -1.25,\n           arrow = arrow(length = unit(0.5, \"cm\")),\n           lineend = \"round\",\n           linejoin = \"round\")+\n  annotate(geom = \"text\",\n           angle = 90,\n           x = -32.5, y = 0.85,\n           label = \"Scoring efficiency\")+\n  annotate(geom = \"segment\",\n           size = 1,\n           x = -34, y = 0.55, xend = -34, yend = 1.3,\n           arrow = arrow(length = unit(0.5, \"cm\")),\n           lineend = \"round\",\n           linejoin = \"round\")+\n  scale_fill_nfl()+\n  #scale_color_identity()+\n  guides(alpha = guide_legend(reverse = TRUE))+\n  labs(#title = glue::glue(\"EPA/play and CPOE in half games of {last_game$full_name}&lt;br&gt; career and &lt;span style='color:{last_game$team_color}'&gt;2022 season&lt;/span&gt;\"),\n      title = \"EPA/play and CPOE in half games of Patrick Mahomes&lt;br&gt;career and &lt;span style='color:#E31837'&gt;2022 season&lt;/span&gt;\", \n      subtitle = \"NFL QB games from 2006 to 2022 season\",\n       y = \"Expected Points Added per play (EPA/Play)\",\n       x = \"Completion % over expected (CPOE)\",\n       alpha = \"NFL QB games density\",\n       caption = \"Bruno Mioto @BrunoHMioto - Data: nflfastR\")+\n  theme_classic()+\n  theme(\n    text = element_text(family = \"Open Sans\"),\n    strip.text = element_text(face = \"bold\"),\n    axis.text = element_text(face = \"bold\"),\n    axis.title = element_text(face = \"bold\"),\n    axis.ticks = element_blank(),\n    axis.line = element_blank(),\n    plot.title = element_markdown(size = 20, face = \"bold\", color = \"#3c3c3c\"),\n    plot.subtitle = element_text(size = 12),\n    plot.title.position = \"plot\",\n    plot.margin = margin(15,15,15,15,\"pt\"),\n    legend.position = \"top\",\n    panel.grid.major = element_line(),\n    plot.background = element_rect(fill = \"#fafafa\"),\n    panel.background = element_rect(fill = \"#fafafa\"),\n    legend.background = element_rect(fill = \"#fafafa\"),\n  )+\n  coord_cartesian(ylim = c(-1.3, 1.3),\n                  xlim = c(-35, 35),\n                  clip = \"off\")\n\n\nggsave(filename = \"CPOE&EPA_P_Mahomes_SB_2022_2.png\",\n       #filename = glue::glue(\"CPOE&EPA_{last_game$full_name}_{last_game$game_id}_bengals_games.png\"),\n       width = 8,\n       height = 8)"
  },
  {
    "objectID": "curriculum.html",
    "href": "curriculum.html",
    "title": "curriculum",
    "section": "",
    "text": "Hello World! Please read my Closeread story below.\n\n\n\n\nDraw your readers attention with focus effects.\n\n\n\n\nWhen this paragraph scrolls into view it will reveal a histogram.\n\n\n\n\nWhen this paragraph scrolls into view it will reveal a histogram.\n\n\n\n\npan-to=“0%, -50%” scale-by=“2”\n\n\n\n\npan-to=“0%, 0%” scale-by=“2”\n\n\n\n\npan-to=“0%, 0%” scale-by=“3”\n\n\n\n\npan-to=“0%, 0%” scale-by=“4”\n\n\n\n\npan-to=“0%, 0%” scale-by=“5”\n\n\n\n\npan-to=“0%, 0%” scale-by=“5”\n\n\n\n\ntexto texto\n\n\n\n\ntexto\n\n\n\n\ntexto\n\n\n\n\n\n\n\nHighlighting\nZooming\nPanning"
  },
  {
    "objectID": "portfolio.html",
    "href": "portfolio.html",
    "title": "Portfolio",
    "section": "",
    "text": "During all these years adventuring with data, science and design, I’ve been able to turn my ideas into reality. Currently I’m looking for an opportunity to work as Data Analyst!\nFirst of all, this entire website was made by me using R, Quarto and HTML!\nFollow me on my social networks and see what I’ve been up to over the last few years!"
  },
  {
    "objectID": "portfolio.html#tutorials",
    "href": "portfolio.html#tutorials",
    "title": "Portfolio",
    "section": "Tutorials",
    "text": "Tutorials\nAlmost everything I know today about programming I learned from tutorials, so I really enjoy passing on this knowledge to people, teaching them about the process of creating charts and other tools.\n\n  \n    \n    ggplot2 101\n  \n\n  \n    \n    Waterlines with ggplot2\n  \n\n  \n    \n    Decifrando gráficos #1\n  \n\n  \n    \n    Decifrando gráficos #2"
  },
  {
    "objectID": "portfolio.html#decifrando-gráficos",
    "href": "portfolio.html#decifrando-gráficos",
    "title": "Portfolio",
    "section": "Decifrando Gráficos",
    "text": "Decifrando Gráficos"
  },
  {
    "objectID": "portfolio.html#posts-in-english",
    "href": "portfolio.html#posts-in-english",
    "title": "Portfolio",
    "section": "Posts in English",
    "text": "Posts in English"
  },
  {
    "objectID": "portfolio.html#posts-em-português",
    "href": "portfolio.html#posts-em-português",
    "title": "Portfolio",
    "section": "Posts em Português",
    "text": "Posts em Português"
  },
  {
    "objectID": "portfolio.html#charts-with-ggplot2",
    "href": "portfolio.html#charts-with-ggplot2",
    "title": "Portfolio",
    "section": "Charts with ggplot2",
    "text": "Charts with ggplot2"
  },
  {
    "objectID": "portfolio.html#r-packages",
    "href": "portfolio.html#r-packages",
    "title": "Portfolio",
    "section": "R packages",
    "text": "R packages\nOne of my hobbies is creating packages in R! I’ve made new friends and greatly improved my code organization and git experience.\n\n    \n        reservatoriosBR\n        \n            \n        \n        \n            Download data of Brazilian reservoirs from the SAR-ANA and ONS platforms and organizes it into a structure for use in R!\n        \n    \n\n    \n        futebolplotR\n        \n            \n        \n        \n            The goal of futebolplotR is to provide functions and geoms that help creating visualization of Brazilian soccer related analysis.\n        \n    \n\n    \n        ggimprensa\n        \n            \n        \n        \n            ggimprensa brings themes from the main Brazilian newspapers for ggplot2.\n        \n    \n\n    \n        feowR\n        \n            \n        \n        \n            feowR provides a faster and secure way to download shapefiles of Freshwater Ecoregions of the World (FEOW).\n        \n    \n\n\n\n    \n        See more R packages!"
  },
  {
    "objectID": "portfolio.html#datawrapper",
    "href": "portfolio.html#datawrapper",
    "title": "Portfolio",
    "section": "Datawrapper",
    "text": "Datawrapper"
  },
  {
    "objectID": "portfolio.html#published-charts",
    "href": "portfolio.html#published-charts",
    "title": "Portfolio",
    "section": "Published charts",
    "text": "Published charts\nThese are some charts published in scientific papers.\n\n\n\nKieling et al. (2024) - Worldwide Prevalence and Disability From Mental Disorders Across Childhood and Adolescence Evidence From the Global Burden of Disease Study\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNakamura et al. (preprint) - The macroecology of knowledge: Spatio-temporal patterns of name-bearing types in biodiversity science\n\n\n\n\n\n\n\n\nMartins et al. (2024) - Iterative taxonomy reveals a new species of Cambeva (Siluriformes: Trichomycteridae) with intraspecific variation from the rio Piquiri and Ivaí basin, upper rio Paraná basin, Brazil"
  },
  {
    "objectID": "portfolio.html#original-charts",
    "href": "portfolio.html#original-charts",
    "title": "Portfolio",
    "section": "Original charts",
    "text": "Original charts\nAll the following charts and maps were made entirely using ggplot2/R.You can click on each plot to see each detail.\n\nThis is a play animation made for BigDataBowl ’24 Competition, the NFL Big Data competition!\n\n\nSeverance is an awesome series"
  },
  {
    "objectID": "portfolio.html#scripts",
    "href": "portfolio.html#scripts",
    "title": "Portfolio",
    "section": "Scripts",
    "text": "Scripts\nI love to share my scripts, so anyone can learn the same way I did!\nHere is an example\n\nBoa constrictor 🐍\n\n\n\nClick to view the code\n# packages ----------------------------------------------------------------\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(geomtextpath)\n\n# data --------------------------------------------------------------------\n\ndata &lt;- data.frame(a = c(2.8,2.8,3.8,2.9,2.8,3,4.5,5.6,5.7,4.4,5.8))\n\nquote &lt;- \"'My drawing was not a picture of a hat. It was a picture of a &lt;i&gt;Boa constrictor&lt;/i&gt; digesting an elephant.'\"\n\n# plot --------------------------------------------------------------------\n\ndata %&gt;% \n  ggplot(aes(x = a))+\n  geom_density(adjust = 1,\n               fill = \"#784707\",\n               color = \"#462e0a\",\n               size = 3)+\n  geom_textdensity(size = 5, fontface = 2, spacing = 30,\n                   vjust = -0.35, hjust = 0.2,\n                   label = quote,\n                   color = \"#462e0a\",\n                   rich = TRUE)+\n  geom_segment(x = -2.5, xend = 12, y = 0, yend = 0,\n               size = 3, color = \"#462e0a\",lineend = \"round\")+\n  geom_point(x = 11.95, y = 0.002, size = 0.5)+\n  annotate(\"text\", x = 12, y = 0, label = \"- The Little Prince by\\nAntoine de Saint-Exupéry\\nBruno Mioto - @BrunoHMioto\",\n           hjust = 1, vjust = 1.2, fontface = \"bold\",\n           color = \"#462e0a\")+\n  scale_y_continuous(expand = c(0,0))+\n  scale_x_continuous(limits = c(-2.5,12))+\n  theme_void()+\n  theme(\n    panel.background = element_rect(fill = \"#f7f8f8\", color = NA)\n  )+\n  coord_cartesian(ylim = c(-.4,0.8), xlim = c(-4,13))\n\n\nggsave(\"elephant.png\", width = 10, height = 6)\n\n\n\n    \n        See more Scripts!"
  },
  {
    "objectID": "portfolio.html#species-described",
    "href": "portfolio.html#species-described",
    "title": "Portfolio",
    "section": "Species described! 🐟",
    "text": "Species described! 🐟\nEven though it’s not data-related, I’m very proud to have described 3 species of fish (so far)! And yes, I’m “Stabile”, not “Mioto” in my scientific papers\n\nCharacidium dumonti Stabile, dos Reis, de Oliveira & da Graça 2025\n\n\n\nCharacidium itarare Stabile, dos Reis, Frota, da Graça & de Oliveira 2024\n\n\n\nCambeva perobana Martins, dos Reis, Stabile & da Graça 2024"
  },
  {
    "objectID": "portfolio.html#power-bi",
    "href": "portfolio.html#power-bi",
    "title": "Portfolio",
    "section": "Power BI",
    "text": "Power BI\nI made a dashboard for the 2020 Municipal Elections in my city using Power BI. (Unfortunately I no longer have the license and only have screenshots)"
  },
  {
    "objectID": "posts/decifrando_graficos/2_folha/index.html#como-isso-foi-feito",
    "href": "posts/decifrando_graficos/2_folha/index.html#como-isso-foi-feito",
    "title": "Decifrando gráficos #2",
    "section": "Como isso foi feito?",
    "text": "Como isso foi feito?\nTodo dia vemos gráficos nos jornais, mas nem sempre sabemos como eles foram feitos. De onde vieram os dados? Como foram tratados? E será que dá para recriá-los usando o R?\nNesta série, pegamos gráficos publicados nos principais jornais e recriamos do zero usando R, tidyverse e ggplot2. Vou mostrar como encontrar os dados, organizá-los e gerar visualizações que chegam o mais próximo possível do original – tudo de forma transparente e didática. Sim! Vamos fazer e aprender juntos!\nE tem mais: todo o código e dados utilizados estarão disponíveis e comentados (clique nos números abaixo de cada conjunto de código!). E por estarmos trabalhando com uma linguagem de programação, todos vão obter o mesmo resultado ao final do script.\nAcompanhe a série e veja como transformar dados brutos em visualizações incríveis!"
  },
  {
    "objectID": "posts/decifrando_graficos/2_folha/index.html#post-anterior",
    "href": "posts/decifrando_graficos/2_folha/index.html#post-anterior",
    "title": "Decifrando gráficos #2",
    "section": "Post anterior",
    "text": "Post anterior\nQuer ver o post anterior? Acesse abaixo\n\n\n\n\n\n  \n    \n    Decifrando gráficos #1"
  },
  {
    "objectID": "posts/decifrando_graficos/2_folha/index.html#pirâmide-etária-indígena-folha-de-são-paulo",
    "href": "posts/decifrando_graficos/2_folha/index.html#pirâmide-etária-indígena-folha-de-são-paulo",
    "title": "Decifrando gráficos #2",
    "section": "#2 - Pirâmide etária indígena (Folha de São Paulo)",
    "text": "#2 - Pirâmide etária indígena (Folha de São Paulo)\nDessa vez vamos analisar um gráfico publicado pela Folha de São Paulo com dados do Censo 2022: População indígena cresce no Norte, mas envelhece ao redor das cidades\n\nEu particularmente acho muito legal visualizar pirâmides etárias, como essa que fiz com o pessoal da Base dos Dados. Vamos fazer apenas o gráfico, já que as anotações geralmente são adicionadas na pós produção (p. ex. Illustrator) e deixaria este post muito extenso.\n\nObtendo os dados\nTodos os dados do Censo 2022 estão disponíveis na aba de Downloads do portal: https://censo2022.ibge.gov.br/panorama/downloads.html. Lá vamos acessar os resultados Quilombolas e Indígenas, por sexo e idade, segundo recortes territoriais específicos - Resultados do universo e então selecionamos População indígena, por localização do domicílio, grupos de idade e sexo.\nLogo nessa página vemos que os dados estão disponíveis através do SIDRA (Sistema IBGE de Recuperação Automática), que é basicamente uma plataforma que concentra todos os dados do IBGE! E o melhor: podemos acessar diretamente do R com o pacote {sidrar}!\nAntes de tudo, vamos carregar os pacotes necessários\n\nlibrary(sidrar) #baixar dados IBGE\nlibrary(janitor) #limpeza dos dados\nlibrary(dplyr) #manipulação dos dados\nlibrary(stringr) #trabalhar com strings/texto\nlibrary(ggplot2) #gráficos\n\nAgora só precisamos do número da tabela disponível no site (que é 8175) e rodar o código abaixo:\n\n#install.packages(\"sidrar\")\nlibrary(sidrar)\n\npop_ind &lt;- sidrar::get_sidra(8175)\n\nPronto, fácil assim já temos os dados do Censo para este gráfico!\n\n\nTrabalhando com os dados\nPois é, nossos dados sempre têm os nomes das variáveis com letras maiúsculas, espaços e acentos. Vamos padronizar para snake_casecom o pacote {janitor} e também selecionar apenas as variáveis necessárias para este gráfico. Vamos salvando cada passo em um novo objeto para ficar mais fácil de acompanhar.\n\npop_ind2 &lt;- pop_ind |&gt; \n  janitor::clean_names() |&gt; \n  dplyr::select(\n    variavel, \n    ano, \n    idade,\n    sexo, \n    localizacao_do_domicilio,\n    valor\n    )\n\nMas veja que temos um valor Total em idade, sexo e localizacao_do_domicilio. Não vamos precisar dos totais, então podemos removê-los.\n\npop_ind3 &lt;- pop_ind2 |&gt; \n  dplyr::filter(\n    idade != \"Total\",\n    sexo != \"Total\",\n    localizacao_do_domicilio != \"Total\"\n  )\n\nNessa tabela, temos as idades individuais, ou agrupadas a cada 5 anos. Vamos selecionar apenas as linhas com as idades agrupadas.\n\npop_ind4 &lt;- pop_ind3 |&gt; \n  filter(\n      idade %in% c(\n        \"0 a 4 anos\",\n        \"5 a 9 anos\",\n        \"10 a 14 anos\",\n        \"15 a 19 anos\",\n        \"20 a 24 anos\",\n        \"25 a 29 anos\",\n        \"30 a 34 anos\",\n        \"35 a 39 anos\",\n        \"40 a 44 anos\",\n        \"45 a 49 anos\",\n        \"50 a 54 anos\",\n        \"55 a 59 anos\",\n        \"60 a 64 anos\",\n        \"65 a 69 anos\",\n        \"70 a 74 anos\",\n        \"75 a 79 anos\",\n        \"80 a 84 anos\",\n        \"85 a 89 anos\",\n        \"90 a 94 anos\",\n        \"95 a 99 anos\",\n        \"100 anos ou mais\"\n      )\n  )\n\n\n\n\n\n\n\nPreguiça de escrever tudo\n\n\n\n\n\nSe você não quer ficar digitando tudo (ou não quer pedir para o chatGPT escrever para você), é possível selecionar as linhas usando expressões regulares! Sim, elas parecem bruxaria, mas tem uma colinha que ajuda muito!\nO segredo é encontrar padrões! Veja que as categorias são basicamente número+ a +número, e o “100 anos ou mais” colocamos na mão. Vamos lá!\n\npop_ind4 &lt;- pop_ind3 |&gt; \n  filter(\n1    stringr::str_detect(\n2      idade,\n3      \"[:digit:] a [:digit:]|100 anos ou mais\")\n    )\n\n\n1\n\nDetecta a ocorrência de expressões regulares\n\n2\n\nNa variável idade\n\n3\n\nE a expressão é: [número] a [número] OU “100 anos ou mais”\n\n\n\n\nBem mais simples!\n\n\n\nAgora para deixar igualzinho ao gráfico, vamos remover as palavras ” anos” e transformar “100 anos ou mais” em “100+”\n\npop_ind5 &lt;- pop_ind4 |&gt; \n  mutate(\n1    idade2 = stringr::str_remove(\n2      idade,\n3      \" anos.*\"\n      ),\n4    idade2 = ifelse(idade2 == 100, \"100+\", idade2)\n  )\n\n\n1\n\nRemove a ocorrência de expressões regulares.\n\n2\n\nNa variável idade.\n\n3\n\nE a expressão é: [espaço]anos(e tudo que vier depois).\n\n4\n\nSe idade2 for igual a 100, transformar em “100+”, caso contrário, mantenha como está.\n\n\n\n\nÓtimo, já temos a variável pronta, vamos calcular as proporções agrupadas pela localização do domicílio.\n\npop_ind6 &lt;- pop_ind5 |&gt;                                 \n1  group_by(localizacao_do_domicilio) |&gt;\n2  add_count(name = \"total\", wt = valor) |&gt;\n3  ungroup() |&gt;\n4  mutate(prop = valor / total)\n\n\n1\n\nAgrupamos os dados pela variável localizacao_do_domicilio.\n\n2\n\nCriamos uma nova coluna chamada total com a soma ponderada de valor dentro de cada grupo.\n\n3\n\nRetiramos o agrupamento com ungroup() para evitar efeitos indesejados nas próximas operações.\n\n4\n\nCalculamos a proporção de cada linha dentro do grupo, dividindo valor pelo total correspondente.\n\n\n\n\nAgora vamos fazer um truque e multiplicar os prop para homens por -1, assim eles ficam do lado esquerdo da pirâmide.\n\npop_ind7 &lt;- pop_ind6 |&gt; \n  mutate(\n1    prop = ifelse(sexo == \"Homens\", prop*-1, prop)\n  )\n\n\n1\n\nInverte o sinal da proporção para homens, para que apareçam do lado esquerdo da pirâmide.\n\n\n\n\nVamos ver se os dados estão prontos?\n\npop_ind7 |&gt; \n1  ggplot(aes(x = prop, y = idade2, fill = sexo)) +\n2  geom_col()\n\n\n1\n\nMapeia a proporção no eixo x, idade no eixo y e cor por sexo.\n\n2\n\nCria as barras da pirâmide populacional com geom_col().\n\n\n\n\n\n\n\n\n\n\n\nVeja que as categorias de idade estão seguindo uma ordem alfabética, mas queremos que sigam a ordem da pirâmide etária. Vamos ordenar a variável idade2 de acordo com a ordem que queremos. Para isso vamos transformar ela em um fator usando a função fct_inorder() do pacote {forcats} (é um anagrama para factors!)\n\npop_ind8 &lt;- pop_ind7 |&gt; \n1  mutate(idade2 = forcats::fct_inorder(idade2))\n\n\n1\n\nConverte a variável idade2 em fator e preserva a ordem atual dos valores, garantindo que as faixas etárias apareçam na ordem do dataset no gráfico.\n\n\n\n\nAgora tudo está ordenado!\n\npop_ind8 |&gt; \n  ggplot(aes(x = prop, y = idade2, fill = sexo))+\n  geom_col()\n\n\n\n\n\n\n\n\nPronto! Temos os dados prontos para o gráfico! Agora vamos para a parte mais legal!\n\n\nCriando o gráfico\nPrimeiro vamos dividir os dados em dois grupos: os que estão dentro das terras indígenas e os que estão fora. Para isso, vamos usar a função filter() dentro de cada geometria do geom_col().\nLembre-se que o grupo “Em terras indígenas” deve ser um retângulo preenchido e o grupo “Fora de terras indígenas” deve ser apenas contornado. Para isso, vamos usar o argumento fill = NA para criar uma geometria apenas com o contorno. Como o contorno está da mesma cor do preenchimento, vamos usar o color = \"black\" apenas para visualizar.\n\npop_ind8 |&gt; \n  ggplot(aes(x = prop, y = idade2, \n             fill = sexo))+\n  geom_col(\n    data = ~filter(., \n1                   localizacao_do_domicilio == \"Em terras indígenas\"),\n2    color = NA\n  )+\n  geom_col(\n    data = ~filter(., \n3                   localizacao_do_domicilio == \"Fora de terras indígenas\"),\n    fill = NA, \n4    color = \"black\"\n  )\n\n\n1\n\nUsa filter() para manter só as observações dentro das terras indígenas.\n\n2\n\nRetira o contorno das barras preenchidas.\n\n3\n\nUsa filter() para manter só as observações fora das terras indígenas.\n\n4\n\nDefine a cor do contorno como preta, apenas para fins de visualização.\n\n\n\n\n\n\n\n\n\n\n\nFaltam as cores! Vamos utilizar o argumento color também. E definir as cores utilizando scale_color_manual() e scale_fill_manual().\n\npop_ind8 |&gt; \n  ggplot(aes(x = prop, y = idade2,\n             fill = sexo, color = sexo))+\n  geom_col(\n    data = ~filter(., \n                   localizacao_do_domicilio == \"Em terras indígenas\"),\n    color = NA)+\n  geom_col(\n    data = ~filter(., \n                   localizacao_do_domicilio == \"Fora de terras indígenas\"),\n    fill = NA)+\n1  scale_color_manual(\n    values = c(\n      \"Mulheres\" = \"#420e44\",\n      \"Homens\" = \"#076e56\"\n    )\n  )+\n2  scale_fill_manual(\n    values = c(\n      \"Mulheres\" = \"#b3abce\",\n      \"Homens\" = \"#a5d4cf\"\n    )\n  )\n\n\n1\n\nDefine as cores do contorno (color) para cada sexo.\n\n2\n\nDefine cores mais claras de preenchimento (fill) para cada sexo.\n\n\n\n\n\n\n\n\n\n\n\nAgora o gráfico já está quase igual! Só precisamos mexer no Tema com a função theme(). Vamos deixar o fundo branco, tirar as grades, deixar os eixos mais bonitos e remover as legendas.\n\npop_ind8 |&gt; \n  ggplot(aes(x = prop, y = idade2, \n             fill = sexo,\n             color = sexo))+\n  geom_col(\n    data = ~filter(.x,\n                   localizacao_do_domicilio == \"Em terras indígenas\"),\n    color = NA)+\n  geom_col(\n    data = ~filter(.x,\n                   localizacao_do_domicilio == \"Fora de terras indígenas\"),\n    fill = NA)+\n1  scale_x_continuous(\n    breaks = seq(-0.08,0.08,0.02),\n    labels = c(\"8%\",\"6\",\"4\",\"2\",\"0\",\"2\",\"4\",\"6\",\"8%\")\n  )+\n  scale_fill_manual(\n    values = c(\n      \"Mulheres\" = \"#b3abce\",\n      \"Homens\" = \"#a5d4cf\"\n    )\n  )+\n  scale_color_manual(\n    values = c(\n      \"Mulheres\" = \"#420e44\",\n      \"Homens\" = \"#076e56\"\n    )\n  )+\n2  theme_minimal()+\n3  theme(\n    legend.position = \"none\", #sem legenda\n    plot.background = element_rect(fill = \"white\", color = NA), #adiciona fundo\n    panel.grid.major.x = element_blank(), #sem grade major\n    panel.grid.minor.x = element_blank(), #sem grade minor\n    axis.title = element_blank(), #sem título dos eixos\n    axis.text = element_text(color = \"black\"), #texto em preto\n    axis.ticks.x = element_line(color = \"#ebebeb\") #ticks em cinza\n  )+\n4  coord_cartesian(\n    xlim = c(-0.08,0.08)\n  )\n\n\n1\n\nDefine as quebras do eixo x (de -0.08 até 0.08 a cada 0.02 já que são porcentagens) e ajusta os rótulos para mostrar proporções negativas e positivas como porcentagens igual ao gráfico original.\n\n2\n\nUsa um tema claro e limpo (theme_minimal()) parecido, como base para o gráfico.\n\n3\n\nRemove legenda, grades do eixo x, títulos dos eixos e ajusta o estilo dos textos e ticks para deixar igual ao original.\n\n4\n\nAjusta manualmente os limites do eixo x para que o gráfico termine simetricamente em -8% e 8%.\n\n\n\n\n\n\n\n\n\n\n\n\nConseguimos! Até que ficou bem parecido!\nEspero que este post tenha sido útil para você! Se tiver alguma dúvida, sugestão (qual será o próximo post?) ou crítica, mande um e-mail!\nQuer conhecer mais o meu trabalho? Veja meu Portfólio!"
  }
]