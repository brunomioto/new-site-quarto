{
  "hash": "2ca9ed1d20de3e57af4dcbe08ee845a1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Facilitando a criação de arquivos Arlequin (.arp) com R\"\ndescription: \"Veja como gerar um arquivo .arp diretamente no R para o Arlequin\"\nauthor: \"Bruno Mioto\"\ndate: \"2025-03-10\"\nimage: post_arlequin.png\ncategories: [\"genetics\",\"packages\"]\nopen-graph:\n  description: \"Veja como gerar um arquivo .arp diretamente no R para o Arlequin\"\n  image: post_arlequin.png\ntwitter-card:\n  description: \"Veja como gerar um arquivo .arp diretamente no R para o Arlequin\"\n  image: post_arlequin.png\n  card-style: summary_large_image\nformat:\n  html:\n    code-link: true\n---\n\n\n\n\n![](post_arlequin.png)\n\n## O problema\n\nEste é um post **bem** específico, mas pode ser útil para quem realiza análises populacionais com dados genéticos. Então resolvi escrever um post simples para ajudar neste processo.\n\nDurante minha tese, precisei realizar análises populacionais (AMOVA, FST, etc), mas eu não sou muito dessa área, então nunca havia utilizado o software **Arlequin**, um software bem antigo (desde 1995) mas ainda muito utilizado para trabalhos científicos.\n\nO problema aparece quando precisamos criar um arquivo de entrada **.arp** para utilizar no Arlequin. Alguns programas (como o DNAsp) até salvam um arquivo .arp, mas ele não funciona muito bem e na maioria das vezes necessita de edição manual.\n\n## Tutoriais \n\nAo buscar por ajuda, cheguei até este tutorial completo da [Natália E. de Lima](https://www.youtube.com/@entendagenetica). \n\nA Natália claramente entende mais deste assunto do que eu, então edita *manualmente* os arquivos de dados populacionais para utilizar no Arlequin.\n\n\n\n\n{{< video https://www.youtube.com/embed/wdkzF0lnRCc >}}\n\n\n\n\n\n\nComo eu tenho mais facilidade com **R** do que genética de populações, busquei outros tutoriais, dessa vez usando o R, e cheguei neste vídeo do [Josh Banta](https://www.youtube.com/@DrJBanta)\n\n\n\n\n{{< video https://www.youtube.com/embed/z9dpRrLajCs >}}\n\n\n\n\n\n\nAqui ele ensina a transformar um arquivo **FASTA** em um arquivo **.arp**, mas também nos ajuda a adicionar grupamentos aos nossos dados. Tudo isso utilizando um script em R. Estes dados estão todos disponíveis no vídeo acima.\n\n## Uma abordagem mais simples\n\nNo entanto o script para essa tarefa é bem confuso e pode ser desafiador para quem não é muito proficiente em R. CPensando nisso, e para facilitar o trabalho de colegas no futuro (e o meu também), adaptei este código para uma **função simples em R**, chamada `create_arlequin()`.\n\nEsta função está disponível no pacote que fiz para meu laboratório, o Nupgen! **Este é um pacote bem experimental e com funções extremamente específicas**, então não se preocupe com essas outras.\n\nPara instalar o pacote é bem fácil, abra o R e rode\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!requireNamespace(\"remotes\", quietly = TRUE)){\n    install.packages(\"remotes\")\n  }\nremotes::install_github(\"brunomioto/nupgen\")\n```\n:::\n\n\n\n\nPronto! Agora vamos criar o arquivo **.arp** que precisamos.\nAntes de tudo, vamos carregar os pacotes que precisamos. Utilizaremos o pacote **ape** para importar as sequências e o **nupgen** para criar o arquivo.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ape)\nlibrary(nupgen)\n```\n:::\n\n\n\n\nAgora vamos carregar um alinhamento em FASTA e um arquivo de grupos. Utilizaremos aqui os arquivos de exemplo utilizados pelo Josh Banta no tutorial dele, mas você pode utilizar os seus também!\n\nO **arquivo FASTA** é um alinhamento comum, com as pontas cortadas em algum software tipo [MEGA](https://www.megasoftware.net), mas que seguem essa estrutura:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n>C1NFaBCy  \nAATCATCCCCCACATAACCTCCACACTTATCACATACCTTCTAATCTTATTAGGCGTAGC\nATTCTTTACCCTTCTTGAACGCAAAGCTTTAGGGTACTTTCAAATCCGAAAAGGCCCAAA\nCAAAGTTGGAATTATAGGAATCCCACAACCACTAGCAGACGCCCTAAAACTTTTTGTGAA\nAGAATGAGTAATGCCCACATCTTCAAACTACTTACCATTTATTTTAACCCCAACAATCAT\nATTAATTTTAGCACTTAGACTATGACAACTATTTCCATCCTTTATACTCTCATTTCAAAT\nAGCCCTAGGAATACTCTTATTCTTATGTATTTCTTCCTTAACCGTCTATACAACCTTAAT\nAGCAGGTTGGGCCTCAAACTCGAAGTATGCTCTACTAGGGGCCATTCGAGCCATGGCCCA\nAACCATCTCATATGAGGTAACAATAACACTAATTATCATCTTCTACCTATTCTTAATTAT\nACAAATAGACATAGTAACAATCCGCTCAGTTAACACCTCTATACCAACCTTTGCCCTCTC\nCGCACCATTAGCTATTATATGGACTGTTGTCATCTTAGCAGAAACAAACCGAGCCCCATT\nTGACTTT\n>C2NPrBCy  \nAATCATCCCCCACATAACCTCCACACTTATCACATACCTTCTAATCTTATTAGGCGTAGC\nATTCTTTACCCTTCTTGAACGCAAAGCTTTAGGGTACTTTCAAATCCGAAAAGGCCCAAA\nCAAAGTTGGAATTATAGGAATCCCACAACCACTAGCAGACGCCCTAAAACTTTTTGTGAA\nAGAATGAGTAATGCCCACATCTTCAAACTACTTACCATTTATTTTAACCCCAACAATCAT\nATTAATTTTAGCACTTAGACTATGACAACTATTTCCATCCTTTATACTCTCATTTCAAAT\nAGCCCTAGGAATACTCTTATTCTTATGTATTTCTTCCTTAACCGTCTATACAACCTTAAT\nAGCAGGTTGGGCCTCAAACTCGAAGTATGCTCTACTAGGGGCCATTCGAGCCATGGCCCA\nAACCATCTCATATGAGGTAACAATAACACTAATTATCATCTTCTACCTATTCTTAATTAT\nACAAATAGACATAGTAACAATCCGCTCAGTTAACACCTCTATACCAACCTTTGCCCTCTC\nCGCACCATTAGCTATTATATGAACTGTTGTTATCTTAGCAGAAACAAACCGAGCCCCATT\nTGACTTT\n```\n:::\n\n\n\n\nEnquanto isso, o **arquivo de grupos** é um arquivo .csv com duas colunas, `group` (com o nome dos grupos) e `name` (com nome das sequências), seguindo este exemplo:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroup,name\n1,C1NFaBCy  \n1,C2NPrBCy  \n1,C3NPrBCy  \n1,C4NPrBCy  \n1,C5NPrBCy  \n1,C6NPrBCy  \n1,C7NPrBCy  \n1,C8NPrBCy  \n1,C9NPrNec  \n2,C10NPrNec \n2,C11NPrNec \n2,C12NPrNec \n2,C13NPrNec \n3,C14NPrSab \n3,C15NPrSab \n```\n:::\n\n\n\n\nCaso queira, você pode criar este arquivo usando o **Excel** e exportar em .csv, mas confira se o separador é vírgula (,) ao invés de ponto e vírgula (;)\n\nPerceba que meus arquivos estão dentro da pasta `data`, então coloco isso também no caminho do arquivo\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalinhamento <- read.dna(\"data/arquivo_fasta.fas\", format = \"fasta\")\n\ngrupos <- read.csv(\"data/arquivo_grupos.csv\")\n```\n:::\n\n\n\n\nAgora que temos os arquivos carregados, é só rodar a função. Perceba que, além dos argumentos do alinhamento e grupos, temos um chamado `output.dir`, este argumento define qual diretório você deseja salvar o arquivo **output.arp**. O padrão é o diretório atual (\".\"), mas aqui vou salvar na pasta `data`, junto com os outros arquivos.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnupgen::create_arlequin(fasta = alinhamento, groups = grupos, output.dir = \"./data\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nℹ Creating .arp file\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nℹ Saving .arp file\n```\n\n\n:::\n:::\n\n\n\n\nPronto! Agora você já tem um arquivo **output.arp** com os dados prontos para utilizar no **Arlequin**!\n\nVale a pena conferir se seus dados estão corretos, o arquivo tem mais ou menos essa cara aqui:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n[Profile] \n\n \n\nTitle=\"data\" \n\nNBSamples=14\n \n\nDataType=DNA \n\nGenotypicData=0 \n\nLocusSeparator=WHITESPACE \n\n \n\n[Data] \n\n[[Samples]] \n\n \n\nSampleName=\"1\"\n\nSampleSize=9\n\nSampleData={ \n\n \n\nc1nfabcy   1 A A T C A T C C C C C A C A T A A C C T C C A C A C T T A T C A C A T A C C T T C T A A T C T T A T T A G G C G T A G C A T T C T T T A C C C T T C T T G A A C G C A A A G C T T T A G G G T A C T T T C A A A T C C G A A A A G G C C C A A A C A A A G T T G G A A T T A T A G G A A T C C C A C A A C C A C T A G C A G A C G C C C T A A A A C T T T T T G T G A A A G A A T G A G T A A T G C C C A C A T C T T C A A A C T A C T T A C C A T T T A T T T T A A C C C C A A C A A T C A T A T T A A T T T T A G C A C T T A G A C T A T G A C A A C T A T T T C C A T C C T T T A T A C T C T C A T T T C A A A T A G C C C T A G G A A T A C T C T T A T T C T T A T G T A T T T C T T C C T T A A C C G T C T A T A C A A C C T T A A T A G C A G G T T G G G C C T C A A A C T C G A A G T A T G C T C T A C T A G G G G C C A T T C G A G C C A T G G C C C A A A C C A T C T C A T A T G A G G T A A C A A T A A C A C T A A T T A T C A T C T T C T A C C T A T T C T T A A T T A T A C A A A T A G A C A T A G T A A C A A T C C G C T C A G T T A A C A C C T C T A T A C C A A C C T T T G C C C T C T C C G C A C C A T T A G C T A T T A T A T G G A C T G T T G T C A T C T T A G C A G A A A C A A A C C G A G C C C C A T T T G A C T T T\n\n \n\nc2nprbcy   1 A A T C A T C C C C C A C A T A A C C T C C A C A C T T A T C A C A T A C C T T C T A A T C T T A T T A G G C G T A G C A T T C T T T A C C C T T C T T G A A C G C A A A G C T T T A G G G T A C T T T C A A A T C C G A A A A G G C C C A A A C A A A G T T G G A A T T A T A G G A A T C C C A C A A C C A C T A G C A G A C G C C C T A A A A C T T T T T G T G A A A G A A T G A G T A A T G C C C A C A T C T T C A A A C T A C T T A C C A T T T A T T T T A A C C C C A A C A A T C A T A T T A A T T T T A G C A C T T A G A C T A T G A C A A C T A T T T C C A T C C T T T A T A C T C T C A T T T C A A A T A G C C C T A G G A A T A C T C T T A T T C T T A T G T A T T T C T T C C T T A A C C G T C T A T A C A A C C T T A A T A G C A G G T T G G G C C T C A A A C T C G A A G T A T G C T C T A C T A G G G G C C A T T C G A G C C A T G G C C C A A A C C A T C T C A T A T G A G G T A A C A A T A A C A C T A A T T A T C A T C T T C T A C C T A T T C T T A A T T A T A C A A A T A G A C A T A G T A A C A A T C C G C T C A G T T A A C A C C T C T A T A C C A A C C T T T G C C C T C T C C G C A C C A T T A G C T A T T A T A T G A A C T G T T G T T A T C T T A G C A G A A A C A A A C C G A G C C C C A T T T G A C T T T\n```\n:::\n\n\n\n\nEspero que este post tenha sido útil para você! Se tiver alguma dúvida, sugestão ou crítica, [mande um e-mail](mailto:bhmstabile@gmail.com)!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}