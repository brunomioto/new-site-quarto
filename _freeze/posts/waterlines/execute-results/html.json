{
  "hash": "4980518922e2d2c0a2ac984279cc242e",
  "result": {
    "markdown": "---\ntitle: \"Drawing waterlines with ggplot2 in R\"\ndescription: \"Learn how to easily create these awesome waterlines\"\nauthor: \"Bruno Mioto\"\ndate: \"2023-02-01\"\nimage: post_waterline.png\ncategories: [\"ggplot2\",\"dataviz\",\"maps\"]\nopen-graph:\n  description: \"Learn how to easily create these awesome waterlines\"\n  image: post_waterline.png\ntwitter-card:\n  description: \"Learn how to easily create these awesome waterlines\"\n  image: post_waterline.png\n  card-style: summary_large_image\nformat:\n  html:\n    code-link: true\n---\n\n\n![](post_waterline.png)\n\n## Motivation\n\n<img src=\"https://raw.githubusercontent.com/thomasp85/boundaries/main/man/figures/logo.png\" align=\"right\" height=\"138\"/>\n\nLast week I saw that [Thomas Lin Pedersen](https://www.data-imaginist.com/) (currently responsible for ggplot2) has started developing a new package called [boundaries](https://boundaries.r-euclid.com/). It did not take me much effort to understand the main function of the package, because this amazing hex logo explains it very well, to create **waterlines** from boudaries!\n\nBut this is a package from the new [euclid ecosystem](https://r-euclid.com/), which aims to *\"provide a new unified foundation for computational geometry in R\"*. Awesome, but at that moment I wanted to know if I could create the waterlines for any shapefile I find on my computer, and the boundaries package doesn't support `sf` objects, which I use to create maps...\n\nAnd so, like a good Ph.D. student, I began a saga of Google and StackOverFlow searches to find the answers I was looking for. Coincidentally, on the same day (!), I came across Olivia Vane's [tweet](https://twitter.com/OliviaFVane/status/1583064125156241409) about her talk at Observable Insight 2022, where she teaches drawing waterlines with code, but using D3.js.\n\nHer [article](https://observablehq.com/@oliviafvane/i-drawing-water-in-old-maps?collection=@oliviafvane/watermarks) about waterlines is great and explains all the context behind this visualization. I highly recommend reading it!\n\nBut the topic was hot, and I already had an idea how to use waterlines: Re-create an old map of the Brazilian coast!\n\nThen I discovered that there is a way to create waterlines using the `sf` and `ggplot2` packages! So I created this text as a guide for the next people who need it! Today I will try to present a basic version for everyone to understand the idea and create their own amazing maps!\n\nLook how my map turned out!\n\n\n{{< tweet BrunoHMioto 1619370088670416897 >}}\n\n\n\n## Creating our map\n\nWe need a map with some water masses. Since my girlfriend is of Japanese descent, I will use today's post to thank this culture for providing me with sushi, lamen, yakisoba, anime, and a lot of knowledge and respect!\n\nLet's load the necessary packages, I'll talk about them during the text.\n\nIf you have questions about a function, just click on its name to go to the package page!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Packages\nlibrary(dplyr) #pipe and basics\nlibrary(ggplot2) #plotting\nlibrary(sf) #working with maps\nlibrary(rnaturalearth) #get countries shapefiles\n```\n:::\n\n\nNow we need the map of Japan. Good thing we have the `rnaturalearth` package!\n\n\n::: {.cell}\n\n```{.r .cell-code}\njapan_map <- rnaturalearth::ne_countries(country = \"Japan\", #country name\n                                         scale = \"medium\", #map resolution\n                                         returnclass = \"sf\" #object class\n                                         )\n```\n:::\n\n\nWe can check out the map we just downloaded\n\n\n::: {.cell}\n\n```{.r .cell-code}\njapan_map %>% \n  ggplot()+\n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](waterlines_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n::: callout-important\nSince the next process requires some geometry calculations, we will tell the `sf` package not to use the `s2` package, as this can lead to errors.\n\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-wrap}\nsf::sf_use_s2(FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Spherical geometry (s2) switched off\n```\n:::\n:::\n\n:::\n\nAll done, now we just need to create the **waterlines**! We will use the `st_buffer` function from the `sf` package, as the name says, it calculates a buffer around the geometry, which is exactly what we need! Each line of code is a waterline, add as many as you like!\n\nAfter executing each line you will get a `warning`. Don't worry, it will work!\n\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-wrap}\njapan_buffer1 <- sf::st_buffer(japan_map, dist = 0.1)\njapan_buffer2 <- sf::st_buffer(japan_map, dist = 0.2)\njapan_buffer3 <- sf::st_buffer(japan_map, dist = 0.3)\njapan_buffer4 <- sf::st_buffer(japan_map, dist = 0.4)\n\n#> Warning: st_buffer does not correctly buffer longitude/latitude datadist is assumed to be in decimal degrees (arc_degrees).\n```\n:::\n\n\nNow we can plot it!\n\n\n::: {.cell}\n\n```{.r .cell-code}\njapan_map %>% \n  ggplot()+\n  geom_sf()+\n  geom_sf(data = japan_buffer1, fill = NA)+\n  geom_sf(data = japan_buffer2, fill = NA)+\n  geom_sf(data = japan_buffer3, fill = NA)+\n  geom_sf(data = japan_buffer4, fill = NA)\n```\n\n::: {.cell-output-display}\n![](waterlines_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nLet's add some details and make this map even cooler!\n\n\n::: {.cell}\n\n```{.r .cell-code}\njapan_map %>% \n  ggplot()+\n  geom_sf(fill = \"#f9e9ca\", \n          color = \"#48351c\",\n          linewidth = 0.4)+\n  geom_sf(data = japan_buffer1, \n          fill = NA, \n          color = \"#48351c90\")+\n  geom_sf(data = japan_buffer2, \n          fill = NA, \n          color = \"#48351c70\")+\n  geom_sf(data = japan_buffer3, \n          fill = NA, \n          color = \"#48351c50\")+\n  geom_sf(data = japan_buffer4, \n          fill = NA, \n          color = \"#48351c30\")+\n  theme_bw()+\n  theme(\n    panel.background = element_rect(fill = \"#badff0\"),\n    panel.grid = element_line(color = \"#afd2e2\")\n  )+\n  coord_sf(clip = \"off\")\n```\n\n::: {.cell-output-display}\n![](waterlines_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nAwesome! I hope you enjoyed this tutorial. I would like to thanks [Olivia Vane](https://twitter.com/OliviaFVane), [Maya Gans](https://twitter.com/Mayacelium) and [Georgios Karamanis](https://twitter.com/geokaramanis) for the inspiration and tips for this post!\n\nShare it with your friends and [send me](https://twitter.com/BrunoHMioto) your maps with waterlines!\n\nDon't forget to take a look at my [Charts](https://brunomioto.com/charts.html) page!\n\n------------------------------------------------------------------------\n\n::: {.callout-tip collapse=\"true\"}\n## Expand for Session Info\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n- Session info ---------------------------------------------------------------\n setting  value\n version  R version 4.1.1 (2021-08-10)\n os       Windows 10 x64 (build 19044)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  Portuguese_Brazil.1252\n ctype    Portuguese_Brazil.1252\n tz       America/Sao_Paulo\n date     2023-02-01\n pandoc   2.19.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n- Packages -------------------------------------------------------------------\n package       * version date (UTC) lib source\n dplyr         * 1.0.10  2022-09-01 [1] CRAN (R 4.1.3)\n ggplot2       * 3.4.0   2022-11-04 [1] CRAN (R 4.1.1)\n rnaturalearth * 0.1.0   2017-03-21 [1] CRAN (R 4.1.2)\n sessioninfo   * 1.2.2   2021-12-06 [1] CRAN (R 4.1.3)\n sf            * 1.0-7   2022-03-07 [1] CRAN (R 4.1.3)\n\n [1] C:/Users/Bruno/Documents/R/win-library/4.1\n [2] C:/Program Files/R/R-4.1.1/library\n\n------------------------------------------------------------------------------\n```\n:::\n:::\n\n:::\n",
    "supporting": [
      "waterlines_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}