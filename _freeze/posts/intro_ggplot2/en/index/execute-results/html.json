{
  "hash": "6519255c61e9c71544d5dc5016ee4132",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"ggplot2 101\"\npreview-colour:\n  code: true\n  text: true\nfilters:\n   - preview-colour\ndescription: \"Getting started with data visualization\"\nauthor: \"Bruno Mioto\"\ndate: \"2024-02-27\"\nimage: cover.png\ncategories: [\"ggplot2\",\"dataviz\"]\nopen-graph:\n  description: \"Getting started with data visualization\"\n  image: cover.png\ntwitter-card:\n  description: \"Getting started with data visualization\"\n  image: cover.png\n  card-style: summary_large_image\nformat:\n  html:\n    code-link: true\nexecute:\n  freeze: auto\n---\n\n\n![](cover.png)\n\n\n\n\n\n::: {.callout-note appearance=\"simple\"}\n\n## Before we start...\n\nThis is a material adapted from my class on **Data Visualization** taught in the **Introduction to R** course for my postgraduate program. The aim was not to present **everything** about ggplot2, just the **most important** that can be used in scientific articles.\n\nAs this may be useful to more people, I decided to make it available to everyone here. Feel free to share it with others!\n\n:::\n\n## Used packages\n\nIn this lesson we will use the following packagesðŸ“¦:\n\n- <bslib-tooltip placement=\"auto\" bsOptions=\"[]\" data-require-bs-version=\"5\" data-require-bs-caller=\"tooltip()\">\n  <template>A Grammar of Data Manipulation â€¢ dplyr</template>\n  <a href=\"https://dplyr.tidyverse.org\" class=\"r-link-pkg\" target=\"_blank\">{dplyr}</a>\n</bslib-tooltip> for data manipulation\n\n- <bslib-tooltip placement=\"auto\" bsOptions=\"[]\" data-require-bs-version=\"5\" data-require-bs-caller=\"tooltip()\">\n  <template>Create Elegant Data Visualisations Using the Grammar of Graphics â€¢ ggplot2</template>\n  <a href=\"https://ggplot2.tidyverse.org\" class=\"r-link-pkg\" target=\"_blank\">{ggplot2}</a>\n</bslib-tooltip> to create charts\n\n- <bslib-tooltip placement=\"auto\" bsOptions=\"[]\" data-require-bs-version=\"5\" data-require-bs-caller=\"tooltip()\">\n  <template>GitHub - mrcaseb/ggpath: Robust Image Rendering Support for 'ggplot2'</template>\n  <a href=\"https://github.com/mrcaseb/ggpath\" class=\"r-link-pkg\" target=\"_blank\">{ggpath}</a>\n</bslib-tooltip> to plot images in a much easier way\n\n- <bslib-tooltip placement=\"auto\" bsOptions=\"[]\" data-require-bs-version=\"5\" data-require-bs-caller=\"tooltip()\">\n  <template>GitHub - williamorim/pokemon: Pokemon Data</template>\n  <a href=\"https://github.com/williamorim/pokemon\" class=\"r-link-pkg\" target=\"_blank\">{pokemon}</a>\n</bslib-tooltip> to get the pokemon table\n\nTo install the packages, we use the following script:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"dplyr\", \"ggplot2\", \n                   \"ggpath\", \"pokemon\"))\n```\n:::\n\n\nNow that we have the packages installed, just load them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggpath)\nlibrary(pokemon)\n```\n:::\n\n\n## The data\n\nTo create our charts, we need a dataset. We'll use the <bslib-tooltip placement=\"auto\" bsOptions=\"[]\" data-require-bs-version=\"5\" data-require-bs-caller=\"tooltip()\">\n  <template>GitHub - williamorim/pokemon: Pokemon Data</template>\n  <a href=\"https://github.com/williamorim/pokemon\" class=\"r-link-pkg\" target=\"_blank\">{pokemon}</a>\n</bslib-tooltip>ðŸ“¦ package created by [William Amorim](https://twitter.com/wamorim_){target=\"_blank\"}!\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df <- pokemon::pokemon\n```\n:::\n\n\n## Charts with R base\n\nOne way to create graphs is to use R base itself, which is very simple but allows quick visualizations.\n\nWe can create scatter plots, for example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(height ~ weight, data = pokemon_df)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=100%}\n:::\n:::\n\n\nThe problem begins when we want to make these charts more appealing\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(height ~ weight, data = pokemon_df,\n     main = \"Title\",\n     xlab = \"Mass (kg)\", ylab = \"Height (m)\",\n     pch = 19, frame = FALSE)\nabline(lm(height ~ weight, data = pokemon_df), col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=100%}\n:::\n:::\n\n\nIt's confusing and I find it very difficult to make any chart like this more appealing.\n\n## Charts with ggplot2\n\nBut now let's get to know the <bslib-tooltip placement=\"auto\" bsOptions=\"[]\" data-require-bs-version=\"5\" data-require-bs-caller=\"tooltip()\">\n  <template>Create Elegant Data Visualisations Using the Grammar of Graphics â€¢ ggplot2</template>\n  <a href=\"https://ggplot2.tidyverse.org\" class=\"r-link-pkg\" target=\"_blank\">{ggplot2}</a>\n</bslib-tooltip>ðŸ“¦ package. This package was the thesis of [Hadley Wickham](https://en.wikipedia.org/wiki/Hadley_Wickham){target=\"_blank\"}, now Chief Scientist at RStudio/Posit. \n\nThe magic here is that this package incorporated the **grammar of graphics** (hence the `gg`), which brought several fundamentals to be followed. One of them is the creation of graphics in layers, as if it were a painting!\n\n![Source: QCBS R Workshop Series](figures/gglayers.png){width=50% fig-align=\"center\"}\n\nThis package is already included in the <bslib-tooltip placement=\"auto\" bsOptions=\"[]\" data-require-bs-version=\"5\" data-require-bs-caller=\"tooltip()\">\n  <template>Easily Install and Load the Tidyverse â€¢ tidyverse</template>\n  <a href=\"https://tidyverse.tidyverse.org\" class=\"r-link-pkg\" target=\"_blank\">{tidyverse}</a>\n</bslib-tooltip>ðŸ“¦ and follows the same principle.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\nIf we just run `ggplot()`, we'll get a blank canvas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=100%}\n:::\n:::\n\n\nNow we have to add our dataset and what our axes will be.\n\nWhenever we are talking about a **variable** from our dataset, we have to put it inside the `aes()` argument, which stands for **aesthetics**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pokemon_df,\n       aes(x = weight,\n           y = height))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=100%}\n:::\n:::\n\n\nIn fact, as ggplot2 works in layers, we can use it as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pokemon_df)+\n  aes(x = weight,\n      y = height)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=100%}\n:::\n:::\n\n\nAs **ggplot2** is part of the <bslib-tooltip placement=\"auto\" bsOptions=\"[]\" data-require-bs-version=\"5\" data-require-bs-caller=\"tooltip()\">\n  <template>Easily Install and Load the Tidyverse â€¢ tidyverse</template>\n  <a href=\"https://tidyverse.tidyverse.org\" class=\"r-link-pkg\" target=\"_blank\">{tidyverse}</a>\n</bslib-tooltip>ðŸ“¦, we can tell R in the imperative: *\"Get the dataset `pokemon_df` and then create the ggplot...\"*. The good thing about this approach is that, as ggplot already knows the dataset beforehand, it helps us select the variables (press `tab` before writing the variables).\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = weight,\n             y = height))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=100%}\n:::\n:::\n\n\nNow we have our chart with the axes delimited, and we can add as many layers as we like. The principle of ggplot is similar to pipe, where the information is passed directly to the layer below, so we don't need to add the data again.\n\n### Geometries\n\nGeometries are functions that start with `geom_*`. There are lots of them and we can get a little help with [ggplot2 cheatsheet](https://posit.co/wp-content/uploads/2022/10/data-visualization-1.pdf){target=\"_blank\"}.\n\nFirst, let's create a scatterplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = weight,\n             y = height))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=100%}\n:::\n:::\n\n\nTo add another layer of geometry, just add another layer to this canvas. Let's add a trend line with the `geom_smooth()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = weight,\n             y = height))+\n  geom_point()+\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=100%}\n:::\n:::\n\n\nWe can add a linear trend line with the argument `method = \"lm\"`!\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = weight,\n             y = height))+\n  geom_point()+\n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=100%}\n:::\n:::\n\n\nHere we can see how ggplot2 works like a painting. As `geom_smooth()` was called **after** `geom_point()`, it is plotted on top. \n\nLet's look at the same example but inverting these geometries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = weight,\n             y = height))+\n  geom_smooth(method = \"lm\")+\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=100%}\n:::\n:::\n\n\nLet's make a boxplot (using the `geom_boxplot` geometry) of the type of pokemon by height\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = type_1, y = height))+\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=100%}\n:::\n:::\n\n\nNow let's make a column chart (using the `geom_col()` geometry) of the pokemons' attacks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = pokemon, y = attack))+\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=100%}\n:::\n:::\n\n\nWhoa! We have a lot of data! Let's filter only the starter pokemons and their evolutions to plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarters <- pokemon_df %>% \n  filter(id %in% 1:9)\n```\n:::\n\n\nLet's test it!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarters %>% \n  ggplot(aes(x = pokemon, y = attack))+\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=100%}\n:::\n:::\n\n\nWe can invert the axes, just switch. Especially with large texts, it's best to keep them on the y-axis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarters %>% \n  ggplot(aes(x = attack, y = pokemon))+\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=100%}\n:::\n:::\n\n\nThe pokemons are not in the order we would like (as in the dataset), they are in alphabetical order. So we have to sort them by `id`, but to be sorted we need to consider them as factors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarters2 <- starters %>% \n  mutate(pokemon = reorder(pokemon, id))\n```\n:::\n\n\nLet's see if it worked using the <bslib-tooltip placement=\"auto\" bsOptions=\"[]\" data-require-bs-version=\"5\" data-require-bs-caller=\"tooltip()\">\n  <template>Get a glimpse of your data â€” glimpse â€¢ pillar</template>\n  <a href=\"https://pillar.r-lib.org/reference/glimpse.html\" class=\"r-link-call\" target=\"_blank\">dplyr::glimpse()</a>\n</bslib-tooltip> function. Note the class of each variable between `<...> `\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(starters2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 9\nColumns: 22\n$ id              <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9\n$ pokemon         <fct> bulbasaur, ivysaur, venusaur, charmander, charmeleon, â€¦\n$ species_id      <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9\n$ height          <dbl> 0.7, 1.0, 2.0, 0.6, 1.1, 1.7, 0.5, 1.0, 1.6\n$ weight          <dbl> 6.9, 13.0, 100.0, 8.5, 19.0, 90.5, 9.0, 22.5, 85.5\n$ base_experience <dbl> 64, 142, 236, 62, 142, 240, 63, 142, 239\n$ type_1          <chr> \"grass\", \"grass\", \"grass\", \"fire\", \"fire\", \"fire\", \"waâ€¦\n$ type_2          <chr> \"poison\", \"poison\", \"poison\", NA, NA, \"flying\", NA, NAâ€¦\n$ hp              <dbl> 45, 60, 80, 39, 58, 78, 44, 59, 79\n$ attack          <dbl> 49, 62, 82, 52, 64, 84, 48, 63, 83\n$ defense         <dbl> 49, 63, 83, 43, 58, 78, 65, 80, 100\n$ special_attack  <dbl> 65, 80, 100, 60, 80, 109, 50, 65, 85\n$ special_defense <dbl> 65, 80, 100, 50, 65, 85, 64, 80, 105\n$ speed           <dbl> 45, 60, 80, 65, 80, 100, 43, 58, 78\n$ color_1         <chr> \"#78C850\", \"#78C850\", \"#78C850\", \"#F08030\", \"#F08030\",â€¦\n$ color_2         <chr> \"#A040A0\", \"#A040A0\", \"#A040A0\", NA, NA, \"#A890F0\", NAâ€¦\n$ color_f         <chr> \"#81A763\", \"#81A763\", \"#81A763\", NA, NA, \"#DE835E\", NAâ€¦\n$ egg_group_1     <chr> \"monster\", \"monster\", \"monster\", \"monster\", \"monster\",â€¦\n$ egg_group_2     <chr> \"plant\", \"plant\", \"plant\", \"dragon\", \"dragon\", \"dragonâ€¦\n$ url_icon        <chr> \"//archives.bulbagarden.net/media/upload/7/7b/001MS6.pâ€¦\n$ generation_id   <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1\n$ url_image       <chr> \"https://raw.githubusercontent.com/HybridShivam/Pokemoâ€¦\n```\n\n\n:::\n:::\n\n\nLook how it's sorted now!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarters2 %>% \n  ggplot(aes(x = attack, y = pokemon))+\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=100%}\n:::\n:::\n\n\nThese charts are missing **colors**!\n\nNow let's use the `color` and `fill` arguments. When the shape is solid, we only use `color`, if it has an outline and a filling, we use `color` and `fill`, respectively.\n\nWe can color according to any variable, in this case we'll color by **type**!\n\nNote that we can determine the variable in the `ggplot()` function and it will be used for all the following ones. If we only want to apply it to a single layer, we only add it to that layer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarters2 %>% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=100%}\n:::\n:::\n\n\nNow we can add the outline. As it's not a variable (it's a fixed color), it doesn't have to go inside `aes()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarters2 %>% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=100%}\n:::\n:::\n\n\n### Labels\n\nEvery chart can have a title, subtitle, caption, axis title, etc.\n\nAll this can be determined using the `labs()` function within ggplot. Note that the legend is created according to the `fill` variable, so the title of the legend will follow this variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarters2 %>% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  labs(\n    title = \"The starter pokemons\",\n    subtitle = \"Separated by type\",\n    caption = \"Bruno Mioto\",\n    x = \"Attack\",\n    y = \"Pokemon\",\n    fill = \"Type\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=100%}\n:::\n:::\n\n\n### Scales\n\nWhat if we want to edit the scales? In that case we'll use the `scale_*` set of functions.\n\nLet's edit the X axis. The breaks are every 20 attack points, let's put them every 10 points. As the x-axis is continuous, we'll use the `scale_x_continuous()` function. The `breaks` argument helps us with this task!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarters2 %>% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_x_continuous(breaks = seq(0,200,10))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=100%}\n:::\n:::\n\n\nColors can also be defined using the `scale_*` function. These colors are not exactly what we want, we can define them manually using the `scale_fill_manual()` function.\n\nAs the colors are defined according to type, we'll use them as a basis. The dataset itself provides the colors for each type. For the **water** type we'll use the color `#6890F0`, for the **fire** type we'll use the color `#F08030` and for the **grass** type we'll use the color `#78C850`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarters2 %>% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=100%}\n:::\n:::\n\n\nIn addition to defining the colors, we can also determine the labels that each color will have in the legend. We'll do this within the `scale` function too, but with the `labels` argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarters2 %>% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    ),\n    labels = c(\n      \"fire\" = \"Fire\",\n      \"grass\" = \"Grass\",\n      \"water\" = \"Water\"\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=100%}\n:::\n:::\n\n\n### Themes\n\nBut these charts aren't so pretty yet, we can edit **anything** in the charts, from the background color to the font!\n\nggplot2 already has some pre-defined themes. Let's try them out\n\nThis is `theme_bw()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarters2 %>% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )+\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){width=100%}\n:::\n:::\n\n\nI really like `theme_classic()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarters2 %>% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )+\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){width=100%}\n:::\n:::\n\n\n`theme_minimal()` is also widely used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarters2 %>% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-1.png){width=100%}\n:::\n:::\n\n\nThe `theme_void()` maintains **only** the geometries of the generated chart.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarters2 %>% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )+\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-32-1.png){width=100%}\n:::\n:::\n\n\nBut we can edit anything within the chosen theme too. These functions are just predetermined configurations.\n\nMost of the parameters can be seen [on this website](https://ggplot2tor.com/theme){target=\"_blank\"}. To change the theme parameters, we add the arguments to the `theme()` function.\n\nLet's delete the title of the axes!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarters2 %>% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )+\n  theme(\n    axis.title = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-33-1.png){width=100%}\n:::\n:::\n\n\nOr change the background of the chart. Notice that we have `plot` (the whole chart) and `panel` (just the panel between the axes)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarters2 %>% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )+\n  theme(\n    plot.background = element_rect(fill = \"pink\"),\n    panel.background = element_rect(fill = \"yellow\")\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-34-1.png){width=100%}\n:::\n:::\n\n\nLet's change the grid lines!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarters2 %>% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )+\n  theme(\n    plot.background = element_rect(fill = \"pink\"),\n    panel.background = element_rect(fill = \"yellow\",\n                                    color = \"blue\"),\n    panel.grid.major = element_line(color = \"green\"),\n    panel.grid.major.x = element_line(linetype = \"dashed\"),\n    panel.grid.minor.x = element_line(color = \"black\")\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-35-1.png){width=100%}\n:::\n:::\n\n\nOh my goodness! The chart isn't pretty, but it's didactic! (But don't ever do something like that for real, please)\n\n### Facets\n\nWe often have a lot of information to show in just one chart. For this we can use the idea of **small multiples** with the `facet_wrap()` function!\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = attack, \n             y = defense, \n             color = generation_id))+\n  geom_point()+\n  facet_wrap(.~generation_id)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-36-1.png){width=100%}\n:::\n:::\n\n\nIn this case, ggplot interpreted the `generation_id` column as a continuous number. But in this case each **generation** is independent of another. We can tell ggplot2 to interpret this variable as a **factor**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = attack, \n             y = defense, \n             color = factor(generation_id)))+\n  geom_point()+\n  facet_wrap(.~factor(generation_id))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-37-1.png){width=100%}\n:::\n:::\n\n\nWe can use the facets with other data too.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = attack, \n             y = defense, \n             color = type_1))+\n  geom_point()+\n  facet_wrap(.~type_1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-38-1.png){width=100%}\n:::\n:::\n\n\n## Plotting images\n\nIf we want to put images in our charts, the best indication is to use the package <bslib-tooltip placement=\"auto\" bsOptions=\"[]\" data-require-bs-version=\"5\" data-require-bs-caller=\"tooltip()\">\n  <template>GitHub - mrcaseb/ggpath: Robust Image Rendering Support for 'ggplot2'</template>\n  <a href=\"https://github.com/mrcaseb/ggpath\" class=\"r-link-pkg\" target=\"_blank\">{ggpath}</a>\n</bslib-tooltip>ðŸ“¦. This is the best way to plot images!\n\nTo do this, use the `geom_from_path()` function. All we need to do is enter the column with the path to the picture.\n\nOne suggestion is to set the `width` argument to 0.1 as the pictures can get **big**!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggpath)\n\nstarters2 %>% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  geom_col(color = \"black\")+\n  geom_from_path(aes(path = url_image),\n                 width = 0.1)+\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggpath-1.png){width=100%}\n:::\n:::\n\n\n### Chart finished\n\nHere I've added a few finishing touches to our chart (check the positioning of the names and figures!). Unfortunately it's not for this post to go into all these details, but I've left **everything** in the comments!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarters2 %>% \n  ggplot(aes(x = attack, y = pokemon, fill = type_1))+\n  #add columns\n  geom_col(color = \"black\",\n           width = 0.5)+\n  #add names\n  geom_text(aes(label = pokemon,\n                color = type_1),\n            x = 1,\n            hjust = 0, #side alignment\n            nudge_y = 0.45, #vertical adjustment\n            fontface = \"bold\"\n            )+\n  #add figures\n  geom_from_path(aes(path = url_image),\n                 width = 0.1, #width relative to total\n                 hjust = 0 #side alignment\n                 )+\n  #add vertical line\n  geom_vline(xintercept = 0)+\n  #expand x-axis\n  scale_x_continuous(\n    expand = expansion(mult = c(0,0.1)) #expand left-right\n  )+\n  #edit colors (will affect text that uses color)\n  scale_color_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )+\n  #edit colors (will affect the column that uses fill)\n  scale_fill_manual(\n    values = c(\n      \"water\" = \"#6890F0\",\n      \"fire\" = \"#F08030\",\n      \"grass\" = \"#78C850\"\n    )\n  )+\n  #edit labs\n  labs(\n    x = \"Attack\",\n    caption = \"Bruno Mioto - @BrunoHMioto\"\n  )+\n  #use initial theme\n  theme_classic()+\n  #edit theme\n  theme(\n    #remove all subtitles\n    legend.position = \"none\",\n    #remove y-axis title\n    axis.title.y = element_blank(),\n    #remove text from y-axis\n    axis.text.y = element_blank(),\n    #remove ticks\n    axis.ticks = element_blank(),\n    #remove axes\n    axis.line = element_blank(),\n    #add grid line - major\n    panel.grid.major.x = element_line(),\n    #add dotted grid line - minor\n    panel.grid.minor.x = element_line(linetype = \"dashed\"),\n    #increase plot margins\n    plot.margin = margin(10,10,10,10,\"pt\"),\n    #change the color of the plot background\n    plot.background = element_rect(fill = \"#f1f1f1\", color = NA),\n    #change the background color of the panel\n    panel.background = element_rect(fill = \"#f1f1f1\", color = NA)\n  )+\n  #doesn't crop the images that come out of the panel\n  coord_cartesian(\n    clip = \"off\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/final-1.png){width=100%}\n:::\n:::\n\n\nEverything we've seen so far is the basics of the basics in ggplot2, but it already allows us to do a lot of cool stuff! There are several examples of charts with ggplot2 [here](../../../charts.qmd), and some ready-made [scripts](../../../scripts.qmd) here! \n\nIf you found this content useful in any way, share it with your friends!\n\nWould you like a workshop with this material? [Get in touch](mailto:bhmstabile@gmail.com)!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../site_libs/bslib-component-js-0.6.1/components.min.js\"></script>\n<script src=\"../../../site_libs/bslib-component-js-0.6.1/web-components.min.js\" type=\"module\"></script>\n<link href=\"../../../site_libs/bslib-component-css-0.6.1/components.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/bslib-tag-require-0.6.1/tag-require.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}