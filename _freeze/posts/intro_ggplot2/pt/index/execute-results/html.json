{
  "hash": "a9e3a4746e013fb434cbf4bd85458c7a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introdução ao ggplot2\"\npreview-colour:\n  code: true\n  text: true\nfilters:\n   - preview-colour\ndescription: \"Iniciando na visualização de dados\"\nauthor: \"Bruno Mioto\"\ndate: \"2024-01-30\"\nimage: cover.png\ncategories: [\"ggplot2\",\"dataviz\"]\nopen-graph:\n  description: \"Iniciando na visualização de dados\"\n  image: cover.png\ntwitter-card:\n  description: \"Iniciando na visualização de dados\"\n  image: cover.png\n  card-style: summary_large_image\nformat:\n  html:\n    code-link: true\nexecute:\n  freeze: true\n---\n\n\n\n![](cover.png)\n\n\n\n\n\n\n\n::: {.callout-note appearance=\"simple\"}\n\n## Antes de começarmos...\n\nEste é o material utilizado na aula sobre **Visualização de dados** ministrada na disciplina de **Introdução ao R** em 2024 para o **Programa de Pós-Graduação em Ecologia de Ambientes Aquáticos Continentais**. O objetivo não era apresentar **tudo** do ggplot2, apenas o **mais importante** que possa ser utilizado em artigos científicos.\n\nComo isso pode ser útil para mais pessoas, decidi disponibilizar para todos por aqui. Fique à vontade para compartilhar com outras pessoas!\n\n:::\n\n## Pacotes utilizados\n\nNessa aula vamos utilizar os seguintes pacotes:\n\n- `dplyr` para manipulação de dados\n\n- `ggplot2` para criar gráficos\n\n- `ggpath` para plotar imagens de uma forma bem mais fácil\n\n- `pokemon` para obter a tabela de pokemons em pt-br\n\nPara instalar os pacotes, utilizamos o seguinte script:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"dplyr\", \"ggplot2\", \n                   \"ggpath\", \"pokemon\"))\n```\n:::\n\n\n\nAgora que temos os pacotes instalados, é só carregá-los.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(pokemon)\nlibrary(ggplot2)\nlibrary(ggpath)\n```\n:::\n\n\n\n## Os dados\n\nPara criar nossos gráficos, precisamos de um conjunto de dados. Vamos utilizar o pacote **pokemon** criado pelo [William Amorim](https://twitter.com/wamorim_) que tem o dataset traduzido!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df <- pokemon::pokemon_ptbr\n```\n:::\n\n\n\n## Gráficos com R base\n\nUma forma de criar gráficos é usando o próprio R base, que é bem simples mas permite visualizações rápidas.\n\nPodemos criar gráficos de dispersão, por exemplo.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(altura ~ peso, data = pokemon_df)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nO problema começa quando queremos deixar esses gráficos mais bonitos\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(altura ~ peso, data = pokemon_df,\n     main = \"Título\",\n     xlab = \"Massa (kg)\", ylab = \"Altura (m)\",\n     pch = 19, frame = FALSE)\nabline(lm(altura ~ peso, data = pokemon_df), col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nIsso é confuso e eu acho muito difícil de deixar qualquer gráfico assim mais bonito.\n\n## Gráficos com ggplot2\n\nMas agora vamos conhecer o pacote `ggplot2`. Esse pacote foi a tese do [Hadley Wickham](https://en.wikipedia.org/wiki/Hadley_Wickham), atual cientista-chefe da RStudio/Posit. \n\nA mágica aqui é que esse pacote incorporou a **gramática de gráficos** (por isso o `gg`), que trouxe vários fundamentos a serem seguidos. Um deles é a criação de gráficos por camadas, como se fosse uma pintura!\n\n![Fonte: QCBS R Workshop Series](figures/gglayers.png){width=50%}\n\nEsse pacote já está incluso no `tidyverse` e segue o mesmo princípio.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n\nSe rodarmos só um `ggplot()`, teremos uma tela em branco.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nAgora temos que adicionar o nosso dataset e quais serão nossos eixos.\n\nSempre que estivermos falando de uma **variável** do nosso dataset, temos que colocar dentro do argumento `aes()`, que significa **aesthetics**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pokemon_df,\n       aes(x = peso,\n           y = altura))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nInclusive, como o ggplot2 funciona em camadas, podemos usar da seguinte forma:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = pokemon_df)+\n  aes(x = peso,\n      y = altura)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nComo o **ggplot2** faz parte do tidyverse, podemos falar para o R no imperativo: *\"Pegue o dataset `pokemon_df` e então crie o ggplot...\"*. O bom dessa abordagem é que, como o ggplot já sabe o dataset de antemão, ele nos ajuda a selecionar as variáveis (aperte `tab` antes de escrever as variáveis).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = peso,\n             y = altura))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\nAgora temos nosso gráfico com os eixos delimitados, e podemos adicionar as camadas que quisermos. O princípio do ggplot é parecido com o pipe, onde as informações são passadas diretamente para a camada abaixo, assim não precisamos adicionar os dados novamente.\n\n### Geometrias\n\nAs geometrias são funções que começam por `geom_*`. Existem muitas e podemos ter uma ajudinha com a [colinha do ggplot2](https://posit.co/wp-content/uploads/2022/10/data-visualization-1.pdf).\n\nPrimeiro, vamos criar um gráfico de dispersão\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = peso,\n             y = altura))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nPara adicionar mais uma camada de geometria, é só adicionar mais uma camada nessa pintura. Vamos adicionar uma linha de tendência com a função `geom_smooth()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = peso,\n             y = altura))+\n  geom_point()+\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nPodemos adicionar uma linha de tendência linear com o argumento `method = \"lm\"`!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = peso,\n             y = altura))+\n  geom_point()+\n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\nAqui podemos perceber como o ggplot2 funciona igual a uma pintura. Como o `geom_smooth()` foi chamado **depois** do `geom_point()`, ele é plotado por cima. \n\nVamos ver o mesmo exemplo mas invertendo essas geometrias.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = peso,\n             y = altura))+\n  geom_smooth(method = \"lm\")+\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\nVamos fazer um boxplot (utilizando a geometria `geom_boxplot`) do tipo do pokemon por altura\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = tipo_1, y = altura))+\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nAgora vamos fazer um gráfico de colunas (utilizando a geometria `geom_col()`) do ataque dos pokemons.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = pokemon, y = ataque))+\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\nEita! Nós temos muitos dados! Vamos filtrar só os pokemons iniciais e suas evoluções para plotar.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niniciais <- pokemon_df %>% \n  filter(id %in% 1:9)\n```\n:::\n\n\n\nVamos testar!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niniciais %>% \n  ggplot(aes(x = pokemon, y = ataque))+\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\nPodemos inverter os eixos, é só mudar. Inclusive com textos grandes, é mais indicado eles ficarem no eixo y.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niniciais %>% \n  ggplot(aes(x = ataque, y = pokemon))+\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\nOs pokemons não estão na ordem que gostaríamos (como no dataset), estão em ordem alfabética. Então temos que ordená-los pela `id`, mas para serem ordenados precisamos considerá-los como fatores.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niniciais2 <- iniciais %>% \n  mutate(pokemon = reorder(pokemon, id))\n```\n:::\n\n\n\nVamos ver se funcionou usando a função `glimpse()` (significa *espiadinha* do dplyr). Perceba a classe de cada variável entre `<...> `\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(iniciais2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 9\nColumns: 22\n$ id              <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9\n$ pokemon         <fct> bulbasaur, ivysaur, venusaur, charmander, charmeleon, …\n$ id_especie      <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9\n$ altura          <dbl> 0.07, 0.10, 0.20, 0.06, 0.11, 0.17, 0.05, 0.10, 0.16\n$ peso            <dbl> 0.69, 1.30, 10.00, 0.85, 1.90, 9.05, 0.90, 2.25, 8.55\n$ exp_base        <dbl> 64, 142, 236, 62, 142, 240, 63, 142, 239\n$ tipo_1          <chr> \"grama\", \"grama\", \"grama\", \"fogo\", \"fogo\", \"fogo\", \"ág…\n$ tipo_2          <chr> \"venenoso\", \"venenoso\", \"venenoso\", NA, NA, \"voador\", …\n$ hp              <dbl> 45, 60, 80, 39, 58, 78, 44, 59, 79\n$ ataque          <dbl> 49, 62, 82, 52, 64, 84, 48, 63, 83\n$ defesa          <dbl> 49, 63, 83, 43, 58, 78, 65, 80, 100\n$ ataque_especial <dbl> 65, 80, 100, 60, 80, 109, 50, 65, 85\n$ defesa_especial <dbl> 65, 80, 100, 50, 65, 85, 64, 80, 105\n$ velocidade      <dbl> 45, 60, 80, 65, 80, 100, 43, 58, 78\n$ cor_1           <chr> \"#78C850\", \"#78C850\", \"#78C850\", \"#F08030\", \"#F08030\",…\n$ cor_2           <chr> \"#A040A0\", \"#A040A0\", \"#A040A0\", NA, NA, \"#A890F0\", NA…\n$ cor_final       <chr> \"#81A763\", \"#81A763\", \"#81A763\", NA, NA, \"#DE835E\", NA…\n$ grupo_ovo_1     <chr> \"monster\", \"monster\", \"monster\", \"monster\", \"monster\",…\n$ grupo_ovo_2     <chr> \"plant\", \"plant\", \"plant\", \"dragon\", \"dragon\", \"dragon…\n$ url_icone       <chr> \"//archives.bulbagarden.net/media/upload/7/7b/001MS6.p…\n$ url_imagem      <chr> \"https://raw.githubusercontent.com/HybridShivam/Pokemo…\n$ id_geracao      <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1\n```\n\n\n:::\n:::\n\n\n\nOlha como ficou ordenado agora!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niniciais2 %>% \n  ggplot(aes(x = ataque, y = pokemon))+\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\nEstão faltando **cores** nesses gráficos!\n\nAgora vamos utilizar os argumentos `color` e `fill`. Quando a forma for sólida, utilizamos apenas o `color`, se tiver contorno e preenchimento, utilizamos o `color`e `fill`, respectivamente.\n\nPodemos colorir de acordo com qualquer variável, nesse caso vamos colorir por **tipo**!\n\nVeja que podemos determinar a variável na função `ggplot()` e ela servirá para todas as seguintes. Se quisermos aplicar a uma camada apenas, colocamos apenas nela.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niniciais2 %>% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\nAgora podemos adicionar o contorno. Como ele não é uma variável (é uma cor fixa), não precisa ir dentro do `aes()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niniciais2 %>% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n### Labels\n\nTodo gráfico pode ter título, subtítulo, titulo dos eixos, etc.\n\nTudo isso pode ser determinado utilizando a função `labs()` dentro do ggplot. Perceba que a legenda é criada de acordo com a variável `fill`, por isso o título da legenda seguirá essa variável.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niniciais2 %>% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  labs(\n    title = \"Os pokemons iniciais\",\n    subtitle = \"Separados por tipo\",\n    caption = \"Bruno Mioto\",\n    x = \"Ataque\",\n    y = \"Pokemon\",\n    fill = \"Tipo\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n### Escalas\n\nE se quisermos editar as escalas? Nesse caso vamos utilizar o conjunto de funções `scale_*`.\n\nVamos editar o eixo X. As quebras estão de 20 em 20, vamos colocar de 10 em 10. Como o eixo x é contínuo, vamos usar a função `scale_x_continuous()`. O argumento `breaks` nos ajuda com essa tarefa!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niniciais2 %>% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_x_continuous(breaks = seq(0,200,10))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\nAs cores também podem ser definidas pela função `scale_*`. Essas cores não são exatamente as que queremos, podemos definir manualmente usando a função `scale_fill_manual()`.\n\nComo as cores estão definidas de acordo com o tipo, vamos usar elas como base. O próprio dataset traz as cores para cada tipo. Para o tipo **água** usaremos a cor `#6890F0`, para o tipo **fogo** usaremos a cor `#F08030` e para o tipo **grama** usaremos a cor `#78C850`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niniciais2 %>% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\nAlém de determinar as cores, também podemos determinar as labels que cada cor terá na legenda. Vamos fazer isso dentro da função `scale` também, mas com o argumento `labels`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niniciais2 %>% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    ),\n    labels = c(\n      \"fogo\" = \"Fogo\",\n      \"grama\" = \"Grama\",\n      \"água\" = \"Água\"\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n### Temas\n\nMas esses gráficos não estão tão bonitos ainda, podemos editar **qualquer** coisa dos gráficos, desde a cor do fundo até a fonte. \n\nO ggplot2 já tem alguns temas pré definidos. Vamos testar\n\nEssa é a `theme_bw()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niniciais2 %>% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )+\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\nEu gosto bastante do `theme_classic()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niniciais2 %>% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )+\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\nO `theme_minimal()` também é muito utilizado.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niniciais2 %>% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\nO tema `theme_void()` mantém **apenas** as geometrias do gráfico gerado.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niniciais2 %>% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )+\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\nMas podemos editar qualquer coisa dentro do tema escolhido também. Essas funções são apenas configuração pré-determinadas.\n\nA maioria das configurações podem ser vistas [neste site](https://ggplot2tor.com/theme). Para mudar as configurações do tema, adicionamos os argumentos na função `theme()`\n\nVamos eliminar o título dos eixos\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niniciais2 %>% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )+\n  theme(\n    axis.title = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\nOu mudar o fundo do gráfico. Perceba que temos `plot` (o gráfico total) e `panel` (apenas o painel entre os eixos)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niniciais2 %>% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )+\n  theme(\n    plot.background = element_rect(fill = \"pink\"),\n    panel.background = element_rect(fill = \"yellow\")\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\nVamos mudar as linhas de grade!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niniciais2 %>% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )+\n  theme(\n    plot.background = element_rect(fill = \"pink\"),\n    panel.background = element_rect(fill = \"yellow\",\n                                    color = \"blue\"),\n    panel.grid.major = element_line(color = \"green\"),\n    panel.grid.major.x = element_line(linetype = \"dashed\"),\n    panel.grid.minor.x = element_line(color = \"black\")\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\nMeu Deus! O gráfico não ficou bonito, mas ficou didático! (Mas nunca faça algo assim de verdade, por favor)\n\n### Facetas\n\nMuitas vezes temos muitas informações para mostrar em apenas um gráfico. Para isso podemos utilizar a ideia de **pequenos múltiplos** com a função `facet_wrap()`!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = ataque, \n             y = defesa, \n             color = id_geracao))+\n  geom_point()+\n  facet_wrap(.~id_geracao)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n\nNesse caso o ggplot interpretou a coluna `id_geracao` como numérica contínua. Mas nesse caso cada **geração** é independente de outra. Podemos dizer para o ggplot2 interpretas essa variável como **fator**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = ataque, \n             y = defesa, \n             color = factor(id_geracao)))+\n  geom_point()+\n  facet_wrap(.~factor(id_geracao))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n\nPodemos usar as facetas com outros dados também.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon_df %>% \n  ggplot(aes(x = ataque, \n             y = defesa, \n             color = tipo_1))+\n  geom_point()+\n  facet_wrap(.~tipo_1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n## Plotar imagens\n\nSe quisermos colocar figuras nos nosso gráficos, a melhor indicação é usar o pacote [**ggpath**](https://mrcaseb.github.io/ggpath/). Essa é melhor forma de plotar imagens!\n\nPara isso vamos utilizar a função `geom_from_path()`. Só precisamos informar qual é a coluna com o caminho para a figura.\n\nUma sugestão é colocar o argumento da largura `width` como 0.1 pois as figuras podem ficar **gigantes**!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggpath)\n\niniciais2 %>% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  geom_col(color = \"black\")+\n  geom_from_path(aes(path = url_imagem),\n                 width = 0.1)+\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggpath-1.png){width=672}\n:::\n:::\n\n\n\n### Gráfico finalizado\n\nAqui adicionei alguns toques finais em nosso gráfico (veja o posicionamente dos nomes e figuras!). Infelizmente não cabe a esse post abordar todos esses detalhes, mas deixei **tudo** com comentários!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niniciais2 %>% \n  ggplot(aes(x = ataque, y = pokemon, fill = tipo_1))+\n  #adiciona colunas\n  geom_col(color = \"black\",\n           width = 0.5)+\n  #adiciona nomes\n  geom_text(aes(label = pokemon,\n                color = tipo_1),\n            x = 1,\n            hjust = 0, #alinhamento lateral\n            nudge_y = 0.45, #ajuste vertical\n            fontface = \"bold\" #negrito\n            )+\n  #adiciona figuras\n  geom_from_path(aes(path = url_imagem),\n                 width = 0.1, #largura relativa ao total\n                 hjust = 0 #alinhamento lateral\n                 )+\n  #adiciona linha vertical\n  geom_vline(xintercept = 0)+\n  #expande eixo x\n  scale_x_continuous(\n    expand = expansion(mult = c(0,0.1)) #expansão esquerda-direita\n  )+\n  #edita cores (vai afetar o texto que usa color)\n  scale_color_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )+\n  #edita cores (vai afetar a coluna que usa fill)\n  scale_fill_manual(\n    values = c(\n      \"água\" = \"#6890F0\",\n      \"fogo\" = \"#F08030\",\n      \"grama\" = \"#78C850\"\n    )\n  )+\n  #edita labs\n  labs(\n    x = \"Ataque\",\n    caption = \"Bruno Mioto - @BrunoHMioto\"\n  )+\n  #usa tema inicial\n  theme_classic()+\n  #edita tema\n  theme(\n    #remover toda a legenda\n    legend.position = \"none\",\n    #remove título do eixo y\n    axis.title.y = element_blank(),\n    #remove texto do eixo y\n    axis.text.y = element_blank(),\n    #remove ticks\n    axis.ticks = element_blank(),\n    #remove eixos\n    axis.line = element_blank(),\n    #adiciona linha de grade - major\n    panel.grid.major.x = element_line(),\n    #adiciona linha de grade pontilhada - minor\n    panel.grid.minor.x = element_line(linetype = \"dashed\"),\n    #aumenta as margens do gráfico\n    plot.margin = margin(10,10,10,10,\"pt\"),\n    #muda a cor do fundo do gráfico\n    plot.background = element_rect(fill = \"#f1f1f1\", color = NA),\n    #muda a cor do fundo do painel\n    panel.background = element_rect(fill = \"#f1f1f1\", color = NA)\n  )+\n  #não corta as imagens que saem do painel\n  coord_cartesian(\n    clip = \"off\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/final-1.png){width=672}\n:::\n:::\n\n\n\nTudo o que vimos até aqui é o básico do básico no ggplot2, mas que já nos permite fazer muita coisa legal! Tem vários exemplos de gráficos com ggplot2 [aqui](../../../charts.qmd), e alguns [scripts](../../../scripts.qmd) prontinhos aqui! \n\nSe achou este conteúdo útil de alguma forma, compartilhe com seus amigos!\n\nQuer um minicurso/workshop com este material? Entre em [contato](mailto:bhmstabile@gmail.com)!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}