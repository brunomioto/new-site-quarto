{
  "hash": "7680fb2f7230d40baf51f0022a90684b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Decifrando gráficos #2\"\ndescription: \"Do Jornal para o R\"\nauthor: \"Bruno Mioto\"\ndate: \"2025-04-14\"\nimage: cover.png\ncategories: [\"tutorial\",\"dataviz\",\"ggplot2\"]\nopen-graph:\n  description: \"Do Jornal para o R\"\n  image: cover.png\ntwitter-card:\n  description: \"Do Jornal para o R\"\n  image: cover.png\n  card-style: summary_large_image\nformat:\n  html:\n    fig-width: 8\n    fig-height: 5\n    fig-dpi: 600\nexecute:\n  warning: false\n---\n\n\n\n![](cover.png)\n\n## Como isso foi feito?\n\nTodo dia vemos gráficos nos jornais, mas nem sempre sabemos como eles foram feitos. De onde vieram os **dados**? Como foram **tratados**? E será que dá para **recriá-los** usando o R?\n\nNesta série, pegamos gráficos publicados nos principais **jornais** e recriamos do zero usando **R, tidyverse e ggplot2**. Vou mostrar como encontrar os dados, organizá-los e gerar visualizações que chegam o mais próximo possível do original – tudo de forma transparente e didática. Sim! Vamos fazer e aprender juntos!\n\nE tem mais: **todo o código e dados utilizados estarão disponíveis e comentados (clique nos números abaixo de cada conjunto de código!)**. E por estarmos trabalhando com uma **linguagem de programação**, todos vão obter o mesmo resultado ao final do script.\n\nAcompanhe a série e veja como transformar dados brutos em visualizações incríveis!\n\n## Post anterior\n\nQuer ver o post anterior? Acesse abaixo\n\n\n\n```{=html}\n<style>\n.image-card {\n    width: 100%;\n    max-width: 500px;\n    border-radius: 16px;\n    overflow: hidden;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n    background: white;\n    text-align: center;\n    margin: 20px auto;\n    text-decoration: none; /* Remove sublinhado do link */\n    display: block;\n    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n}\n\n.image-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);\n}\n\n.card-image {\n    width: 100%;\n    display: block;\n}\n\n.card-title {\n    font-size: 1.5rem;\n    font-weight: bold;\n    padding: 10px;\n    background: #f8f9fa;\n    color: black; /* Garante legibilidade */\n}\n\n</style>\n```\n\n```{=html}\n<style>\n    .cards-wrapper {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 20px;\n        justify-content: center;\n    }\n\n    .card-container {\n        width: 100%;\n        max-width: 500px;\n        background-color: #ffffff;\n        border-radius: 0.75rem;\n        box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n        overflow: hidden;\n        position: relative;\n        cursor: pointer;\n        text-decoration: none;\n        display: block;\n        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n    }\n\n    .card-container:hover {\n        transform: translateY(-5px);\n        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);\n    }\n\n    .top-bar {\n        height: 5rem;\n        width: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 1.25rem;\n        font-weight: bold;\n    }\n\n    .hex-logo {\n        width: 90px;\n        height: 104px;\n        position: absolute;\n        top: 5rem;\n        left: 1.5rem;\n        transform: translateY(-50%);\n        clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);\n        background-color: #ffffff;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 0.8rem;\n        color: #555;\n        font-weight: 600;\n        z-index: 10;\n        box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n    }\n\n    .hex-logo img {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n    }\n\n    .content-section {\n        padding-left: 8rem;\n        padding-right: 1.5rem;\n        padding-top: 0.2rem;\n        padding-bottom: 1rem;\n    }\n\n    .package-description {\n        color: #4b5567;\n        font-size: 0.875rem;\n        line-height: 1.25rem;\n        margin-top: 0;\n        margin-bottom: 0;\n    }\n\n    @media (min-width: 768px) {\n        .card-container {\n            width: calc(50% - 20px);\n        }\n    }\n</style>\n```\n\n```{=html}\n<div class=\"card-grid\">\n\n\n  <a href=\"https://www.brunomioto.com/posts/decifrando_graficos/1_nexo/\" class=\"image-card\" target=\"_blank\" rel=\"noopener noreferrer\">\n    <img src=\"https://www.brunomioto.com/posts/decifrando_graficos/1_nexo/cover.png\" class=\"card-image\">\n    <div class=\"card-title\">Decifrando gráficos #1</div>\n  </a>\n\n</div>\n\n<style>\n.card-grid {\n  display: grid;\n  gap: 20px; /* Espaço entre os cards */\n}\n\n.image-card {\n  display: flex;\n  flex-direction: column;\n  text-decoration: none;\n  color: black; /* ou qualquer outra cor */\n  border: 1px solid #ddd; /* Borda opcional */\n  border-radius: 5px; /* Borda arredondada opcional */\n  overflow: hidden; /* Garante que a imagem não vaze do card */\n}\n\n.card-image {\n  width: 100%;\n  height: auto;\n  display: block;\n}\n\n.card-title {\n  padding: 10px;\n  text-align: center;\n}\n\n</style>\n\n```\n\n\n\n## #2 - Pirâmide etária indígena (Folha de São Paulo)\n\nDessa vez vamos analisar um gráfico publicado pela **Folha de São Paulo** com dados do Censo 2022: [População indígena cresce no Norte, mas envelhece ao redor das cidades](https://www1.folha.uol.com.br/cotidiano/2024/05/populacao-indigena-cresce-no-norte-mas-envelhece-ao-redor-das-cidades.shtml)\n\n![](./figures/grafico_folha.png)\n\nEu particularmente acho muito legal visualizar pirâmides etárias, como essa que fiz com o pessoal da [Base dos Dados](https://medium.com/basedosdados/analisando-dados-de-vacinação-contra-covid-19-com-a-bd-49fe3db8c7f4). Vamos fazer apenas o gráfico, já que as anotações geralmente são adicionadas na pós produção (p. ex. Illustrator) e deixaria este post muito extenso.\n\n### Obtendo os dados\n\nTodos os dados do Censo 2022 estão disponíveis na aba de Downloads do portal: [https://censo2022.ibge.gov.br/panorama/downloads.html](https://censo2022.ibge.gov.br/panorama/downloads.html?localidade=BR). Lá vamos acessar os resultados [**Quilombolas e Indígenas, por sexo e idade, segundo recortes territoriais específicos - Resultados do universo**](https://www.ibge.gov.br/estatisticas/sociais/populacao/22827-censo-demografico-2022.html?edicao=39859&t=resultados) e então selecionamos [**População indígena, por localização do domicílio, grupos de idade e sexo**](https://sidra.ibge.gov.br/Tabela/8175).\n\nLogo nessa página vemos que os dados estão disponíveis através do **SIDRA** (Sistema IBGE de Recuperação Automática), que é basicamente uma plataforma que concentra **todos** os dados do IBGE! E o melhor: podemos acessar diretamente do R com o pacote [{sidrar}](https://github.com/rpradosiqueira/sidrar/)!\n\nAntes de tudo, vamos carregar os pacotes necessários\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sidrar) #baixar dados IBGE\nlibrary(janitor) #limpeza dos dados\nlibrary(dplyr) #manipulação dos dados\nlibrary(stringr) #trabalhar com strings/texto\nlibrary(ggplot2) #gráficos\n```\n:::\n\n\n\nAgora só precisamos do número da tabela disponível no site (que é 8175) e rodar o código abaixo:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"sidrar\")\nlibrary(sidrar)\n\npop_ind <- sidrar::get_sidra(8175)\n```\n:::\n\n\n\nPronto, fácil assim já temos os dados do Censo para este gráfico!\n\n### Trabalhando com os dados\n\nPois é, nossos dados sempre têm os nomes das variáveis com letras maiúsculas, espaços e acentos. Vamos padronizar para `snake_case`com o pacote {janitor} e também selecionar apenas as variáveis necessárias para este gráfico. Vamos salvando cada passo em um novo objeto para ficar mais fácil de acompanhar.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_ind2 <- pop_ind |> \n  janitor::clean_names() |> \n  dplyr::select(\n    variavel, \n    ano, \n    idade,\n    sexo, \n    localizacao_do_domicilio,\n    valor\n    )\n```\n:::\n\n\n\nMas veja que temos um valor **`Total`** em `idade`, `sexo` e `localizacao_do_domicilio`. Não vamos precisar dos totais, então podemos removê-los.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_ind3 <- pop_ind2 |> \n  dplyr::filter(\n    idade != \"Total\",\n    sexo != \"Total\",\n    localizacao_do_domicilio != \"Total\"\n  )\n```\n:::\n\n\n\nNessa tabela, temos as idades individuais, ou agrupadas a cada 5 anos. Vamos selecionar apenas as linhas com as idades agrupadas.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_ind4 <- pop_ind3 |> \n  filter(\n      idade %in% c(\n        \"0 a 4 anos\",\n        \"5 a 9 anos\",\n        \"10 a 14 anos\",\n        \"15 a 19 anos\",\n        \"20 a 24 anos\",\n        \"25 a 29 anos\",\n        \"30 a 34 anos\",\n        \"35 a 39 anos\",\n        \"40 a 44 anos\",\n        \"45 a 49 anos\",\n        \"50 a 54 anos\",\n        \"55 a 59 anos\",\n        \"60 a 64 anos\",\n        \"65 a 69 anos\",\n        \"70 a 74 anos\",\n        \"75 a 79 anos\",\n        \"80 a 84 anos\",\n        \"85 a 89 anos\",\n        \"90 a 94 anos\",\n        \"95 a 99 anos\",\n        \"100 anos ou mais\"\n      )\n  )\n```\n:::\n\n\n\n::: {.callout-tip collapse=\"true\"}\n## Preguiça de escrever tudo\n\nSe você não quer ficar digitando tudo (ou não quer pedir para o chatGPT escrever para você), é possível selecionar as linhas usando **expressões regulares**! Sim, elas parecem bruxaria, mas tem uma [colinha](https://rstudio.github.io/cheatsheets/translations/portuguese/strings_pt_br.pdf) que ajuda muito!\n\nO segredo é encontrar padrões! Veja que as categorias são basicamente **número+ a +número**, e o \"100 anos ou mais\" colocamos na mão. Vamos lá!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_ind4 <- pop_ind3 |> \n  filter(\n    stringr::str_detect( # <1>\n      idade, # <2>\n      \"[:digit:] a [:digit:]|100 anos ou mais\") # <3>\n    )\n```\n:::\n\n\n1. Detecta a ocorrência de expressões regulares\n2. Na variável `idade`\n3. E a expressão é: **[número] a [número] OU \"100 anos ou mais\"**\n\nBem mais simples!\n:::\n\nAgora para deixar igualzinho ao gráfico, vamos remover as palavras \" anos\" e transformar \"100 anos ou mais\" em \"100+\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_ind5 <- pop_ind4 |> \n  mutate(\n    idade2 = stringr::str_remove( # <1>\n      idade, # <2>\n      \" anos.*\" # <3>\n      ),\n    idade2 = ifelse(idade2 == 100, \"100+\", idade2) # <4>\n  )\n```\n:::\n\n\n1. Remove a ocorrência de expressões regulares.\n2. Na variável `idade`.\n3. E a expressão é: **[espaço]anos(e tudo que vier depois)**.\n4. Se `idade2` for igual a 100, transformar em \"100+\", caso contrário, mantenha como está.\n\nÓtimo, já temos a variável pronta, vamos calcular as proporções agrupadas pela localização do domicílio.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_ind6 <- pop_ind5 |>                                 \n  group_by(localizacao_do_domicilio) |>                 # <1>\n  add_count(name = \"total\", wt = valor) |>              # <2>\n  ungroup() |>                                          # <3>\n  mutate(prop = valor / total)                          # <4>\n```\n:::\n\n\n1. Agrupamos os dados pela variável localizacao_do_domicilio.\n2. Criamos uma nova coluna chamada total com a soma ponderada de valor dentro de cada grupo.\n3. Retiramos o agrupamento com `ungroup()` para evitar efeitos indesejados nas próximas operações.\n4. Calculamos a proporção de cada linha dentro do grupo, dividindo valor pelo total correspondente.\n\nAgora vamos fazer um truque e multiplicar os prop para homens por -1, assim eles ficam do lado esquerdo da pirâmide.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_ind7 <- pop_ind6 |> \n  mutate(\n    prop = ifelse(sexo == \"Homens\", prop*-1, prop)  # <1>\n  )\n```\n:::\n\n\n1. Inverte o sinal da proporção para homens, para que apareçam do lado esquerdo da pirâmide.\n\nVamos ver se os dados estão prontos?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_ind7 |> \n  ggplot(aes(x = prop, y = idade2, fill = sexo)) +       # <1>\n  geom_col()                                             # <2>\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=4800}\n:::\n:::\n\n\n1. Mapeia a proporção no eixo x, idade no eixo y e cor por sexo.\n2. Cria as barras da pirâmide populacional com `geom_col()`.\n\nVeja que as categorias de idade estão seguindo uma ordem alfabética, mas queremos que sigam a ordem da pirâmide etária. Vamos ordenar a variável `idade2` de acordo com a ordem que queremos. Para isso vamos transformar ela em um **fator** usando a função `fct_inorder()` do pacote {forcats} (é um anagrama para factors!)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_ind8 <- pop_ind7 |> \n  mutate(idade2 = forcats::fct_inorder(idade2)) # <1>\n```\n:::\n\n\n1. Converte a variável `idade2` em fator e preserva a ordem atual dos valores, garantindo que as faixas etárias apareçam na ordem do dataset no gráfico.\n\nAgora tudo está ordenado!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_ind8 |> \n  ggplot(aes(x = prop, y = idade2, fill = sexo))+\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=4800}\n:::\n:::\n\n\n\nPronto! Temos os dados prontos para o gráfico! Agora vamos para a parte mais legal!\n\n### Criando o gráfico\n\nPrimeiro vamos dividir os dados em dois grupos: os que estão **dentro** das terras indígenas e os que estão **fora**. Para isso, vamos usar a função `filter()` dentro de cada geometria do `geom_col()`.\n\nLembre-se que o grupo **\"Em terras indígenas\"** deve ser um retângulo preenchido e o grupo **\"Fora de terras indígenas\"** deve ser apenas contornado. Para isso, vamos usar o argumento `fill = NA` para criar uma geometria apenas com o contorno. Como o contorno está da mesma cor do preenchimento, vamos usar o `color = \"black\"` apenas para visualizar.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_ind8 |> \n  ggplot(aes(x = prop, y = idade2, \n             fill = sexo))+\n  geom_col(\n    data = ~filter(., \n                   localizacao_do_domicilio == \"Em terras indígenas\"), # <1>\n    color = NA # <2>\n  )+\n  geom_col(\n    data = ~filter(., \n                   localizacao_do_domicilio == \"Fora de terras indígenas\"), # <3>\n    fill = NA, \n    color = \"black\" # <4>\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=4800}\n:::\n:::\n\n\n1. Usa `filter()` para manter só as observações **dentro** das terras indígenas.\n2. Retira o contorno das barras preenchidas.\n3. Usa `filter()` para manter só as observações **fora** das terras indígenas.\n4. Define a cor do contorno como preta, apenas para fins de visualização.\n\nFaltam as cores! Vamos utilizar o argumento `color` também. E definir as cores utilizando `scale_color_manual()` e `scale_fill_manual()`. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_ind8 |> \n  ggplot(aes(x = prop, y = idade2,\n             fill = sexo, color = sexo))+\n  geom_col(\n    data = ~filter(., \n                   localizacao_do_domicilio == \"Em terras indígenas\"),\n    color = NA)+\n  geom_col(\n    data = ~filter(., \n                   localizacao_do_domicilio == \"Fora de terras indígenas\"),\n    fill = NA)+\n  scale_color_manual( # <1>\n    values = c(\n      \"Mulheres\" = \"#420e44\",\n      \"Homens\" = \"#076e56\"\n    )\n  )+\n  scale_fill_manual( # <2>\n    values = c(\n      \"Mulheres\" = \"#b3abce\",\n      \"Homens\" = \"#a5d4cf\"\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=4800}\n:::\n:::\n\n\n1. Define as cores do contorno (`color`) para cada sexo.\n2. Define cores mais claras de preenchimento (`fill`) para cada sexo.\n\nAgora o gráfico já está quase igual! Só precisamos mexer no **Tema** com a função `theme()`. Vamos deixar o fundo branco, tirar as grades, deixar os eixos mais bonitos e remover as legendas.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_ind8 |> \n  ggplot(aes(x = prop, y = idade2, \n             fill = sexo,\n             color = sexo))+\n  geom_col(\n    data = ~filter(.x,\n                   localizacao_do_domicilio == \"Em terras indígenas\"),\n    color = NA)+\n  geom_col(\n    data = ~filter(.x,\n                   localizacao_do_domicilio == \"Fora de terras indígenas\"),\n    fill = NA)+\n  scale_x_continuous( # <1>\n    breaks = seq(-0.08,0.08,0.02),\n    labels = c(\"8%\",\"6\",\"4\",\"2\",\"0\",\"2\",\"4\",\"6\",\"8%\")\n  )+\n  scale_fill_manual(\n    values = c(\n      \"Mulheres\" = \"#b3abce\",\n      \"Homens\" = \"#a5d4cf\"\n    )\n  )+\n  scale_color_manual(\n    values = c(\n      \"Mulheres\" = \"#420e44\",\n      \"Homens\" = \"#076e56\"\n    )\n  )+\n  theme_minimal()+ # <2>\n  theme( # <3>\n    legend.position = \"none\", #sem legenda\n    plot.background = element_rect(fill = \"white\", color = NA), #adiciona fundo\n    panel.grid.major.x = element_blank(), #sem grade major\n    panel.grid.minor.x = element_blank(), #sem grade minor\n    axis.title = element_blank(), #sem título dos eixos\n    axis.text = element_text(color = \"black\"), #texto em preto\n    axis.ticks.x = element_line(color = \"#ebebeb\") #ticks em cinza\n  )+\n  coord_cartesian( # <4>\n    xlim = c(-0.08,0.08)\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=4800}\n:::\n:::\n\n\n1. Define as quebras do eixo x (de -0.08 até 0.08 a cada 0.02 já que são porcentagens) e ajusta os rótulos para mostrar proporções negativas e positivas como porcentagens igual ao gráfico original.\n2. Usa um tema claro e limpo (`theme_minimal()`) parecido, como base para o gráfico.\n3. Remove legenda, grades do eixo x, títulos dos eixos e ajusta o estilo dos textos e ticks para deixar igual ao original.\n4. Ajusta manualmente os limites do eixo x para que o gráfico termine simetricamente em -8% e 8%.\n\n<!-- Agora sim! Aprendemos como uma equipe de jornal chegou até este gráfico! -->\n\nConseguimos! Até que ficou bem parecido!\n\nEspero que este post tenha sido útil para você! Se tiver alguma dúvida, sugestão (qual será o próximo post?) ou crítica, [mande um e-mail](mailto:bhmstabile@gmail.com)!\n\nQuer conhecer mais o meu trabalho? Veja meu [**Portfólio**](https://www.brunomioto.com/portfolio.html)!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}